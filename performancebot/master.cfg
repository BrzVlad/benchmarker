# -*- python -*-
# vim: syntax=python
import os, sys, itertools
from twisted.python import log

###### MODULE RELOAD MAGIC (cf. http://sourceforge.net/p/buildbot/mailman/message/32915320/ )
# this will reload all python files in the 'scan' directories relative to master (do not use . or ..)
scan = [''] # KEEP UP TO DATE

master = os.path.abspath(os.path.dirname(__file__))
files = filter(lambda f : f.endswith(".py") and not '__init__' in f, itertools.chain(*map(lambda s : map(lambda f : os.path.join(s,f), os.listdir(os.path.join(master, s))), scan)))
for f in files:
    modname = f[:-3].replace(os.sep, '.')
    if sys.modules.has_key(modname):
        oldModule = sys.modules.pop(modname)
        oldId = 1
        oldKey = None
        while True:
            oldKey = modname + "-" + str(oldId)
            if sys.modules.has_key(oldKey):
                oldId += 1
            else:
                break
        sys.modules[oldKey] = oldModule
        log.msg("Reloading " + modname + ", old module renamed as " + oldKey)


from buildbot.plugins import *
from buildbot.process.properties import Interpolate
from buildbot.steps.source import git
from buildbot.buildslave import BuildSlave
from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.steps.shell import ShellCommand

from buildbot.config import BuilderConfig

from monosteps import ParsingShellCommand, PutPropertiesStep
from monofactory import DebianMonoBuildFactory

from jenkinspoller import BuildURLToPropertyStep, FetchJenkinsBuildDetails, MonoJenkinsPoller, monoBaseUrl, propertyName_jenkinsBuildURL, propertyName_jenkinsGitCommit
import credentials
import re
# This is the dictionary that the buildmaster pays attention to
c = BuildmasterConfig = {}

all_repositories = {
    r'https://jenkins.mono-project.com/view/All/job/build-package-dpkg-mono': 'mono-jenkins',
    r'https://github.com/xamarin/benchmarker/': 'benchmarker'
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]
c['codebaseGenerator'] = codebaseGenerator

c['slaves'] = map(lambda (hostname,pwd): BuildSlave(hostname, pwd, max_builds=1), credentials.getSlaves())
c['protocols'] = {'pb': {'port': 9989}}
c['mergeRequests'] = False
c['db'] = {'db_url' : "sqlite:///state.sqlite", }

c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

# helper function to create change_source, schedulers and builder for a
# specific slave/platform/config_name configuration
def _mkBenchmarker(slavename, platform, config_name):
    global c
    builderName = platform + '_' + slavename + '_' + config_name

    c['change_source'].append(
            MonoJenkinsPoller(
                monoBaseUrl,
                platform, slavename,
                config_name, pollInterval=600
            )
    )

    codebases = {
            'benchmarker': {'repository': 'https://github.com/xamarin/benchmarker/'
                           ,'branch': None
                           ,'revision': 'HEAD'
                           },
            'mono-jenkins': {'repository': 'https://jenkins.mono-project.com/view/All/job/build-package-dpkg-mono'}
    }
    c['schedulers'].append(schedulers.SingleBranchScheduler(
                                name=builderName + '_jenkins_sched',
                                branch=None,
                                codebases = codebases,
                                treeStableTimer=None,
                                builderNames=[builderName]))
    c['schedulers'].append(schedulers.ForceScheduler(
                                name = builderName + '_force_sched',
                                codebases = codebases,
                                builderNames=[builderName]))

    f = DebianMonoBuildFactory()
    f.addStep(PutPropertiesStep({'platform': platform, 'config_name': config_name}))

    # transform some properties from the change source
    f.addStep(BuildURLToPropertyStep())

    # checkout benchmarker repo on the master and build it on the master.
    # the idea is that this minimizes dependencies (such as nuget or xbuild) on the slaves.
    f.cloneAndBuildBenchmarkerOnMaster()

    # upload build artifacts from master to slave
    f.uploadBenchmarker()

    tmpDir = lambda e : 'tmp' + str(e)
    f.addStep(ShellCommand(name = 'mkdir temp dir', command = ['mkdir', '-p', tmpDir('')]))
    # get URLs of jenkins build artifacts
    f.addStep(FetchJenkinsBuildDetails(
        name = 'fetch jenkins build',
        description = 'fetch URLs from Jenkins')
    )

    # download debian packages
    for propName, targetFile in [('deb_common_url', 'common.deb'), ('deb_asm_url', 'assemblies.deb'), ('deb_bin_url', 'mono.deb')]:
        f.addStep(ShellCommand(
            name = 'download ' + targetFile,
            description = 'downloading ' + targetFile + ' from jenkins',
            command = ['wget', '-O', tmpDir('/' + targetFile), Interpolate('%(prop:' + propName + ')s')]
        ))

    # install debian packages
    installRoot = lambda e: 'installation' + str(e)
    f.addStep(ShellCommand(name = 'envprep1', command = ['mkdir', '-p', installRoot('/var/lib/')]))
    f.addStep(ShellCommand(name = 'envprep2', command = ['sudo', '/bin/cp', '-a', '/var/lib/dpkg', installRoot('/var/lib/')]))
    for package in ['common.deb', 'assemblies.deb', 'mono.deb']:
        f.addStep(ShellCommand(
            name = 'install ' + package,
            description = 'install ' + package,
            command = ['sudo', '/usr/bin/dpkg', '--root=' + installRoot(''), '--unpack', tmpDir('/' + package)])
        )

    # get mono version
    f.addStep(ParsingShellCommand(
        name = 'getMonoVersion',
        parseRules = {'monoversion': re.compile('(?P<version>[a-zA-Z0-9\.\-\+]+)')},
        command = ['ls', installRoot('/opt')])
    )

    f.addStep(steps.ShellCommand(
        name = 'printMonoVersion',
        command = ['echo', Interpolate("%(prop:monoversion)s")])
    )

    if 'noturbo' in config_name:
        # TODO: add noturbo configuration magic
        pass

    # fire up benchmarks
    f.addStep(steps.ShellCommand(
        name = 'compare.exe',
        command = ['mono',
            'tools/compare.exe',
            '--build-url', Interpolate('%(prop:' + propertyName_jenkinsBuildURL + ')s'),
            '--root', Interpolate('../build/' + installRoot('/opt/%(prop:monoversion)s')),
            '--commit', Interpolate('%(prop:' + propertyName_jenkinsGitCommit + ')s'),
            'tests/',
            'benchmarks/',
            'machines/',
            Interpolate('configs/%(prop:config_name)s.conf')
        ],
        workdir = 'benchmarker'
    ))

    if 'noturbo' in config_name:
        # TODO: add noturbo configuration magic
        pass

    # cleanup working dir
    f.wipe()

    c['builders'].append(
        BuilderConfig(
            name = builderName,
            slavenames = [slavename],
            factory = f
        )
    )

for (slavename, _) in credentials.getSlaves():
    _mkBenchmarker(slavename, 'debian-amd64', 'auto-sgen-noturbo')


####### STATUS TARGETS
c['status'] = []
# TODO: add slack status

authz_cfg=authz.Authz(
    auth=auth.BasicAuth(credentials.getBasicAuthInfo()),
    gracefulShutdown = True,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = False,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY
c['title'] = "Mono Performance Bots"
c['titleURL'] = "https://github.com/mono/mono"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"
