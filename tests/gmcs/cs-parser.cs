// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Licensed under the terms of the GNU GPL
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//
// Possible optimization:
//   Run memory profiler with parsing only, and consider dropping 
//   arraylists where not needed.   Some pieces can use linked lists.


using System.Text;
using System.IO;
using System;

namespace Mono.CSharp
{
	using System.Collections;

	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser {
		NamespaceEntry  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;

		Delegate   current_delegate;
		
		GenericMethod current_generic_method;
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		Parameters current_local_parameters;

		/// <summary>
		///   Using during property parsing to describe the implicit
		///   value parameter that is passed to the "set" and "get"accesor
		///   methods (properties and indexers).
		/// </summary>
		FullNamedExpression implicit_value_parameter_type;
		Parameters indexer_parameters;

		/// <summary>
		///   Hack to help create non-typed array initializer
		/// </summary>
		public static FullNamedExpression current_array_type;
		FullNamedExpression pushed_current_array_type;

		/// <summary>
		///   Used to determine if we are parsing the get/set pair
		///   of an indexer or a property
		/// </summmary>
		bool parsing_indexer;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack oob_stack;

		///
		/// Switch stack.
		///
		Stack switch_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		CompilationUnit file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		/// assembly and module attribute definitions are enabled
		bool global_attrs_enabled = true;
		bool has_get, has_set;
		bool parameter_modifiers_not_allowed;
		bool params_modifiers_not_allowed;
		bool arglist_allowed;


		/// When using the interactive parser, this holds the
		/// resulting expression
		public object InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		// Stack<ToplevelBlock>
		Stack linq_clause_blocks;

		// A counter to create new class names in interactive mode
		static int class_count;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 8;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static  string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declarations opt_EOF",
//t    "compilation_unit : outer_declarations global_attributes opt_EOF",
//t    "compilation_unit : global_attributes opt_EOF",
//t    "compilation_unit : opt_EOF",
//t    "compilation_unit : interactive_parsing opt_EOF",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "outer_declarations : outer_declaration",
//t    "outer_declarations : outer_declarations outer_declaration",
//t    "outer_declaration : extern_alias_directive",
//t    "outer_declaration : using_directive",
//t    "outer_declaration : namespace_member_declaration",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_alias_directive",
//t    "using_directive : using_namespace_directive",
//t    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
//t    "using_alias_directive : USING error",
//t    "using_namespace_directive : USING namespace_name SEMICOLON",
//t    "$$1 :",
//t    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$1 namespace_body opt_semicolon",
//t    "qualified_identifier : IDENTIFIER",
//t    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
//t    "qualified_identifier : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "namespace_name : namespace_or_type_name",
//t    "$$2 :",
//t    "namespace_body : OPEN_BRACE $$2 namespace_body_body",
//t    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations CLOSE_BRACE",
//t    "$$3 :",
//t    "namespace_body_body : error $$3 CLOSE_BRACE",
//t    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations EOF",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_member_declarations :",
//t    "opt_namespace_member_declarations : namespace_member_declarations",
//t    "namespace_member_declarations : namespace_member_declaration",
//t    "namespace_member_declarations : namespace_member_declarations namespace_member_declaration",
//t    "namespace_member_declaration : type_declaration",
//t    "namespace_member_declaration : namespace_declaration",
//t    "namespace_member_declaration : field_declaration",
//t    "namespace_member_declaration : method_declaration",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "global_attributes : attribute_sections",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "attribute_section : OPEN_BRACKET attribute_target_specifier attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section : OPEN_BRACKET attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target_specifier : attribute_target COLON",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$4 :",
//t    "attribute : attribute_name $$4 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_name",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments : opt_positional_argument_list",
//t    "attribute_arguments : positional_argument_list COMMA named_argument_list",
//t    "attribute_arguments : named_argument_list",
//t    "opt_positional_argument_list :",
//t    "opt_positional_argument_list : positional_argument_list",
//t    "positional_argument_list : expression",
//t    "positional_argument_list : positional_argument_list COMMA expression",
//t    "named_argument_list : named_argument",
//t    "named_argument_list : named_argument_list COMMA named_argument",
//t    "named_argument_list : named_argument_list COMMA expression",
//t    "named_argument : IDENTIFIER ASSIGN expression",
//t    "class_body : OPEN_BRACE opt_class_member_declarations CLOSE_BRACE",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : error",
//t    "$$5 :",
//t    "$$6 :",
//t    "$$7 :",
//t    "$$8 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$5 type_declaration_name $$6 opt_class_base opt_type_parameter_constraints_clauses $$7 struct_body $$8 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$9 :",
//t    "struct_body : OPEN_BRACE $$9 opt_struct_member_declarations CLOSE_BRACE",
//t    "opt_struct_member_declarations :",
//t    "opt_struct_member_declarations : struct_member_declarations",
//t    "struct_member_declarations : struct_member_declaration",
//t    "struct_member_declarations : struct_member_declarations struct_member_declaration",
//t    "struct_member_declaration : constant_declaration",
//t    "struct_member_declaration : field_declaration",
//t    "struct_member_declaration : method_declaration",
//t    "struct_member_declaration : property_declaration",
//t    "struct_member_declaration : event_declaration",
//t    "struct_member_declaration : indexer_declaration",
//t    "struct_member_declaration : operator_declaration",
//t    "struct_member_declaration : constructor_declaration",
//t    "struct_member_declaration : type_declaration",
//t    "struct_member_declaration : destructor_declaration",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type constant_declarators SEMICOLON",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators COMMA constant_declarator",
//t    "$$10 :",
//t    "constant_declarator : IDENTIFIER ASSIGN $$10 constant_initializer",
//t    "constant_declarator : IDENTIFIER",
//t    "constant_initializer : constant_expression",
//t    "constant_initializer : array_initializer",
//t    "field_declaration : opt_attributes opt_modifiers member_type variable_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED member_type fixed_variable_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED member_type error",
//t    "fixed_variable_declarators : fixed_variable_declarator",
//t    "fixed_variable_declarators : fixed_variable_declarators COMMA fixed_variable_declarator",
//t    "fixed_variable_declarator : IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET",
//t    "fixed_variable_declarator : IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "local_variable_declarators : local_variable_declarator",
//t    "local_variable_declarators : local_variable_declarators COMMA local_variable_declarator",
//t    "local_variable_declarator : IDENTIFIER ASSIGN local_variable_initializer",
//t    "local_variable_declarator : IDENTIFIER",
//t    "local_variable_declarator : IDENTIFIER variable_bad_array",
//t    "local_variable_initializer : expression",
//t    "local_variable_initializer : array_initializer",
//t    "local_variable_initializer : STACKALLOC simple_type OPEN_BRACKET expression CLOSE_BRACKET",
//t    "local_variable_initializer : ARGLIST",
//t    "local_variable_initializer : STACKALLOC simple_type",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators COMMA variable_declarator",
//t    "$$11 :",
//t    "variable_declarator : member_declaration_name ASSIGN $$11 variable_initializer",
//t    "variable_declarator : member_declaration_name",
//t    "variable_declarator : member_declaration_name variable_bad_array",
//t    "variable_bad_array : OPEN_BRACKET opt_expression CLOSE_BRACKET",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "$$12 :",
//t    "method_declaration : method_header $$12 method_body",
//t    "$$13 :",
//t    "$$14 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$13 opt_formal_parameter_list CLOSE_PARENS $$14 opt_type_parameter_constraints_clauses",
//t    "$$15 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$15 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "opt_parameter_list_no_mod :",
//t    "$$16 :",
//t    "opt_parameter_list_no_mod : $$16 formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier type",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier type error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$17 :",
//t    "$$18 :",
//t    "$$19 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$17 OPEN_BRACE $$18 accessor_declarations $$19 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$20 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$20 accessor_body",
//t    "$$21 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$21 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$22 :",
//t    "$$23 :",
//t    "$$24 :",
//t    "$$25 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$22 type_declaration_name $$23 opt_class_base opt_type_parameter_constraints_clauses $$24 interface_body $$25 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "interface_body : OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$26 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$26 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$27 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$27 opt_parameter_list_no_mod CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$28 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$28 opt_parameter_list_no_mod CLOSE_PARENS",
//t    "$$29 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$29 opt_parameter_list_no_mod CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$30 :",
//t    "$$31 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$30 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$31 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$32 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$32 opt_argument_list CLOSE_PARENS",
//t    "$$33 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$33 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : COLON error",
//t    "$$34 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$34 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type variable_declarators SEMICOLON",
//t    "$$35 :",
//t    "$$36 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$35 event_accessor_declarations $$36 CLOSE_BRACE",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name error",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "event_accessor_declarations :",
//t    "$$37 :",
//t    "add_accessor_declaration : opt_attributes ADD $$37 block",
//t    "add_accessor_declaration : opt_attributes ADD error",
//t    "add_accessor_declaration : opt_attributes modifiers ADD",
//t    "$$38 :",
//t    "remove_accessor_declaration : opt_attributes REMOVE $$38 block",
//t    "remove_accessor_declaration : opt_attributes REMOVE error",
//t    "remove_accessor_declaration : opt_attributes modifiers REMOVE",
//t    "$$39 :",
//t    "$$40 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET opt_parameter_list_no_mod CLOSE_BRACKET OPEN_BRACE $$39 accessor_declarations $$40 CLOSE_BRACE",
//t    "$$41 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$41 enum_body opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "$$42 :",
//t    "$$43 :",
//t    "enum_body : OPEN_BRACE $$42 opt_enum_member_declarations $$43 CLOSE_BRACE",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations opt_comma",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$44 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$44 ASSIGN constant_expression",
//t    "$$45 :",
//t    "$$46 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$45 opt_type_parameter_constraints_clauses $$46 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_name : member_name",
//t    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : type_name",
//t    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
//t    "type_name : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$47 :",
//t    "type_declaration_name : IDENTIFIER $$47 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_name opt_nullable",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : type_expression STAR",
//t    "type_expression : VOID STAR",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "base_type_name : error",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "predefined_type : builtin_types",
//t    "predefined_type : VOID",
//t    "primary_expression : primary_expression_no_array_creation",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression_no_array_creation : literal",
//t    "primary_expression_no_array_creation : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_no_array_creation : parenthesized_expression",
//t    "primary_expression_no_array_creation : default_value_expression",
//t    "primary_expression_no_array_creation : member_access",
//t    "primary_expression_no_array_creation : invocation_expression",
//t    "primary_expression_no_array_creation : element_access",
//t    "primary_expression_no_array_creation : this_access",
//t    "primary_expression_no_array_creation : base_access",
//t    "primary_expression_no_array_creation : post_increment_expression",
//t    "primary_expression_no_array_creation : post_decrement_expression",
//t    "primary_expression_no_array_creation : object_or_delegate_creation_expression",
//t    "primary_expression_no_array_creation : anonymous_type_expression",
//t    "primary_expression_no_array_creation : typeof_expression",
//t    "primary_expression_no_array_creation : sizeof_expression",
//t    "primary_expression_no_array_creation : checked_expression",
//t    "primary_expression_no_array_creation : unchecked_expression",
//t    "primary_expression_no_array_creation : pointer_member_access",
//t    "primary_expression_no_array_creation : anonymous_method_expression",
//t    "literal : boolean_literal",
//t    "literal : integer_literal",
//t    "literal : real_literal",
//t    "literal : LITERAL_CHARACTER",
//t    "literal : LITERAL_STRING",
//t    "literal : NULL",
//t    "real_literal : LITERAL_FLOAT",
//t    "real_literal : LITERAL_DOUBLE",
//t    "real_literal : LITERAL_DECIMAL",
//t    "integer_literal : LITERAL_INTEGER",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "open_parens_any : OPEN_PARENS_LAMBDA",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : predefined_type DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list CLOSE_PARENS",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list CLOSE_BRACE",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : non_assignment_expression",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA argument",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST open_parens_any argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST open_parens_any CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST",
//t    "variable_reference : expression",
//t    "element_access : primary_expression_no_array_creation OPEN_BRACKET expression_list CLOSE_BRACKET",
//t    "element_access : array_creation_expression OPEN_BRACKET expression_list CLOSE_BRACKET",
//t    "element_access : primary_expression_no_array_creation rank_specifiers",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "this_access : THIS",
//t    "base_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "base_access : BASE OPEN_BRACKET expression_list CLOSE_BRACKET",
//t    "base_access : BASE error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW simple_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW simple_type object_or_collection_initializer",
//t    "array_creation_expression : NEW simple_type OPEN_BRACKET expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW simple_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifiers array_initializer",
//t    "array_creation_expression : NEW simple_type error",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "opt_rank_specifier_or_nullable : opt_nullable",
//t    "opt_rank_specifier_or_nullable : opt_nullable rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET error CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "variable_initializer_list : error",
//t    "$$48 :",
//t    "typeof_expression : TYPEOF $$48 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : IDENTIFIER generic_dimension",
//t    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
//t    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER",
//t    "$$49 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$49 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$50 :",
//t    "anonymous_method_signature : OPEN_PARENS $$50 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : cast_expression",
//t    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "cast_expression : OPEN_PARENS predefined_type CLOSE_PARENS prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier type IDENTIFIER",
//t    "lambda_parameter : type IDENTIFIER",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "$$51 :",
//t    "lambda_expression_body : $$51 expression",
//t    "lambda_expression_body : block",
//t    "$$52 :",
//t    "lambda_expression : IDENTIFIER ARROW $$52 lambda_expression_body",
//t    "$$53 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA opt_lambda_parameter_list CLOSE_PARENS ARROW $$53 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$54 :",
//t    "$$55 :",
//t    "$$56 :",
//t    "$$57 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$54 type_declaration_name $$55 opt_class_base opt_type_parameter_constraints_clauses $$56 class_body $$57 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "opt_class_base :",
//t    "opt_class_base : class_base",
//t    "class_base : COLON type_list",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "$$58 :",
//t    "block : OPEN_BRACE $$58 opt_statement_list CLOSE_BRACE",
//t    "$$59 :",
//t    "block_prepared : OPEN_BRACE $$59 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : declaration_statement",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : declaration_statement",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : declaration_statement",
//t    "embedded_statement : labeled_statement",
//t    "empty_statement : SEMICOLON",
//t    "$$60 :",
//t    "labeled_statement : IDENTIFIER COLON $$60 statement",
//t    "declaration_statement : local_variable_declaration SEMICOLON",
//t    "declaration_statement : local_constant_declaration SEMICOLON",
//t    "variable_type : primary_expression_no_array_creation opt_rank_specifier_or_nullable",
//t    "variable_type : builtin_types opt_rank_specifier_or_nullable",
//t    "variable_type : VOID opt_rank_specifier",
//t    "local_variable_pointer_type : primary_expression_no_array_creation STAR",
//t    "local_variable_pointer_type : builtin_types STAR",
//t    "local_variable_pointer_type : VOID STAR",
//t    "local_variable_pointer_type : local_variable_pointer_type STAR",
//t    "local_variable_type : variable_type",
//t    "local_variable_type : local_variable_pointer_type opt_rank_specifier",
//t    "local_variable_declaration : local_variable_type local_variable_declarators",
//t    "local_constant_declaration : CONST variable_type constant_declarators",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "statement_expression : expression",
//t    "statement_expression : error",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "$$61 :",
//t    "switch_statement : SWITCH open_parens_any $$61 expression CLOSE_PARENS switch_block",
//t    "switch_block : OPEN_BRACE opt_switch_sections CLOSE_BRACE",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "$$62 :",
//t    "switch_section : switch_labels $$62 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "$$63 :",
//t    "for_statement : FOR open_parens_any opt_for_initializer SEMICOLON $$63 opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "for_initializer : local_variable_declaration",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
//t    "$$64 :",
//t    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$64 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO IDENTIFIER SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER RETURN expression SEMICOLON",
//t    "yield_statement : IDENTIFIER RETURN SEMICOLON",
//t    "yield_statement : IDENTIFIER BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : IDENTIFIER",
//t    "$$65 :",
//t    "catch_clause : CATCH opt_catch_args $$65 block",
//t    "opt_catch_args :",
//t    "opt_catch_args : catch_args",
//t    "catch_args : open_parens_any type opt_identifier CLOSE_PARENS",
//t    "catch_args : open_parens_any CLOSE_PARENS",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$66 :",
//t    "unsafe_statement : UNSAFE $$66 block",
//t    "$$67 :",
//t    "fixed_statement : FIXED open_parens_any type_and_void fixed_pointer_declarators CLOSE_PARENS $$67 embedded_statement",
//t    "fixed_pointer_declarators : fixed_pointer_declarator",
//t    "fixed_pointer_declarators : fixed_pointer_declarators COMMA fixed_pointer_declarator",
//t    "fixed_pointer_declarator : IDENTIFIER ASSIGN expression",
//t    "fixed_pointer_declarator : IDENTIFIER",
//t    "$$68 :",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS $$68 embedded_statement",
//t    "$$69 :",
//t    "using_statement : USING open_parens_any local_variable_declaration CLOSE_PARENS $$69 embedded_statement",
//t    "$$70 :",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS $$70 embedded_statement",
//t    "$$71 :",
//t    "query_expression : first_from_clause $$71 query_body",
//t    "first_from_clause : FROM IDENTIFIER IN expression",
//t    "first_from_clause : FROM type IDENTIFIER IN expression",
//t    "$$72 :",
//t    "from_clause : FROM IDENTIFIER IN $$72 expression",
//t    "$$73 :",
//t    "from_clause : FROM type IDENTIFIER IN $$73 expression",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "$$74 :",
//t    "select_or_group_clause : SELECT $$74 expression",
//t    "$$75 :",
//t    "$$76 :",
//t    "select_or_group_clause : GROUP $$75 expression $$76 BY expression",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$77 :",
//t    "let_clause : LET IDENTIFIER ASSIGN $$77 expression",
//t    "$$78 :",
//t    "where_clause : WHERE $$78 boolean_expression",
//t    "$$79 :",
//t    "$$80 :",
//t    "$$81 :",
//t    "join_clause : JOIN IDENTIFIER IN $$79 expression ON $$80 expression EQUALS $$81 expression opt_join_into",
//t    "$$82 :",
//t    "$$83 :",
//t    "$$84 :",
//t    "join_clause : JOIN type IDENTIFIER IN $$82 expression ON $$83 expression EQUALS $$84 expression opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO IDENTIFIER",
//t    "$$85 :",
//t    "orderby_clause : ORDERBY $$85 orderings",
//t    "orderings : order_by",
//t    "$$86 :",
//t    "orderings : order_by COMMA $$86 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$87 :",
//t    "orderings_then_by : orderings_then_by COMMA $$87 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$88 :",
//t    "opt_query_continuation : INTO IDENTIFIER $$88 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives",
//t    "$$89 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$89 interactive_statement_list",
//t    "$$90 :",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER $$90 interactive_compilation_unit",
//t    "interactive_compilation_unit : outer_declarations",
//t    "interactive_compilation_unit : outer_declarations global_attributes",
//t    "interactive_compilation_unit : global_attributes",
//t    "interactive_compilation_unit :",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM","JOIN",
    "ON","EQUALS","SELECT","GROUP","BY","LET","ORDERBY","ASCENDING",
    "DESCENDING","INTO","INTERR_NULLABLE","EXTERN_ALIAS","OP_GENERICS_LT",
    "OP_GENERICS_LT_DECL","OP_GENERICS_GT","GET","SET","LAST_KEYWORD",
    "OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET",
    "OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON",
    "TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND",
    "BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON",
    "OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE",
    "OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "LITERAL_INTEGER","LITERAL_FLOAT","LITERAL_DOUBLE","LITERAL_DECIMAL",
    "LITERAL_CHARACTER","LITERAL_STRING","IDENTIFIER",
    "OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST","GENERIC_DIMENSION",
    "DEFAULT_COLON","EVAL_STATEMENT_PARSER",
    "EVAL_COMPILATION_UNIT_PARSER","EVAL_USING_DECLARATIONS_UNIT_PARSER",
    "UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0;                                   // state stack ptr
    int [] yyStates = new int[yyMax];	                // state stack 
    Object yyVal = null;                               // value stack ptr
    Object [] yyVals = new Object[yyMax];	        // value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tks to shift

    /*yyLoop:*/ for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        int[] i = new int[yyStates.Length+yyMax];
        yyStates.CopyTo (i, 0);
        yyStates = i;
        Object[] o = new Object[yyVals.Length+yyMax];
        yyVals.CopyTo (o, 0);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 6:
#line 366 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 7:
#line 370 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 15:
#line 393 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location);
		}
	  }
  break;
case 16:
#line 406 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 19:
#line 418 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 20:
#line 423 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 21:
#line 431 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-3+yyTop];
		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], (Location) yyVals[-4+yyTop]);
	  }
  break;
case 22:
#line 435 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }
  break;
case 23:
#line 443 "cs-parser.jay"
  {
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], (Location) yyVals[-2+yyTop]);
	  }
  break;
case 24:
#line 455 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (yyVals[-2+yyTop] != null) {
			Report.Error(1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}

		current_namespace = new NamespaceEntry (
			current_namespace, file, name.GetName ());
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 25:
#line 468 "cs-parser.jay"
  { 
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 26:
#line 477 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 27:
#line 482 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 28:
#line 487 "cs-parser.jay"
  {
		syntax_error (lexer.Location, "`.' expected");
	  }
  break;
case 33:
#line 504 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }
  break;
case 34:
#line 516 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 37:
#line 529 "cs-parser.jay"
  {
		Report.Error (1518, lexer.Location, "Expected `class', `delegate', `enum', `interface', or `struct'");
	  }
  break;
case 39:
#line 537 "cs-parser.jay"
  {
		Report.Error (1513, lexer.Location, "Expected `}'");
	  }
  break;
case 48:
#line 564 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			DeclSpace ds = (DeclSpace)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE|Modifiers.PROTECTED)) != 0){
				Report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}
		}
		current_namespace.DeclarationFound = true;
	  }
  break;
case 49:
#line 575 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 50:
#line 579 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 51:
#line 582 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 57:
#line 608 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes)yyVals[0+yyTop];
			if (global_attrs_enabled) {
				CodeGen.Assembly.AddAttributes (attrs.Attrs);
			} else {
				foreach (Attribute a in attrs.Attrs) {
					Report.Error (1730, a.Location, "Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
				}
			}
		}
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 58:
#line 625 "cs-parser.jay"
  {
		global_attrs_enabled = false;
		yyVal = null;
      }
  break;
case 59:
#line 630 "cs-parser.jay"
  { 
		global_attrs_enabled = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 60:
#line 639 "cs-parser.jay"
  {
		if (current_attr_target != String.Empty) {
			ArrayList sect = (ArrayList) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					CodeGen.Module.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target != null && current_attr_target.Length > 0) {
					CodeGen.Assembly.AddAttributes (sect);
					yyVal = null;
				} else {
					yyVal = new Attributes (sect);
				}
				if (yyVal == null) {
					if (RootContext.Documentation != null) {
						Lexer.check_incorrect_doc_comment ();
						Lexer.doc_state =
							XmlCommentState.Allowed;
					}
				}
			} else {
				yyVal = new Attributes (sect);
			}		
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }
  break;
case 61:
#line 669 "cs-parser.jay"
  {
		if (current_attr_target != String.Empty) {
			Attributes attrs = yyVals[-1+yyTop] as Attributes;
			ArrayList sect = (ArrayList) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					CodeGen.Module.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target == "assembly") {
					CodeGen.Assembly.AddAttributes (sect);
					yyVal = null;
				} else {
					if (attrs == null)
						attrs = new Attributes (sect);
					else
						attrs.AddAttributes (sect);			
				}
			} else {
				if (attrs == null)
					attrs = new Attributes (sect);
				else
					attrs.AddAttributes (sect);
			}		
			yyVal = attrs;
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }
  break;
case 62:
#line 703 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
 	  }
  break;
case 63:
#line 707 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 64:
#line 714 "cs-parser.jay"
  {
		current_attr_target = (string)yyVals[-1+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 65:
#line 722 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }
  break;
case 66:
#line 726 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 67:
#line 727 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 68:
#line 729 "cs-parser.jay"
  {
		string name = GetTokenName (yyToken);
		yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 69:
#line 737 "cs-parser.jay"
  {
		ArrayList attrs = new ArrayList (4);
		attrs.Add (yyVals[0+yyTop]);

		yyVal = attrs;
	       
	  }
  break;
case 70:
#line 745 "cs-parser.jay"
  {
		ArrayList attrs = (ArrayList) yyVals[-2+yyTop];
		attrs.Add (yyVals[0+yyTop]);

		yyVal = attrs;
	  }
  break;
case 71:
#line 755 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 72:
#line 759 "cs-parser.jay"
  {
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			Report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		object [] arguments = (object []) yyVals[0+yyTop];
		MemberName left = mname.Left;
		string identifier = mname.Name;

		Expression left_expr = left == null ? null : left.GetTypeExpression ();

		if (current_attr_target == String.Empty)
			yyVal = null;
		else if (global_attrs_enabled && (current_attr_target == "assembly" || current_attr_target == "module"))
			/* FIXME: supply "nameEscaped" parameter here.*/
			yyVal = new GlobalAttribute (current_namespace, current_attr_target,
						  left_expr, identifier, arguments, mname.Location, lexer.IsEscapedIdentifier (mname.Location));
		else
			yyVal = new Attribute (current_attr_target, left_expr, identifier, arguments, mname.Location, lexer.IsEscapedIdentifier (mname.Location));
	  }
  break;
case 73:
#line 785 "cs-parser.jay"
  { /* reserved attribute name or identifier: 17.4 */ }
  break;
case 74:
#line 789 "cs-parser.jay"
  { yyVal = null; }
  break;
case 75:
#line 791 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 76:
#line 799 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] == null)
			yyVal = null;
		else {
			yyVal = new object [] { yyVals[0+yyTop], null };
		}
	  }
  break;
case 77:
#line 807 "cs-parser.jay"
  {
		yyVal = new object[] { yyVals[-2+yyTop], yyVals[0+yyTop] };
	  }
  break;
case 78:
#line 811 "cs-parser.jay"
  {
		yyVal = new object [] { null, yyVals[0+yyTop] };
	  }
  break;
case 79:
#line 818 "cs-parser.jay"
  { yyVal = null; }
  break;
case 81:
#line 824 "cs-parser.jay"
  {
		ArrayList args = new ArrayList (4);
		args.Add (new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Expression));

		yyVal = args;
	  }
  break;
case 82:
#line 831 "cs-parser.jay"
  {
		ArrayList args = (ArrayList) yyVals[-2+yyTop];
		args.Add (new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Expression));

		yyVal = args;
	 }
  break;
case 83:
#line 841 "cs-parser.jay"
  {
		ArrayList args = new ArrayList (4);
		args.Add (yyVals[0+yyTop]);

		yyVal = args;
	  }
  break;
case 84:
#line 848 "cs-parser.jay"
  {	  
		ArrayList args = (ArrayList) yyVals[-2+yyTop];
		args.Add (yyVals[0+yyTop]);

		yyVal = args;
	  }
  break;
case 85:
#line 855 "cs-parser.jay"
  {
		Report.Error (1016, ((Expression) yyVals[0+yyTop]).Location, "Named attribute argument expected");
		yyVal = null;
	  }
  break;
case 86:
#line 863 "cs-parser.jay"
  {
		/* FIXME: keep location*/
		yyVal = new DictionaryEntry (
			((LocatedToken) yyVals[-2+yyTop]).Value, 
			new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Expression));
	  }
  break;
case 102:
#line 899 "cs-parser.jay"
  {
		Report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 103:
#line 912 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 104:
#line 916 "cs-parser.jay"
  { 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (int) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 105:
#line 922 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((ArrayList) yyVals[0+yyTop]);

		if (RootContext.Documentation != null)
			current_container.DocComment = Lexer.consume_doc_comment ();
	  }
  break;
case 106:
#line 931 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 107:
#line 937 "cs-parser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 108:
#line 940 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 109:
#line 947 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 125:
#line 989 "cs-parser.jay"
  {
		int modflags = (int) yyVals[-4+yyTop];
		foreach (VariableDeclaration constant in (ArrayList) yyVals[-1+yyTop]){
			Location l = constant.Location;
			if ((modflags & Modifiers.STATIC) != 0) {
				Report.Error (504, l, "The constant `{0}' cannot be marked static", current_container.GetSignatureForError () + '.' + (string) constant.identifier);
				continue;
			}

			Const c = new Const (
				current_class, (FullNamedExpression) yyVals[-2+yyTop], (string) constant.identifier, 
				(Expression) constant.expression_or_array_initializer, modflags, 
				(Attributes) yyVals[-5+yyTop], l);

			if (RootContext.Documentation != null) {
				c.DocComment = Lexer.consume_doc_comment ();
				Lexer.doc_state = XmlCommentState.Allowed;
			}
			current_container.AddConstant (c);
		}
	  }
  break;
case 126:
#line 1014 "cs-parser.jay"
  {
		ArrayList constants = new ArrayList (4);
		if (yyVals[0+yyTop] != null)
			constants.Add (yyVals[0+yyTop]);
		yyVal = constants;
	  }
  break;
case 127:
#line 1021 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			ArrayList constants = (ArrayList) yyVals[-2+yyTop];
			constants.Add (yyVals[0+yyTop]);
		}
	  }
  break;
case 128:
#line 1031 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 129:
#line 1035 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new VariableDeclaration ((LocatedToken) yyVals[-3+yyTop], yyVals[0+yyTop]);
	  }
  break;
case 130:
#line 1040 "cs-parser.jay"
  {
		/* A const field requires a value to be provided*/
		Report.Error (145, ((LocatedToken) yyVals[0+yyTop]).Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 133:
#line 1058 "cs-parser.jay"
  { 
		FullNamedExpression type = (FullNamedExpression) yyVals[-2+yyTop];
		if (type == TypeManager.system_void_expr)
			Report.Error (670, GetLocation (yyVals[-2+yyTop]), "Fields cannot have void type");
		
		int mod = (int) yyVals[-3+yyTop];

		current_array_type = null;

		foreach (VariableMemberDeclaration var in (ArrayList) yyVals[-1+yyTop]){
			Field field = new Field (current_class, type, mod, var.MemberName, (Attributes) yyVals[-4+yyTop]);

			field.Initializer = var.expression_or_array_initializer;

			if (RootContext.Documentation != null) {
				field.DocComment = Lexer.consume_doc_comment ();
				Lexer.doc_state = XmlCommentState.Allowed;
			}
			current_container.AddField (field);
			yyVal = field; /* FIXME: might be better if it points to the top item*/
		}
	  }
  break;
case 134:
#line 1086 "cs-parser.jay"
  { 
			FullNamedExpression type = (FullNamedExpression) yyVals[-2+yyTop];
			
			int mod = (int) yyVals[-4+yyTop];

			current_array_type = null;

			foreach (VariableDeclaration var in (ArrayList) yyVals[-1+yyTop]) {
				FixedField field = new FixedField (current_class, type, mod, var.identifier,
					(Expression)var.expression_or_array_initializer, (Attributes) yyVals[-5+yyTop], var.Location);

				if (RootContext.Documentation != null) {
					field.DocComment = Lexer.consume_doc_comment ();
					Lexer.doc_state = XmlCommentState.Allowed;
				}
				current_container.AddField (field);
				yyVal = field; /* FIXME: might be better if it points to the top item*/
			}
	  }
  break;
case 135:
#line 1110 "cs-parser.jay"
  {
		Report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 136:
#line 1117 "cs-parser.jay"
  {
		ArrayList decl = new ArrayList (2);
		decl.Add (yyVals[0+yyTop]);
		yyVal = decl;
  	  }
  break;
case 137:
#line 1123 "cs-parser.jay"
  {
		ArrayList decls = (ArrayList) yyVals[-2+yyTop];
		decls.Add (yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 138:
#line 1132 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((LocatedToken) yyVals[-3+yyTop], yyVals[-1+yyTop]);
	  }
  break;
case 139:
#line 1136 "cs-parser.jay"
  {
		Report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = new VariableDeclaration ((LocatedToken) yyVals[-2+yyTop], null);
	  }
  break;
case 140:
#line 1145 "cs-parser.jay"
  {
		ArrayList decl = new ArrayList (4);
		if (yyVals[0+yyTop] != null)
			decl.Add (yyVals[0+yyTop]);
		yyVal = decl;
	  }
  break;
case 141:
#line 1152 "cs-parser.jay"
  {
		ArrayList decls = (ArrayList) yyVals[-2+yyTop];
		decls.Add (yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 142:
#line 1161 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((LocatedToken) yyVals[-2+yyTop], yyVals[0+yyTop]);
	  }
  break;
case 143:
#line 1165 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((LocatedToken) yyVals[0+yyTop], null);
	  }
  break;
case 144:
#line 1169 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 147:
#line 1178 "cs-parser.jay"
  {
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], (Location) yyVals[-4+yyTop]);
	  }
  break;
case 148:
#line 1182 "cs-parser.jay"
  {
		yyVal = new ArglistAccess ((Location) yyVals[0+yyTop]);
	  }
  break;
case 149:
#line 1186 "cs-parser.jay"
  {
		Report.Error (1575, (Location) yyVals[-1+yyTop], "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, (Location) yyVals[-1+yyTop]);		
	  }
  break;
case 150:
#line 1194 "cs-parser.jay"
  {
		ArrayList decl = new ArrayList (4);
		if (yyVals[0+yyTop] != null)
			decl.Add (yyVals[0+yyTop]);
		yyVal = decl;
	  }
  break;
case 151:
#line 1201 "cs-parser.jay"
  {
		ArrayList decls = (ArrayList) yyVals[-2+yyTop];
		decls.Add (yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 152:
#line 1210 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  	lexer.parsing_generic_declaration = false;
	  }
  break;
case 153:
#line 1215 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new VariableMemberDeclaration ((MemberName) yyVals[-3+yyTop], yyVals[0+yyTop]);
	  }
  break;
case 154:
#line 1220 "cs-parser.jay"
  {
	  	lexer.parsing_generic_declaration = false;
		yyVal = new VariableMemberDeclaration ((MemberName) yyVals[0+yyTop], null);
	  }
  break;
case 155:
#line 1225 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = null;
	  }
  break;
case 156:
#line 1233 "cs-parser.jay"
  {
		Report.Error (650, GetLocation (yyVals[-2+yyTop]), "Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. " +
			"To declare a fixed size buffer field, use the fixed keyword before the field type");
	  }
  break;
case 159:
#line 1245 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 160:
#line 1250 "cs-parser.jay"
  {
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (method);
		
		if (current_container.Kind == Kind.Interface && method.Block != null) {
			Report.Error (531, method.Location, "`{0}': interface members cannot have a definition", method.GetSignatureForError ());
		}

		current_generic_method = null;
		current_local_parameters = null;

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 161:
#line 1272 "cs-parser.jay"
  {
		arglist_allowed = true;
	  }
  break;
case 162:
#line 1276 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 163:
#line 1280 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		arglist_allowed = false;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (Parameters) yyVals[-3+yyTop];

		if (yyVals[0+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((ArrayList) yyVals[0+yyTop]);
		}

		method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (int) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);

		current_generic_method = generic;

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 164:
#line 1315 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 165:
#line 1319 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		MemberName name = (MemberName) yyVals[-5+yyTop];
		current_local_parameters = (Parameters) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     TypeManager.system_void_expr, current_local_parameters);

			generic.SetParameterInfo ((ArrayList) yyVals[0+yyTop]);
		}

		int modifiers = (int) yyVals[-8+yyTop];


		const int invalid_partial_mod = Modifiers.Accessibility | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			Report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			Report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}

		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, TypeManager.system_void_expr,
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);

		current_generic_method = generic;

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 166:
#line 1371 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
		Report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", Modifiers.Name ((int) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, TypeManager.system_void_expr,
					    0, name, (Parameters) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (Parameters) yyVals[-1+yyTop];

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = null;
	  }
  break;
case 168:
#line 1390 "cs-parser.jay"
  { yyVal = null; }
  break;
case 169:
#line 1394 "cs-parser.jay"
  { yyVal = Parameters.EmptyReadOnlyParameters; }
  break;
case 171:
#line 1399 "cs-parser.jay"
  { yyVal = Parameters.EmptyReadOnlyParameters; }
  break;
case 172:
#line 1401 "cs-parser.jay"
  {
		parameter_modifiers_not_allowed = true;
	  }
  break;
case 173:
#line 1405 "cs-parser.jay"
  {
		parameter_modifiers_not_allowed = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 174:
#line 1413 "cs-parser.jay"
  { 
		ArrayList pars_list = (ArrayList) yyVals[0+yyTop];

		Parameter [] pars = new Parameter [pars_list.Count];
		pars_list.CopyTo (pars);

	  	yyVal = new Parameters (pars); 
	  }
  break;
case 175:
#line 1422 "cs-parser.jay"
  {
		ArrayList pars_list = (ArrayList) yyVals[-2+yyTop];
		pars_list.Add (yyVals[0+yyTop]);

		Parameter [] pars = new Parameter [pars_list.Count];
		pars_list.CopyTo (pars);

		yyVal = new Parameters (pars); 
	  }
  break;
case 176:
#line 1432 "cs-parser.jay"
  {
		ArrayList pars_list = (ArrayList) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));

		Parameter [] pars = new Parameter [pars_list.Count];
		pars_list.CopyTo (pars);

		yyVal = new Parameters (pars, true);
	  }
  break;
case 177:
#line 1442 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");
		yyVal = null;
	  }
  break;
case 178:
#line 1448 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");
		yyVal = null;
	  }
  break;
case 179:
#line 1454 "cs-parser.jay"
  {
		Report.Error (257, (Location) yyVals[-2+yyTop], "An __arglist parameter must be the last parameter in a formal parameter list");
		yyVal = null;
	  }
  break;
case 180:
#line 1459 "cs-parser.jay"
  {
		Report.Error (257, (Location) yyVals[-2+yyTop], "An __arglist parameter must be the last parameter in a formal parameter list");
		yyVal = null;
	  }
  break;
case 181:
#line 1464 "cs-parser.jay"
  {
		yyVal = new Parameters (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 182:
#line 1468 "cs-parser.jay"
  {
		yyVal = new Parameters (new Parameter [] { new ArglistParameter ((Location) yyVals[0+yyTop]) }, true);
	  }
  break;
case 183:
#line 1475 "cs-parser.jay"
  {
		ArrayList pars = new ArrayList (4);

		pars.Add (yyVals[0+yyTop]);
		yyVal = pars;
	  }
  break;
case 184:
#line 1482 "cs-parser.jay"
  {
		ArrayList pars = (ArrayList) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				Report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			pars.Add (p);
		}
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 185:
#line 1499 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 186:
#line 1507 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		Report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = null;
	  }
  break;
case 187:
#line 1515 "cs-parser.jay"
  {
		Report.Error (1001, GetLocation (yyVals[0+yyTop]), "Identifier expected");
		yyVal = new Parameter ((FullNamedExpression) yyVals[0+yyTop], "NeedSomeGeneratorHere", (Parameter.Modifier) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], lexer.Location);		
	  }
  break;
case 188:
#line 1522 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }
  break;
case 189:
#line 1532 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		Report.Error (241, lt.Location, "Default parameter specifiers are not permitted");
		 yyVal = null;
	   }
  break;
case 190:
#line 1540 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 192:
#line 1546 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 193:
#line 1550 "cs-parser.jay"
  {
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					Report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					Report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					Report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 194:
#line 1574 "cs-parser.jay"
  {
	  	if (parameter_modifiers_not_allowed)
	  		Error_ParameterModifierNotValid ("ref", (Location)yyVals[0+yyTop]);
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }
  break;
case 195:
#line 1581 "cs-parser.jay"
  {
	  	if (parameter_modifiers_not_allowed)
	  		Error_ParameterModifierNotValid ("out", (Location)yyVals[0+yyTop]);
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }
  break;
case 196:
#line 1588 "cs-parser.jay"
  {
		if (parameter_modifiers_not_allowed)
	  		Error_ParameterModifierNotValid ("this", (Location)yyVals[0+yyTop]);

	  	if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }
  break;
case 197:
#line 1601 "cs-parser.jay"
  { 
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 198:
#line 1605 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }
  break;
case 199:
#line 1613 "cs-parser.jay"
  {
		if (params_modifiers_not_allowed)
			Report.Error (1670, ((Location) yyVals[0+yyTop]), "The `params' modifier is not allowed in current context");
	  }
  break;
case 200:
#line 1618 "cs-parser.jay"
  {
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			Report.Error (1104, (Location)yyVals[-1+yyTop], "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			Report.Error (1611, (Location)yyVals[-1+yyTop], "The params parameter cannot be declared as ref or out");
		}	  
	  }
  break;
case 201:
#line 1627 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier ((Location)yyVals[-1+yyTop], Parameter.Modifier.PARAMS);
	  }
  break;
case 202:
#line 1634 "cs-parser.jay"
  {
	  	if (!arglist_allowed)
	  		Report.Error (1669, (Location) yyVals[0+yyTop], "__arglist is not valid in this context");
	  }
  break;
case 203:
#line 1645 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 204:
#line 1650 "cs-parser.jay"
  {
		implicit_value_parameter_type = (FullNamedExpression) yyVals[-3+yyTop];
		lexer.PropertyParsing = true;
	  }
  break;
case 205:
#line 1655 "cs-parser.jay"
  {
		lexer.PropertyParsing = false;
		has_get = has_set = false;
	  }
  break;
case 206:
#line 1660 "cs-parser.jay"
  { 
		Property prop;
		Accessors accessors = (Accessors) yyVals[-2+yyTop];
		Accessor get_block = accessors != null ? accessors.get_or_add : null;
		Accessor set_block = accessors != null ? accessors.set_or_remove : null;
		bool order = accessors != null ? accessors.declared_in_reverse : false;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		FullNamedExpression ptype = (FullNamedExpression) yyVals[-7+yyTop];

		prop = new Property (current_class, ptype, (int) yyVals[-8+yyTop],
				     name, (Attributes) yyVals[-9+yyTop], get_block, set_block, order, current_block);

		if (ptype == TypeManager.system_void_expr)
			Report.Error (547, name.Location, "`{0}': property or indexer cannot have void type", prop.GetSignatureForError ());
			
		if (accessors == null)
			Report.Error (548, prop.Location, "`{0}': property or indexer must have at least one accessor", prop.GetSignatureForError ());

		if (current_container.Kind == Kind.Interface) {
			if (prop.Get.Block != null)
				Report.Error (531, prop.Location, "`{0}.get': interface members cannot have a definition", prop.GetSignatureForError ());

			if (prop.Set.Block != null)
				Report.Error (531, prop.Location, "`{0}.set': interface members cannot have a definition", prop.GetSignatureForError ());
		}

		current_container.AddProperty (prop);
		implicit_value_parameter_type = null;

		if (RootContext.Documentation != null)
			prop.DocComment = ConsumeStoredComment ();

	  }
  break;
case 207:
#line 1698 "cs-parser.jay"
  {
		yyVal = new Accessors ((Accessor) yyVals[0+yyTop], null);
	 }
  break;
case 208:
#line 1702 "cs-parser.jay"
  { 
		Accessors accessors = (Accessors) yyVals[0+yyTop];
		accessors.get_or_add = (Accessor) yyVals[-1+yyTop];
		yyVal = accessors;
	 }
  break;
case 209:
#line 1708 "cs-parser.jay"
  {
		yyVal = new Accessors (null, (Accessor) yyVals[0+yyTop]);
	 }
  break;
case 210:
#line 1712 "cs-parser.jay"
  { 
		Accessors accessors = (Accessors) yyVals[0+yyTop];
		accessors.set_or_remove = (Accessor) yyVals[-1+yyTop];
		accessors.declared_in_reverse = true;
		yyVal = accessors;
	 }
  break;
case 211:
#line 1719 "cs-parser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		yyVal = null;
		} else {
			if (yyToken == Token.SEMICOLON)
				Report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				Report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");

			yyVal = new Accessors (null, null);
		}
	  }
  break;
case 212:
#line 1735 "cs-parser.jay"
  {
		/* If this is not the case, then current_local_parameters has already*/
		/* been set in indexer_declaration*/
		if (parsing_indexer == false)
			current_local_parameters = Parameters.EmptyReadOnlyParameters;
		else 
			current_local_parameters = indexer_parameters;
		lexer.PropertyParsing = false;
	  }
  break;
case 213:
#line 1745 "cs-parser.jay"
  {
		if (has_get) {
			Report.Error (1007, GetLocation (yyVals[-2+yyTop]), "Property accessor already defined");
			break;
		}
		Accessor accessor = new Accessor ((ToplevelBlock) yyVals[0+yyTop], (int) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], current_local_parameters, (Location) yyVals[-2+yyTop]);
		has_get = true;
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;

		yyVal = accessor;
	  }
  break;
case 214:
#line 1765 "cs-parser.jay"
  {
		Parameter implicit_value_parameter = new Parameter (
			implicit_value_parameter_type, "value", 
			Parameter.Modifier.NONE, null, (Location) yyVals[0+yyTop]);

		if (!parsing_indexer) {
			current_local_parameters = new Parameters (new Parameter [] { implicit_value_parameter });
		} else {
			current_local_parameters = Parameters.MergeGenerated (
				indexer_parameters, true, implicit_value_parameter, null);
		}
		
		lexer.PropertyParsing = false;
	  }
  break;
case 215:
#line 1780 "cs-parser.jay"
  {
		if (has_set) {
			Report.Error (1007, GetLocation (yyVals[-2+yyTop]), "Property accessor already defined");
			break;
		}
		Accessor accessor = new Accessor ((ToplevelBlock) yyVals[0+yyTop], (int) yyVals[-3+yyTop], (Attributes) yyVals[-4+yyTop], current_local_parameters, (Location) yyVals[-2+yyTop]);
		has_set = true;
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		yyVal = accessor;
	  }
  break;
case 217:
#line 1801 "cs-parser.jay"
  {
	  	yyVal = null;
	  }
  break;
case 218:
#line 1805 "cs-parser.jay"
  {
	  	Error_SyntaxError (1043, yyToken);
	  	yyVal = null;
	  }
  break;
case 219:
#line 1816 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 220:
#line 1820 "cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (int) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 221:
#line 1826 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((ArrayList) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }
  break;
case 222:
#line 1837 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 223:
#line 1843 "cs-parser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 224:
#line 1846 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 230:
#line 1869 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 231:
#line 1873 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 236:
#line 1881 "cs-parser.jay"
  {
	  	Report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 237:
#line 1885 "cs-parser.jay"
  {
	  	Report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 238:
#line 1889 "cs-parser.jay"
  {
	  	Report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 239:
#line 1896 "cs-parser.jay"
  {
	  }
  break;
case 240:
#line 1899 "cs-parser.jay"
  {
		if (yyVals[-2+yyTop] == null)
			break;

		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		Operator op = new Operator (
			current_class, decl.optype, decl.ret_type, (int) yyVals[-3+yyTop], 
			current_local_parameters,
			(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);

		if (RootContext.Documentation != null) {
			op.DocComment = tmpComment;
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		/* Note again, checking is done in semantic analysis*/
		current_container.AddOperator (op);

		current_local_parameters = null;
	  }
  break;
case 242:
#line 1923 "cs-parser.jay"
  { yyVal = null; }
  break;
case 244:
#line 1929 "cs-parser.jay"
  {
		Report.Error (590, lexer.Location, "User-defined operators cannot return void");
		yyVal = TypeManager.system_void_expr;		
	  }
  break;
case 245:
#line 1937 "cs-parser.jay"
  {
		params_modifiers_not_allowed = true;
	  }
  break;
case 246:
#line 1941 "cs-parser.jay"
  {
		params_modifiers_not_allowed = false;

		Location loc = (Location) yyVals[-5+yyTop];
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (Parameters)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				Report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				Report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				Report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				Report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
	  }
  break;
case 248:
#line 1984 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 249:
#line 1985 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 250:
#line 1986 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 251:
#line 1987 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 252:
#line 1988 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 253:
#line 1989 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 254:
#line 1991 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 255:
#line 1992 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 256:
#line 1994 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 257:
#line 1995 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 258:
#line 1996 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 259:
#line 1997 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 260:
#line 1998 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 261:
#line 1999 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 262:
#line 2000 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 263:
#line 2001 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 264:
#line 2002 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 265:
#line 2003 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 266:
#line 2004 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 267:
#line 2005 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 268:
#line 2006 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 269:
#line 2007 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 270:
#line 2012 "cs-parser.jay"
  {
		params_modifiers_not_allowed = true;
	  }
  break;
case 271:
#line 2016 "cs-parser.jay"
  {
		params_modifiers_not_allowed = false;

		Location loc = (Location) yyVals[-5+yyTop];
		current_local_parameters = (Parameters)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 272:
#line 2030 "cs-parser.jay"
  {
		params_modifiers_not_allowed = true;
	  }
  break;
case 273:
#line 2034 "cs-parser.jay"
  {
		params_modifiers_not_allowed = false;
		
		Location loc = (Location) yyVals[-5+yyTop];
		current_local_parameters = (Parameters)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
	  }
  break;
case 274:
#line 2048 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 275:
#line 2053 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 276:
#line 2062 "cs-parser.jay"
  { 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (RootContext.Documentation != null)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 277:
#line 2081 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }
  break;
case 278:
#line 2088 "cs-parser.jay"
  {
		current_local_parameters = (Parameters) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 279:
#line 2098 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-6+yyTop];
		int mods = (int) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			Report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.Accessibility) != 0){
				Report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				Report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		yyVal = c;
	  }
  break;
case 281:
#line 2128 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 284:
#line 2138 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 285:
#line 2142 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((ArrayList) yyVals[-1+yyTop], (Location) yyVals[-4+yyTop]);
	  }
  break;
case 286:
#line 2147 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 287:
#line 2151 "cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((ArrayList) yyVals[-1+yyTop], (Location) yyVals[-4+yyTop]);
	  }
  break;
case 288:
#line 2155 "cs-parser.jay"
  {
		Report.Error (1018, (Location) yyVals[-1+yyTop], "Keyword this or base expected");
		yyVal = null;
	  }
  break;
case 289:
#line 2163 "cs-parser.jay"
  {
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = Parameters.EmptyReadOnlyParameters;
	  }
  break;
case 290:
#line 2172 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			Report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != Kind.Class){
			Report.Error (575, lt.Location, "Only class types can contain destructor");
		} else {
			Destructor d = new Destructor (current_class, (int) yyVals[-6+yyTop],
				Parameters.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
			if (RootContext.Documentation != null)
				d.DocComment = ConsumeStoredComment ();
		  
			d.Block = (ToplevelBlock) yyVals[0+yyTop];
			current_container.AddMethod (d);
		}

		current_local_parameters = null;
	  }
  break;
case 291:
#line 2196 "cs-parser.jay"
  {
		current_array_type = null;
		foreach (VariableMemberDeclaration var in (ArrayList) yyVals[-1+yyTop]) {

			EventField e = new EventField (
				current_class, (FullNamedExpression) yyVals[-2+yyTop], (int) yyVals[-4+yyTop], var.MemberName, (Attributes) yyVals[-5+yyTop]);
				
			if (var.expression_or_array_initializer != null) {
				if (current_container.Kind == Kind.Interface) {
					Report.Error (68, e.Location, "`{0}': event in interface cannot have initializer", e.GetSignatureForError ());
				}

				e.Initializer = var.expression_or_array_initializer;
			}
			
			if (var.MemberName.Left != null) {
				Report.Error (71, e.Location,
					"`{0}': An explicit interface implementation of an event must use property syntax",
					e.GetSignatureForError ());
			}

			current_container.AddEvent (e);

			if (RootContext.Documentation != null) {
				e.DocComment = Lexer.consume_doc_comment ();
				Lexer.doc_state = XmlCommentState.Allowed;
			}
		}
	  }
  break;
case 292:
#line 2229 "cs-parser.jay"
  {
		implicit_value_parameter_type = (FullNamedExpression) yyVals[-2+yyTop];  
		current_local_parameters = new Parameters (
			new Parameter (implicit_value_parameter_type, "value", 
			Parameter.Modifier.NONE, null, GetLocation (yyVals[-3+yyTop])));

		lexer.EventParsing = true;
	  }
  break;
case 293:
#line 2238 "cs-parser.jay"
  {
		lexer.EventParsing = false;  
	  }
  break;
case 294:
#line 2242 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-5+yyTop];
		
		if (current_container.Kind == Kind.Interface) {
			Report.Error (69, (Location) yyVals[-7+yyTop], "Event in interface cannot have add or remove accessors");
		}

		if (yyVals[-2+yyTop] == null){
			Report.Error (65, (Location) yyVals[-7+yyTop], "`{0}.{1}': event property must have both add and remove accessors",
				current_container.Name, name.GetSignatureForError ());
			yyVal = null;
		} else {
			Accessors accessors = (Accessors) yyVals[-2+yyTop];
			
			if (accessors.get_or_add == null || accessors.set_or_remove == null)
				/* CS0073 is already reported, so no CS0065 here.*/
				yyVal = null;
			else {
				Event e = new EventProperty (
					current_class, (FullNamedExpression) yyVals[-6+yyTop], (int) yyVals[-8+yyTop], name,
					(Attributes) yyVals[-9+yyTop], accessors.get_or_add, accessors.set_or_remove);
				if (RootContext.Documentation != null) {
					e.DocComment = Lexer.consume_doc_comment ();
					Lexer.doc_state = XmlCommentState.Allowed;
				}

				current_container.AddEvent (e);
				implicit_value_parameter_type = null;
			}
		}
		current_local_parameters = null;
	  }
  break;
case 295:
#line 2275 "cs-parser.jay"
  {
		MemberName mn = (MemberName) yyVals[-1+yyTop];
		if (mn.Left != null)
			Report.Error (71, mn.Location, "An explicit interface implementation of an event must use property syntax");

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;

		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 296:
#line 2290 "cs-parser.jay"
  {
		yyVal = new Accessors ((Accessor) yyVals[-1+yyTop], (Accessor) yyVals[0+yyTop]);
	  }
  break;
case 297:
#line 2294 "cs-parser.jay"
  {
		Accessors accessors = new Accessors ((Accessor) yyVals[0+yyTop], (Accessor) yyVals[-1+yyTop]);
		accessors.declared_in_reverse = true;
		yyVal = accessors;
	  }
  break;
case 298:
#line 2299 "cs-parser.jay"
  { yyVal = null; }
  break;
case 299:
#line 2300 "cs-parser.jay"
  { yyVal = null; }
  break;
case 300:
#line 2302 "cs-parser.jay"
  { 
		Report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }
  break;
case 301:
#line 2306 "cs-parser.jay"
  { yyVal = null; }
  break;
case 302:
#line 2311 "cs-parser.jay"
  {
		lexer.EventParsing = false;
	  }
  break;
case 303:
#line 2315 "cs-parser.jay"
  {
		Accessor accessor = new Accessor ((ToplevelBlock) yyVals[0+yyTop], 0, (Attributes) yyVals[-3+yyTop], null, (Location) yyVals[-2+yyTop]);
		lexer.EventParsing = true;
		yyVal = accessor;
	  }
  break;
case 304:
#line 2320 "cs-parser.jay"
  {
		Report.Error (73, (Location) yyVals[-1+yyTop], "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 305:
#line 2324 "cs-parser.jay"
  {
		Report.Error (1609, (Location) yyVals[0+yyTop], "Modifiers cannot be placed on event accessor declarations");
		yyVal = null;
	  }
  break;
case 306:
#line 2332 "cs-parser.jay"
  {
		lexer.EventParsing = false;
	  }
  break;
case 307:
#line 2336 "cs-parser.jay"
  {
		yyVal = new Accessor ((ToplevelBlock) yyVals[0+yyTop], 0, (Attributes) yyVals[-3+yyTop], null, (Location) yyVals[-2+yyTop]);
		lexer.EventParsing = true;
	  }
  break;
case 308:
#line 2340 "cs-parser.jay"
  {
		Report.Error (73, (Location) yyVals[-1+yyTop], "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 309:
#line 2344 "cs-parser.jay"
  {
		Report.Error (1609, (Location) yyVals[0+yyTop], "Modifiers cannot be placed on event accessor declarations");
		yyVal = null;
	  }
  break;
case 310:
#line 2354 "cs-parser.jay"
  {
		implicit_value_parameter_type = (FullNamedExpression) yyVals[-5+yyTop];
		indexer_parameters = (Parameters) yyVals[-2+yyTop];
		
		if (indexer_parameters.IsEmpty)
			Report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");

		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
		parsing_indexer  = true;
		
	  }
  break;
case 311:
#line 2371 "cs-parser.jay"
  {
		  lexer.PropertyParsing = false;
		  has_get = has_set = false;
		  parsing_indexer  = false;
	  }
  break;
case 312:
#line 2377 "cs-parser.jay"
  { 
		Accessors accessors = (Accessors) yyVals[-2+yyTop];
		Accessor get_block = accessors != null ? accessors.get_or_add : null;
		Accessor set_block = accessors != null ? accessors.set_or_remove : null;
		bool order = accessors != null ? accessors.declared_in_reverse : false;

		Indexer indexer = new Indexer (current_class, (FullNamedExpression) yyVals[-9+yyTop],
			(MemberName)yyVals[-8+yyTop], (int) yyVals[-10+yyTop], (Parameters) yyVals[-6+yyTop], (Attributes) yyVals[-11+yyTop],
			get_block, set_block, order);
				       
		if (yyVals[-9+yyTop] == TypeManager.system_void_expr)
			Report.Error (620, GetLocation (yyVals[-9+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());
			
		if (accessors == null)
			Report.Error (548, indexer.Location, "`{0}': property or indexer must have at least one accessor", indexer.GetSignatureForError ());

		if (current_container.Kind == Kind.Interface) {
			if (indexer.Get.Block != null)
				Report.Error (531, indexer.Location, "`{0}.get': interface members cannot have a definition", indexer.GetSignatureForError ());

			if (indexer.Set.Block != null)
				Report.Error (531, indexer.Location, "`{0}.set': interface members cannot have a definition", indexer.GetSignatureForError ());
		}

		if (RootContext.Documentation != null)
			indexer.DocComment = ConsumeStoredComment ();

		current_container.AddIndexer (indexer);
		
		current_local_parameters = null;
		implicit_value_parameter_type = null;
		indexer_parameters = null;
	  }
  break;
case 313:
#line 2416 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 314:
#line 2422 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-4+yyTop];
		if (name.IsGeneric) {
			Report.Error (1675, name.Location, "Enums cannot have type parameters");
		}

		name = MakeName (name);
		Enum e = new Enum (current_namespace, current_class, (TypeExpr) yyVals[-3+yyTop], (int) yyVals[-6+yyTop],
				   name, (Attributes) yyVals[-7+yyTop]);
		
		if (RootContext.Documentation != null)
			e.DocComment = enumTypeComment;


		EnumMember em = null;
		foreach (VariableDeclaration ev in (ArrayList) yyVals[-1+yyTop]) {
			em = new EnumMember (
				e, em, ev.identifier, (Expression) ev.expression_or_array_initializer,
				ev.OptAttributes, ev.Location);

/*			if (RootContext.Documentation != null)*/
				em.DocComment = ev.DocComment;

			e.AddEnumMember (em);
		}
		if (RootContext.EvalMode)
			undo.AddTypeContainer (current_container, e);

		current_container.AddTypeContainer (e);

		yyVal = e;

	  }
  break;
case 315:
#line 2458 "cs-parser.jay"
  { yyVal = TypeManager.system_int32_expr; }
  break;
case 316:
#line 2460 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != TypeManager.system_int32_expr && yyVals[0+yyTop] != TypeManager.system_uint32_expr &&
			yyVals[0+yyTop] != TypeManager.system_int64_expr && yyVals[0+yyTop] != TypeManager.system_uint64_expr &&
			yyVals[0+yyTop] != TypeManager.system_int16_expr && yyVals[0+yyTop] != TypeManager.system_uint16_expr &&
			yyVals[0+yyTop] != TypeManager.system_byte_expr && yyVals[0+yyTop] != TypeManager.system_sbyte_expr)
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]));
	 
		yyVal = yyVals[0+yyTop];
	 }
  break;
case 317:
#line 2470 "cs-parser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 }
  break;
case 318:
#line 2477 "cs-parser.jay"
  {
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 319:
#line 2482 "cs-parser.jay"
  {
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 320:
#line 2488 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 321:
#line 2494 "cs-parser.jay"
  { yyVal = new ArrayList (4); }
  break;
case 322:
#line 2495 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 323:
#line 2500 "cs-parser.jay"
  {
		ArrayList l = new ArrayList (4);

		l.Add (yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 324:
#line 2507 "cs-parser.jay"
  {
		ArrayList l = (ArrayList) yyVals[-2+yyTop];

		l.Add (yyVals[0+yyTop]);

		yyVal = l;
	  }
  break;
case 325:
#line 2518 "cs-parser.jay"
  {
		VariableDeclaration vd = new VariableDeclaration (
			(LocatedToken) yyVals[0+yyTop], null, (Attributes) yyVals[-1+yyTop]);

		if (RootContext.Documentation != null) {
			vd.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = vd;
	  }
  break;
case 326:
#line 2530 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 327:
#line 2538 "cs-parser.jay"
  { 
		--lexer.parsing_block;	  
		VariableDeclaration vd = new VariableDeclaration (
			(LocatedToken) yyVals[-3+yyTop], yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);

		if (RootContext.Documentation != null)
			vd.DocComment = ConsumeStoredComment ();

		yyVal = vd;
	  }
  break;
case 328:
#line 2556 "cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[-3+yyTop]);
		Parameters p = (Parameters) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-4+yyTop],
					     (int) yyVals[-6+yyTop], name, p, (Attributes) yyVals[-7+yyTop]);

		if (RootContext.Documentation != null) {
			del.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 329:
#line 2573 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 330:
#line 2577 "cs-parser.jay"
  {
		current_delegate.SetParameterInfo ((ArrayList) yyVals[-2+yyTop]);
		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 331:
#line 2587 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 332:
#line 2591 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (lexer.Location, "nullable types");
	  
	  	yyVal = this;
	  }
  break;
case 334:
#line 2602 "cs-parser.jay"
  {
		LocatedToken lt1 = (LocatedToken) yyVals[-2+yyTop];
		LocatedToken lt2 = (LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 336:
#line 2613 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 337:
#line 2621 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 338:
#line 2631 "cs-parser.jay"
  { yyVal = null; }
  break;
case 339:
#line 2633 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 340:
#line 2640 "cs-parser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 341:
#line 2648 "cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 342:
#line 2654 "cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 343:
#line 2666 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 344:
#line 2670 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 345:
#line 2679 "cs-parser.jay"
  {
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }
  break;
case 347:
#line 2690 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 348:
#line 2699 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 349:
#line 2704 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 350:
#line 2712 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 351:
#line 2717 "cs-parser.jay"
  {
		LocatedToken lt1 = (LocatedToken) yyVals[-3+yyTop];
		LocatedToken lt2 = (LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
	  }
  break;
case 352:
#line 2724 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
	  }
  break;
case 353:
#line 2731 "cs-parser.jay"
  { yyVal = null; }
  break;
case 354:
#line 2733 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 355:
#line 2743 "cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 356:
#line 2749 "cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 357:
#line 2758 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-1+yyTop], lt.Location);
  	  }
  break;
case 358:
#line 2763 "cs-parser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			Report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }
  break;
case 360:
#line 2779 "cs-parser.jay"
  {
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 361:
#line 2786 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 363:
#line 2797 "cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (lexer.Location);
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 365:
#line 2806 "cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (lexer.Location);
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 367:
#line 2815 "cs-parser.jay"
  {
		string rank_specifiers = (string) yyVals[0+yyTop];
		yyVal = current_array_type = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], rank_specifiers);
	  }
  break;
case 368:
#line 2823 "cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), "?", lexer.Location);
		} else {
			if (name.Left == null && name.Name == "var" &&
			    (RootContext.Version > LanguageVersion.ISO_2 || RootContext.Version == LanguageVersion.Default_MCS))
				yyVal = current_array_type = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }
  break;
case 369:
#line 2837 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "?", lexer.Location);
	  }
  break;
case 370:
#line 2842 "cs-parser.jay"
  {
		/**/
		/* Note that here only unmanaged types are allowed but we*/
		/* can't perform checks during this phase - we do it during*/
		/* semantic analysis.*/
		/**/
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "*", Lexer.Location);
	  }
  break;
case 371:
#line 2851 "cs-parser.jay"
  {
		yyVal = new ComposedCast (TypeManager.system_void_expr, "*", (Location) yyVals[-1+yyTop]);
	  }
  break;
case 372:
#line 2858 "cs-parser.jay"
  {
		ArrayList types = new ArrayList (2);
		types.Add (yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 373:
#line 2864 "cs-parser.jay"
  {
		ArrayList types = (ArrayList) yyVals[-2+yyTop];
		types.Add (yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 374:
#line 2873 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast)
			Report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 375:
#line 2879 "cs-parser.jay"
  {
	  	Error_TypeExpected (lexer.Location);
	  }
  break;
case 376:
#line 2889 "cs-parser.jay"
  { yyVal = TypeManager.system_object_expr; }
  break;
case 377:
#line 2890 "cs-parser.jay"
  { yyVal = TypeManager.system_string_expr; }
  break;
case 378:
#line 2891 "cs-parser.jay"
  { yyVal = TypeManager.system_boolean_expr; }
  break;
case 379:
#line 2892 "cs-parser.jay"
  { yyVal = TypeManager.system_decimal_expr; }
  break;
case 380:
#line 2893 "cs-parser.jay"
  { yyVal = TypeManager.system_single_expr; }
  break;
case 381:
#line 2894 "cs-parser.jay"
  { yyVal = TypeManager.system_double_expr; }
  break;
case 383:
#line 2899 "cs-parser.jay"
  { yyVal = TypeManager.system_sbyte_expr; }
  break;
case 384:
#line 2900 "cs-parser.jay"
  { yyVal = TypeManager.system_byte_expr; }
  break;
case 385:
#line 2901 "cs-parser.jay"
  { yyVal = TypeManager.system_int16_expr; }
  break;
case 386:
#line 2902 "cs-parser.jay"
  { yyVal = TypeManager.system_uint16_expr; }
  break;
case 387:
#line 2903 "cs-parser.jay"
  { yyVal = TypeManager.system_int32_expr; }
  break;
case 388:
#line 2904 "cs-parser.jay"
  { yyVal = TypeManager.system_uint32_expr; }
  break;
case 389:
#line 2905 "cs-parser.jay"
  { yyVal = TypeManager.system_int64_expr; }
  break;
case 390:
#line 2906 "cs-parser.jay"
  { yyVal = TypeManager.system_uint64_expr; }
  break;
case 391:
#line 2907 "cs-parser.jay"
  { yyVal = TypeManager.system_char_expr; }
  break;
case 393:
#line 2913 "cs-parser.jay"
  {
		yyVal = TypeManager.system_void_expr;	
	  }
  break;
case 397:
#line 2931 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (MemberName.MakeName (lt.Value, (TypeArguments)yyVals[0+yyTop]), (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 418:
#line 2958 "cs-parser.jay"
  { yyVal = new CharLiteral ((char) lexer.Value, lexer.Location); }
  break;
case 419:
#line 2959 "cs-parser.jay"
  { yyVal = new StringLiteral ((string) lexer.Value, lexer.Location); }
  break;
case 420:
#line 2960 "cs-parser.jay"
  { yyVal = new NullLiteral (lexer.Location); }
  break;
case 421:
#line 2964 "cs-parser.jay"
  { yyVal = new FloatLiteral ((float) lexer.Value, lexer.Location); }
  break;
case 422:
#line 2965 "cs-parser.jay"
  { yyVal = new DoubleLiteral ((double) lexer.Value, lexer.Location); }
  break;
case 423:
#line 2966 "cs-parser.jay"
  { yyVal = new DecimalLiteral ((decimal) lexer.Value, lexer.Location); }
  break;
case 424:
#line 2970 "cs-parser.jay"
  { 
		object v = lexer.Value;

		if (v is int){
			yyVal = new IntLiteral ((int) v, lexer.Location);
		} else if (v is uint)
			yyVal = new UIntLiteral ((UInt32) v, lexer.Location);
		else if (v is long)
			yyVal = new LongLiteral ((Int64) v, lexer.Location);
		else if (v is ulong)
			yyVal = new ULongLiteral ((UInt64) v, lexer.Location);
		else
			Console.WriteLine ("OOPS.  Unexpected result from scanner");
	  }
  break;
case 425:
#line 2987 "cs-parser.jay"
  { yyVal = new BoolLiteral (true, lexer.Location); }
  break;
case 426:
#line 2988 "cs-parser.jay"
  { yyVal = new BoolLiteral (false, lexer.Location); }
  break;
case 430:
#line 3005 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 431:
#line 3012 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 432:
#line 3017 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		/* TODO: Location is wrong as some predefined types doesn't hold a location*/
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 433:
#line 3023 "cs-parser.jay"
  {
		LocatedToken lt1 = (LocatedToken) yyVals[-2+yyTop];
		LocatedToken lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 434:
#line 3033 "cs-parser.jay"
  {
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (ArrayList) yyVals[-1+yyTop]);
	  }
  break;
case 435:
#line 3039 "cs-parser.jay"
  { yyVal = null; }
  break;
case 437:
#line 3045 "cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] == null)
	  	  yyVal = CollectionOrObjectInitializers.Empty;
	  	else
	  	  yyVal = new CollectionOrObjectInitializers ((ArrayList) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 438:
#line 3052 "cs-parser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((ArrayList) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 439:
#line 3058 "cs-parser.jay"
  { yyVal = null; }
  break;
case 440:
#line 3060 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 441:
#line 3067 "cs-parser.jay"
  {
	  	ArrayList a = new ArrayList ();
	  	a.Add (yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 442:
#line 3073 "cs-parser.jay"
  {
	  	ArrayList a = (ArrayList)yyVals[-2+yyTop];
	  	a.Add (yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 443:
#line 3082 "cs-parser.jay"
  {
	  	LocatedToken lt = yyVals[-2+yyTop] as LocatedToken;
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 444:
#line 3087 "cs-parser.jay"
  {
		yyVal = new CollectionElementInitializer ((Expression)yyVals[0+yyTop]);
	  }
  break;
case 445:
#line 3091 "cs-parser.jay"
  {
	  	yyVal = new CollectionElementInitializer ((ArrayList)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 446:
#line 3095 "cs-parser.jay"
  {
	  	Report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
	  }
  break;
case 449:
#line 3106 "cs-parser.jay"
  { yyVal = null; }
  break;
case 451:
#line 3112 "cs-parser.jay"
  { 
		ArrayList list = new ArrayList (4);
		list.Add (yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 452:
#line 3118 "cs-parser.jay"
  {
		ArrayList list = (ArrayList) yyVals[-2+yyTop];
		list.Add (yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 453:
#line 3124 "cs-parser.jay"
  {
	  	Report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 454:
#line 3129 "cs-parser.jay"
  {
	  	Report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 455:
#line 3137 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Expression);
	  }
  break;
case 456:
#line 3141 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 457:
#line 3148 "cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
	  }
  break;
case 458:
#line 3152 "cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
	  }
  break;
case 459:
#line 3156 "cs-parser.jay"
  {
		ArrayList list = (ArrayList) yyVals[-1+yyTop];
		Argument[] args = new Argument [list.Count];
		list.CopyTo (args, 0);

		Expression expr = new Arglist (args, (Location) yyVals[-3+yyTop]);
		yyVal = new Argument (expr, Argument.AType.Expression);
	  }
  break;
case 460:
#line 3165 "cs-parser.jay"
  {
		yyVal = new Argument (new Arglist ((Location) yyVals[-2+yyTop]), Argument.AType.Expression);
	  }
  break;
case 461:
#line 3169 "cs-parser.jay"
  {
		yyVal = new Argument (new ArglistAccess ((Location) yyVals[0+yyTop]), Argument.AType.ArgList);
	  }
  break;
case 462:
#line 3175 "cs-parser.jay"
  { note ("section 5.4"); yyVal = yyVals[0+yyTop]; }
  break;
case 463:
#line 3180 "cs-parser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (ArrayList) yyVals[-1+yyTop]);
	  }
  break;
case 464:
#line 3184 "cs-parser.jay"
  {
	  	/* LAMESPEC: Not allowed according to specification*/
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (ArrayList) yyVals[-1+yyTop]);
	  }
  break;
case 465:
#line 3189 "cs-parser.jay"
  {
		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		  
		Expression expr = (Expression) yyVals[-1+yyTop];  
		if (expr is ComposedCast){
			yyVal = new ComposedCast ((ComposedCast)expr, (string) yyVals[0+yyTop]);
		} else if (expr is ATypeNameExpression){
			/**/
			/* So we extract the string corresponding to the SimpleName*/
			/* or MemberAccess*/
			/* */
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (string) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = TypeManager.system_object_expr;
		}
		
		current_array_type = (FullNamedExpression)yyVal;
	  }
  break;
case 466:
#line 3217 "cs-parser.jay"
  {
		ArrayList list = new ArrayList (4);
		list.Add (yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 467:
#line 3223 "cs-parser.jay"
  {
		ArrayList list = (ArrayList) yyVals[-2+yyTop];
		list.Add (yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 468:
#line 3232 "cs-parser.jay"
  {
		yyVal = new This (current_block, (Location) yyVals[0+yyTop]);
	  }
  break;
case 469:
#line 3239 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new BaseAccess (lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 470:
#line 3244 "cs-parser.jay"
  {
		yyVal = new BaseIndexerAccess ((ArrayList) yyVals[-1+yyTop], (Location) yyVals[-3+yyTop]);
	  }
  break;
case 471:
#line 3247 "cs-parser.jay"
  {
		Report.Error (175, (Location) yyVals[-1+yyTop], "Use of keyword `base' is not valid in this context");
		yyVal = null;
	  }
  break;
case 472:
#line 3255 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop]);
	  }
  break;
case 473:
#line 3262 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop]);
	  }
  break;
case 474:
#line 3269 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			if (RootContext.Version <= LanguageVersion.ISO_2)
				Report.FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((Expression) yyVals[-4+yyTop], (ArrayList) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], (Location) yyVals[-5+yyTop]);
		}
		else
			yyVal = new New ((Expression) yyVals[-4+yyTop], (ArrayList) yyVals[-2+yyTop], (Location) yyVals[-5+yyTop]);
	  }
  break;
case 475:
#line 3280 "cs-parser.jay"
  {
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((Expression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], (Location) yyVals[-2+yyTop]);
	  }
  break;
case 476:
#line 3293 "cs-parser.jay"
  {
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (ArrayList) yyVals[-3+yyTop], (string) yyVals[-1+yyTop], (ArrayList) yyVals[0+yyTop], (Location) yyVals[-6+yyTop]);
	  }
  break;
case 477:
#line 3297 "cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] == null)
	  		Report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (string) yyVals[-1+yyTop], (ArrayList) yyVals[0+yyTop], (Location) yyVals[-3+yyTop]);
	  }
  break;
case 478:
#line 3304 "cs-parser.jay"
  {
		yyVal = new ImplicitlyTypedArrayCreation ((string) yyVals[-1+yyTop], (ArrayList) yyVals[0+yyTop], (Location) yyVals[-2+yyTop]);
	  }
  break;
case 479:
#line 3308 "cs-parser.jay"
  {
		Report.Error (1526, (Location) yyVals[-2+yyTop], "A new expression requires () or [] after type");
		yyVal = null;
	  }
  break;
case 480:
#line 3316 "cs-parser.jay"
  {
	  	if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new AnonymousTypeDeclaration ((ArrayList) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 483:
#line 3330 "cs-parser.jay"
  { yyVal = null; }
  break;
case 485:
#line 3336 "cs-parser.jay"
  {
	  	ArrayList a = new ArrayList (4);
	  	a.Add (yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 486:
#line 3342 "cs-parser.jay"
  {
	  	ArrayList a = (ArrayList) yyVals[-2+yyTop];
	  	a.Add (yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 487:
#line 3351 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  }
  break;
case 488:
#line 3356 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 489:
#line 3362 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		BaseAccess ba = new BaseAccess (lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  	yyVal = new AnonymousTypeParameter (ba, lt.Value, lt.Location);		
	  }
  break;
case 490:
#line 3368 "cs-parser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 491:
#line 3373 "cs-parser.jay"
  {
		Report.Error (746, lexer.Location, "Invalid anonymous type member declarator. " +
		"Anonymous type members must be a member assignment, simple name or member access expression");
	  }
  break;
case 492:
#line 3381 "cs-parser.jay"
  {
		yyVal = "";
	  }
  break;
case 493:
#line 3385 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 494:
#line 3392 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = "?";
		else
			yyVal = string.Empty;
	  }
  break;
case 495:
#line 3399 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null)
			yyVal = "?" + (string) yyVals[0+yyTop];
		else
			yyVal = yyVals[0+yyTop];
	  }
  break;
case 497:
#line 3410 "cs-parser.jay"
  {
		yyVal = (string) yyVals[0+yyTop] + (string) yyVals[-1+yyTop];
	  }
  break;
case 498:
#line 3417 "cs-parser.jay"
  {
		yyVal = "[]";
	  }
  break;
case 499:
#line 3421 "cs-parser.jay"
  {
		yyVal = "[" + (string) yyVals[-1+yyTop] + "]";
	  }
  break;
case 500:
#line 3425 "cs-parser.jay"
  {
		ArrayCreation.Error_IncorrectArrayInitializer (GetLocation (yyVals[-2+yyTop]));
		yyVal = "[]";
	  }
  break;
case 501:
#line 3433 "cs-parser.jay"
  {
		yyVal = ",";
	  }
  break;
case 502:
#line 3437 "cs-parser.jay"
  {
		yyVal = (string) yyVals[-1+yyTop] + ",";
	  }
  break;
case 503:
#line 3444 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 504:
#line 3448 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 505:
#line 3455 "cs-parser.jay"
  {
		ArrayList list = new ArrayList (4);
		yyVal = list;
	  }
  break;
case 506:
#line 3460 "cs-parser.jay"
  {
		yyVal = (ArrayList) yyVals[-2+yyTop];
	  }
  break;
case 507:
#line 3467 "cs-parser.jay"
  {
		ArrayList list = new ArrayList (4);
		list.Add (yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 508:
#line 3473 "cs-parser.jay"
  {
		ArrayList list = (ArrayList) yyVals[-2+yyTop];
		list.Add (yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 509:
#line 3479 "cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
	  	yyVal = new ArrayList ();
	  }
  break;
case 510:
#line 3487 "cs-parser.jay"
  {
	  	pushed_current_array_type = current_array_type;
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 511:
#line 3492 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = false;
		Expression type = (Expression)yyVals[-1+yyTop];
		if (type == TypeManager.system_void_expr)
			yyVal = new TypeOfVoid ((Location) yyVals[-4+yyTop]);
		else
			yyVal = new TypeOf (type, (Location) yyVals[-4+yyTop]);
		current_array_type = pushed_current_array_type;
	  }
  break;
case 514:
#line 3507 "cs-parser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 515:
#line 3515 "cs-parser.jay"
  {  
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (MemberName.MakeName (lt.Value, (int)yyVals[0+yyTop]), lt.Location);
	  }
  break;
case 516:
#line 3521 "cs-parser.jay"
  {
		LocatedToken lt1 = (LocatedToken) yyVals[-2+yyTop];
		LocatedToken lt2 = (LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, MemberName.MakeName (lt2.Value, (int) yyVals[0+yyTop]), lt1.Location);
	  }
  break;
case 517:
#line 3528 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 518:
#line 3534 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], MemberName.MakeName (lt.Value, (int) yyVals[0+yyTop]), lt.Location);		
	  }
  break;
case 519:
#line 3540 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		MemberName name = (MemberName) yyVals[-3+yyTop];

		yyVal = new MemberAccess (name.GetTypeExpression (), MemberName.MakeName (lt.Value, (int) yyVals[0+yyTop]), lt.Location);		
	  }
  break;
case 520:
#line 3550 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (lexer.Location, "generics");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 521:
#line 3560 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		if (RootContext.Version == LanguageVersion.ISO_1)
			Report.FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }
  break;
case 522:
#line 3570 "cs-parser.jay"
  { 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], (Location) yyVals[-3+yyTop]);
	  }
  break;
case 523:
#line 3577 "cs-parser.jay"
  {
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], (Location) yyVals[-3+yyTop]);
	  }
  break;
case 524:
#line 3584 "cs-parser.jay"
  {
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], (Location) yyVals[-3+yyTop]);
	  }
  break;
case 525:
#line 3591 "cs-parser.jay"
  {
		Expression deref;
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];

		deref = new Indirection ((Expression) yyVals[-2+yyTop], lt.Location);
		yyVal = new MemberAccess (deref, lt.Value);
	  }
  break;
case 526:
#line 3602 "cs-parser.jay"
  {
		start_anonymous (false, (Parameters) yyVals[0+yyTop], (Location) yyVals[-1+yyTop]);
	  }
  break;
case 527:
#line 3606 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	}
  break;
case 528:
#line 3613 "cs-parser.jay"
  {
		yyVal = Parameters.Undefined;
	  }
  break;
case 530:
#line 3621 "cs-parser.jay"
  {
	  	params_modifiers_not_allowed = true; 
	  }
  break;
case 531:
#line 3625 "cs-parser.jay"
  {
	  	params_modifiers_not_allowed = false;
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 532:
#line 3633 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (lexer.Location, "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 534:
#line 3644 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 535:
#line 3648 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 537:
#line 3656 "cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 538:
#line 3660 "cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 540:
#line 3672 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 541:
#line 3676 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 542:
#line 3680 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 543:
#line 3684 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 544:
#line 3688 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 545:
#line 3692 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop]);
	  }
  break;
case 547:
#line 3700 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 548:
#line 3705 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 549:
#line 3710 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 551:
#line 3719 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 552:
#line 3724 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 553:
#line 3728 "cs-parser.jay"
  {
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
  	  }
  break;
case 554:
#line 3733 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], (Location) yyVals[-1+yyTop]);
	  }
  break;
case 555:
#line 3737 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], (Location) yyVals[-1+yyTop]);
	  }
  break;
case 557:
#line 3745 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 558:
#line 3750 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 560:
#line 3759 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 561:
#line 3764 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 562:
#line 3769 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 563:
#line 3774 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 565:
#line 3783 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 566:
#line 3788 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 568:
#line 3797 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 570:
#line 3806 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 572:
#line 3815 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 574:
#line 3824 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 576:
#line 3833 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 578:
#line 3842 "cs-parser.jay"
  {
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], lexer.Location);
	  }
  break;
case 580:
#line 3853 "cs-parser.jay"
  {
		yyVal = new Conditional ((Expression) yyVals[-4+yyTop], (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 581:
#line 3860 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 582:
#line 3864 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 583:
#line 3869 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 584:
#line 3874 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 585:
#line 3879 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 586:
#line 3884 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 587:
#line 3889 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 588:
#line 3894 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 589:
#line 3899 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 590:
#line 3904 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 591:
#line 3909 "cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 592:
#line 3917 "cs-parser.jay"
  {
		ArrayList pars = new ArrayList (4);
		pars.Add (yyVals[0+yyTop]);

		yyVal = pars;
	  }
  break;
case 593:
#line 3924 "cs-parser.jay"
  {
		ArrayList pars = (ArrayList) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			Report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }
  break;
case 594:
#line 3938 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }
  break;
case 595:
#line 3944 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }
  break;
case 596:
#line 3950 "cs-parser.jay"
  {
	  	LocatedToken lt = (LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }
  break;
case 597:
#line 3957 "cs-parser.jay"
  { yyVal = Parameters.EmptyReadOnlyParameters; }
  break;
case 598:
#line 3958 "cs-parser.jay"
  { 
		ArrayList pars_list = (ArrayList) yyVals[0+yyTop];
		yyVal = new Parameters ((Parameter[])pars_list.ToArray (typeof (Parameter)));
	  }
  break;
case 599:
#line 3965 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 600:
#line 3969 "cs-parser.jay"
  {
		Block b = end_block (lexer.Location);
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }
  break;
case 601:
#line 3974 "cs-parser.jay"
  { 
	  	yyVal = yyVals[0+yyTop]; 
	  }
  break;
case 602:
#line 3981 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new Parameters (p), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 603:
#line 3987 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	  }
  break;
case 604:
#line 3991 "cs-parser.jay"
  {
		start_anonymous (true, (Parameters) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 605:
#line 3995 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	  }
  break;
case 613:
#line 4027 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 614:
#line 4031 "cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Class (current_namespace, current_class, name, (int) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 615:
#line 4037 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((ArrayList) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }
  break;
case 616:
#line 4048 "cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 617:
#line 4054 "cs-parser.jay"
  {
		yyVal = pop_current_class ();
	  }
  break;
case 618:
#line 4061 "cs-parser.jay"
  { yyVal = null; }
  break;
case 619:
#line 4063 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 620:
#line 4067 "cs-parser.jay"
  { yyVal = (int) 0; }
  break;
case 623:
#line 4074 "cs-parser.jay"
  { 
		int m1 = (int) yyVals[-1+yyTop];
		int m2 = (int) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			Location l = lexer.Location;
			Report.Error (1004, l, "Duplicate `{0}' modifier", Modifiers.Name (m2));
		}
		yyVal = (int) (m1 | m2);
	  }
  break;
case 624:
#line 4088 "cs-parser.jay"
  {
		yyVal = Modifiers.NEW;
		if (current_container == RootContext.ToplevelTypes)
			Report.Error (1530, lexer.Location, "Keyword `new' is not allowed on namespace elements");
	  }
  break;
case 625:
#line 4093 "cs-parser.jay"
  { yyVal = Modifiers.PUBLIC; }
  break;
case 626:
#line 4094 "cs-parser.jay"
  { yyVal = Modifiers.PROTECTED; }
  break;
case 627:
#line 4095 "cs-parser.jay"
  { yyVal = Modifiers.INTERNAL; }
  break;
case 628:
#line 4096 "cs-parser.jay"
  { yyVal = Modifiers.PRIVATE; }
  break;
case 629:
#line 4097 "cs-parser.jay"
  { yyVal = Modifiers.ABSTRACT; }
  break;
case 630:
#line 4098 "cs-parser.jay"
  { yyVal = Modifiers.SEALED; }
  break;
case 631:
#line 4099 "cs-parser.jay"
  { yyVal = Modifiers.STATIC; }
  break;
case 632:
#line 4100 "cs-parser.jay"
  { yyVal = Modifiers.READONLY; }
  break;
case 633:
#line 4101 "cs-parser.jay"
  { yyVal = Modifiers.VIRTUAL; }
  break;
case 634:
#line 4102 "cs-parser.jay"
  { yyVal = Modifiers.OVERRIDE; }
  break;
case 635:
#line 4103 "cs-parser.jay"
  { yyVal = Modifiers.EXTERN; }
  break;
case 636:
#line 4104 "cs-parser.jay"
  { yyVal = Modifiers.VOLATILE; }
  break;
case 637:
#line 4105 "cs-parser.jay"
  { yyVal = Modifiers.UNSAFE; }
  break;
case 640:
#line 4114 "cs-parser.jay"
  { current_container.AddBasesForPart (current_class, (ArrayList) yyVals[0+yyTop]); }
  break;
case 641:
#line 4118 "cs-parser.jay"
  { yyVal = null; }
  break;
case 642:
#line 4120 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 643:
#line 4124 "cs-parser.jay"
  {
		ArrayList constraints = new ArrayList (1);
		constraints.Add (yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 644:
#line 4129 "cs-parser.jay"
  {
		ArrayList constraints = (ArrayList) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter == c.TypeParameter) {
				Report.Error (409, new_constraint.Location, "A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 645:
#line 4146 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (lt.Value, (ArrayList) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 646:
#line 4153 "cs-parser.jay"
  {
		ArrayList constraints = new ArrayList (1);
		constraints.Add (yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 647:
#line 4158 "cs-parser.jay"
  {
		ArrayList constraints = (ArrayList) yyVals[-2+yyTop];

		constraints.Add (yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 649:
#line 4168 "cs-parser.jay"
  {
		yyVal = SpecialConstraint.Constructor;
	  }
  break;
case 650:
#line 4171 "cs-parser.jay"
  {
		yyVal = SpecialConstraint.ReferenceType;
	  }
  break;
case 651:
#line 4174 "cs-parser.jay"
  {
		yyVal = SpecialConstraint.ValueType;
	  }
  break;
case 652:
#line 4194 "cs-parser.jay"
  {
		++lexer.parsing_block;
		start_block ((Location) yyVals[0+yyTop]);
	  }
  break;
case 653:
#line 4199 "cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block ((Location) yyVals[0+yyTop]);
	  }
  break;
case 654:
#line 4207 "cs-parser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 655:
#line 4212 "cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = end_block ((Location) yyVals[0+yyTop]);
	  }
  break;
case 660:
#line 4230 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }
  break;
case 661:
#line 4237 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 665:
#line 4256 "cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }
  break;
case 666:
#line 4263 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 695:
#line 4304 "cs-parser.jay"
  {
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 696:
#line 4309 "cs-parser.jay"
  {
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 697:
#line 4317 "cs-parser.jay"
  {
		  yyVal = EmptyStatement.Value;
	  }
  break;
case 698:
#line 4324 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, lt.Location);

		if (current_block.AddLabel (labeled))
			current_block.AddStatement (labeled);
	  }
  break;
case 700:
#line 4336 "cs-parser.jay"
  {
		current_array_type = null;
		if (yyVals[-1+yyTop] != null){
			DictionaryEntry de = (DictionaryEntry) yyVals[-1+yyTop];
			Expression e = (Expression) de.Key;

			yyVal = declare_local_variables (e, (ArrayList) de.Value, e.Location);
		}
	  }
  break;
case 701:
#line 4347 "cs-parser.jay"
  {
		current_array_type = null;
		if (yyVals[-1+yyTop] != null){
			DictionaryEntry de = (DictionaryEntry) yyVals[-1+yyTop];

			yyVal = declare_local_constants ((Expression) de.Key, (ArrayList) de.Value);
		}
	  }
  break;
case 702:
#line 4365 "cs-parser.jay"
  { 
		/* FIXME: Do something smart here regarding the composition of the type.*/

		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		string rank_or_nullable = (string) yyVals[0+yyTop];
		
		if (expr is ComposedCast){
			yyVal = new ComposedCast ((ComposedCast)expr, rank_or_nullable);
		} else if (expr is ATypeNameExpression){
			/**/
			/* So we extract the string corresponding to the SimpleName*/
			/* or MemberAccess*/
			/**/
			if (rank_or_nullable.Length == 0) {
				SimpleName sn = expr as SimpleName;
				if (sn != null && sn.Name == "var" &&
				    (RootContext.Version > LanguageVersion.ISO_2 || RootContext.Version == LanguageVersion.Default_MCS))
					yyVal = current_array_type = new VarExpr (sn.Location);
				else
					yyVal = yyVals[-1+yyTop];
			} else {
				yyVal = new ComposedCast ((ATypeNameExpression)expr, rank_or_nullable);
			}
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = TypeManager.system_object_expr;
		}
	  }
  break;
case 703:
#line 4408 "cs-parser.jay"
  {
		if ((string) yyVals[0+yyTop] == "")
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = current_array_type = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (string) yyVals[0+yyTop], lexer.Location);
	  }
  break;
case 704:
#line 4415 "cs-parser.jay"
  {
		Expression.Error_VoidInvalidInTheContext (lexer.Location);
		yyVal = TypeManager.system_void_expr;
	  }
  break;
case 705:
#line 4423 "cs-parser.jay"
  {
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, "*");
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }
  break;
case 706:
#line 4434 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "*", GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 707:
#line 4438 "cs-parser.jay"
  {
		yyVal = new ComposedCast (TypeManager.system_void_expr, "*", (Location) yyVals[-1+yyTop]);
	  }
  break;
case 708:
#line 4442 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], "*");
	  }
  break;
case 710:
#line 4450 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null){
			string rank = (string)yyVals[0+yyTop];

			if (rank == "")
				yyVal = yyVals[-1+yyTop];
			else
				yyVal = current_array_type = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], rank);
		} else {
			yyVal = null;
		}
	  }
  break;
case 711:
#line 4466 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null) {
			VarExpr ve = yyVals[-1+yyTop] as VarExpr;
			if (ve != null)
				ve.VariableInitializer = (ArrayList)yyVals[0+yyTop];
				
			yyVal = new DictionaryEntry (yyVals[-1+yyTop], yyVals[0+yyTop]);
		} else
			yyVal = null;
	  }
  break;
case 712:
#line 4480 "cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null)
			yyVal = new DictionaryEntry (yyVals[-1+yyTop], yyVals[0+yyTop]);
		else
			yyVal = null;
	  }
  break;
case 713:
#line 4489 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 714:
#line 4493 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 715:
#line 4502 "cs-parser.jay"
  {
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			((Expression) yyVals[0+yyTop]).Error_InvalidExpressionStatement ();
			s = EmptyExpressionStatement.Instance;
		}

		yyVal = new StatementExpression (s);
	  }
  break;
case 716:
#line 4512 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 717:
#line 4520 "cs-parser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }
  break;
case 718:
#line 4528 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 721:
#line 4542 "cs-parser.jay"
  { 
		Location l = (Location) yyVals[-4+yyTop];

		yyVal = new If ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], l);

		/* FIXME: location for warning should be loc property of $5.*/
		if (yyVals[0+yyTop] == EmptyStatement.Value)
			Report.Warning (642, 3, l, "Possible mistaken empty statement");

	  }
  break;
case 722:
#line 4554 "cs-parser.jay"
  {
		Location l = (Location) yyVals[-6+yyTop];

		yyVal = new If ((Expression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], l);

		/* FIXME: location for warning should be loc property of $5 and $7.*/
		if (yyVals[-2+yyTop] == EmptyStatement.Value)
			Report.Warning (642, 3, l, "Possible mistaken empty statement");
		if (yyVals[0+yyTop] == EmptyStatement.Value)
			Report.Warning (642, 3, l, "Possible mistaken empty statement");
	  }
  break;
case 723:
#line 4569 "cs-parser.jay"
  { 
		if (switch_stack == null)
			switch_stack = new Stack (2);
		switch_stack.Push (current_block);
	  }
  break;
case 724:
#line 4576 "cs-parser.jay"
  {
		yyVal = new Switch ((Expression) yyVals[-2+yyTop], (ArrayList) yyVals[0+yyTop], (Location) yyVals[-5+yyTop]);
		current_block = (Block) switch_stack.Pop ();
	  }
  break;
case 725:
#line 4586 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 726:
#line 4593 "cs-parser.jay"
  {
	  	Report.Warning (1522, 1, lexer.Location, "Empty switch block"); 
		yyVal = new ArrayList ();
	  }
  break;
case 728:
#line 4602 "cs-parser.jay"
  {
		ArrayList sections = new ArrayList (4);

		sections.Add (yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 729:
#line 4609 "cs-parser.jay"
  {
		ArrayList sections = (ArrayList) yyVals[-1+yyTop];

		sections.Add (yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 730:
#line 4619 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 731:
#line 4623 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((ArrayList) yyVals[-2+yyTop], current_block.Explicit);
	  }
  break;
case 732:
#line 4630 "cs-parser.jay"
  {
		ArrayList labels = new ArrayList (4);

		labels.Add (yyVals[0+yyTop]);
		yyVal = labels;
	  }
  break;
case 733:
#line 4637 "cs-parser.jay"
  {
		ArrayList labels = (ArrayList) (yyVals[-1+yyTop]);
		labels.Add (yyVals[0+yyTop]);

		yyVal = labels;
	  }
  break;
case 734:
#line 4647 "cs-parser.jay"
  {
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], (Location) yyVals[-2+yyTop]);
	 }
  break;
case 735:
#line 4651 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, (Location) yyVals[0+yyTop]);
	  }
  break;
case 740:
#line 4665 "cs-parser.jay"
  {
		Location l = (Location) yyVals[-4+yyTop];
		yyVal = new While ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], l);
	  }
  break;
case 741:
#line 4674 "cs-parser.jay"
  {
		Location l = (Location) yyVals[-6+yyTop];

		yyVal = new Do ((Statement) yyVals[-5+yyTop], (Expression) yyVals[-2+yyTop], l);
	  }
  break;
case 742:
#line 4683 "cs-parser.jay"
  {
		Location l = lexer.Location;
		start_block (l);  
		Block assign_block = current_block;

		if (yyVals[-1+yyTop] is DictionaryEntry){
			DictionaryEntry de = (DictionaryEntry) yyVals[-1+yyTop];
			
			Expression type = (Expression) de.Key;
			ArrayList var_declarators = (ArrayList) de.Value;

			foreach (VariableDeclaration decl in var_declarators){

				LocalInfo vi;

				vi = current_block.AddVariable (type, decl.identifier, decl.Location);
				if (vi == null)
					continue;

				Expression expr = decl.expression_or_array_initializer;
					
				LocalVariableReference var;
				var = new LocalVariableReference (assign_block, decl.identifier, l);

				if (expr != null) {
					Assign a = new SimpleAssign (var, expr, decl.Location);
					
					assign_block.AddStatement (new StatementExpression (a));
				}
			}
			
			/* Note: the $$ below refers to the value of this code block, not of the LHS non-terminal.*/
			/* This can be referred to as $5 below.*/
			yyVal = null;
		} else {
			yyVal = yyVals[-1+yyTop];
		}
	  }
  break;
case 743:
#line 4724 "cs-parser.jay"
  {
		Location l = (Location) yyVals[-9+yyTop];

		For f = new For ((Statement) yyVals[-5+yyTop], (Expression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], l);

		current_block.AddStatement (f);

		yyVal = end_block (lexer.Location);
	  }
  break;
case 744:
#line 4736 "cs-parser.jay"
  { yyVal = EmptyStatement.Value; }
  break;
case 748:
#line 4746 "cs-parser.jay"
  { yyVal = null; }
  break;
case 750:
#line 4751 "cs-parser.jay"
  { yyVal = EmptyStatement.Value; }
  break;
case 753:
#line 4761 "cs-parser.jay"
  {
		/* CHANGE: was `null'*/
		Statement s = (Statement) yyVals[0+yyTop];
		Block b = new Block (current_block, s.loc, lexer.Location);   

		b.AddStatement (s);
		yyVal = b;
	  }
  break;
case 754:
#line 4770 "cs-parser.jay"
  {
		Block b = (Block) yyVals[-2+yyTop];

		b.AddStatement ((Statement) yyVals[0+yyTop]);
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 755:
#line 4780 "cs-parser.jay"
  {
		Report.Error (230, (Location) yyVals[-5+yyTop], "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }
  break;
case 756:
#line 4786 "cs-parser.jay"
  {
		start_block (lexer.Location);
		Block foreach_block = current_block;

		LocatedToken lt = (LocatedToken) yyVals[-3+yyTop];
		Location l = lt.Location;
		LocalInfo vi = foreach_block.AddVariable ((Expression) yyVals[-4+yyTop], lt.Value, l);
		if (vi != null) {
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Foreach);

			/* Get a writable reference to this read-only variable.*/
			/**/
			/* Note that the $$ here refers to the value of _this_ code block,*/
			/* not the value of the LHS non-terminal.  This can be referred to as $8 below.*/
			yyVal = new LocalVariableReference (foreach_block, lt.Value, l, vi, false);
		} else {
			yyVal = null;
		}
	  }
  break;
case 757:
#line 4806 "cs-parser.jay"
  {
		LocalVariableReference v = (LocalVariableReference) yyVals[-1+yyTop];
		Location l = (Location) yyVals[-8+yyTop];

		if (v != null) {
			Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], v, (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], l);
			current_block.AddStatement (f);
		}

		yyVal = end_block (lexer.Location);
	  }
  break;
case 764:
#line 4830 "cs-parser.jay"
  {
		yyVal = new Break ((Location) yyVals[-1+yyTop]);
	  }
  break;
case 765:
#line 4837 "cs-parser.jay"
  {
		yyVal = new Continue ((Location) yyVals[-1+yyTop]);
	  }
  break;
case 766:
#line 4844 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, lt.Location);
	  }
  break;
case 767:
#line 4849 "cs-parser.jay"
  {
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], (Location) yyVals[-3+yyTop]);
	  }
  break;
case 768:
#line 4853 "cs-parser.jay"
  {
		yyVal = new GotoDefault ((Location) yyVals[-2+yyTop]);
	  }
  break;
case 769:
#line 4860 "cs-parser.jay"
  {
		yyVal = new Return ((Expression) yyVals[-1+yyTop], (Location) yyVals[-2+yyTop]);
	  }
  break;
case 770:
#line 4867 "cs-parser.jay"
  {
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], (Location) yyVals[-2+yyTop]);
	  }
  break;
case 771:
#line 4874 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
			yyVal = null;
		}
		if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "yield statement");
			yyVal = null;
		}
		current_block.Toplevel.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location); 
	  }
  break;
case 772:
#line 4889 "cs-parser.jay"
  {
		Report.Error (1627, (Location) yyVals[-1+yyTop], "Expression expected after yield return");
		yyVal = null;
	  }
  break;
case 773:
#line 4894 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
			yyVal = null;
		}
		if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "yield statement");
			yyVal = null;
		}
		
		current_block.Toplevel.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
	  }
  break;
case 776:
#line 4918 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (ArrayList) yyVals[0+yyTop], (Location) yyVals[-2+yyTop], false);
	  }
  break;
case 777:
#line 4922 "cs-parser.jay"
  {
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], (Location) yyVals[-3+yyTop]);
	  }
  break;
case 778:
#line 4926 "cs-parser.jay"
  {
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (ArrayList) yyVals[-2+yyTop], (Location) yyVals[-4+yyTop], true), (Block) yyVals[0+yyTop], (Location) yyVals[-4+yyTop]);
	  }
  break;
case 779:
#line 4930 "cs-parser.jay"
  {
		Report.Error (1524, (Location) yyVals[-2+yyTop], "Expected catch or finally");
		yyVal = null;
	  }
  break;
case 780:
#line 4938 "cs-parser.jay"
  {
		ArrayList l = new ArrayList (4);

		l.Add (yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 781:
#line 4945 "cs-parser.jay"
  {
		ArrayList l = (ArrayList) yyVals[-1+yyTop];

		l.Add (yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 782:
#line 4954 "cs-parser.jay"
  { yyVal = null; }
  break;
case 784:
#line 4960 "cs-parser.jay"
  {
		Expression type = null;
		
		if (yyVals[0+yyTop] != null) {
			DictionaryEntry cc = (DictionaryEntry) yyVals[0+yyTop];
			type = (Expression) cc.Key;
			LocatedToken lt = (LocatedToken) cc.Value;

			if (lt != null){
				ArrayList one = new ArrayList (4);

				one.Add (new VariableDeclaration (lt, null));

				start_block (lexer.Location);
				current_block = declare_local_variables (type, one, lt.Location);
			}
		}
	  }
  break;
case 785:
#line 4977 "cs-parser.jay"
  {
		Expression type = null;
		string id = null;
		Block var_block = null;

		if (yyVals[-2+yyTop] != null){
			DictionaryEntry cc = (DictionaryEntry) yyVals[-2+yyTop];
			type = (Expression) cc.Key;
			LocatedToken lt = (LocatedToken) cc.Value;

			if (lt != null){
				id = lt.Value;
				var_block = end_block (lexer.Location);
			}
		}

		yyVal = new Catch (type, id, (Block) yyVals[0+yyTop], var_block, ((Block) yyVals[0+yyTop]).loc);
	  }
  break;
case 786:
#line 4998 "cs-parser.jay"
  { yyVal = null; }
  break;
case 788:
#line 5004 "cs-parser.jay"
  {
		yyVal = new DictionaryEntry (yyVals[-2+yyTop], yyVals[-1+yyTop]);
	  }
  break;
case 789:
#line 5008 "cs-parser.jay"
  {
		Report.Error (1015, GetLocation (yyVals[-1+yyTop]), "A type that derives from `System.Exception', `object', or `string' expected");
	  }
  break;
case 790:
#line 5015 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop]);
	  }
  break;
case 791:
#line 5022 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop]);
	  }
  break;
case 792:
#line 5029 "cs-parser.jay"
  {
		RootContext.CheckUnsafeOption ((Location) yyVals[0+yyTop]);
	  }
  break;
case 793:
#line 5031 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop]);
	  }
  break;
case 794:
#line 5040 "cs-parser.jay"
  {
		ArrayList list = (ArrayList) yyVals[-1+yyTop];
		Expression type = (Expression) yyVals[-2+yyTop];
		Location l = (Location) yyVals[-4+yyTop];
		int top = list.Count;

		start_block (lexer.Location);

		for (int i = 0; i < top; i++){
			Pair p = (Pair) list [i];
			LocalInfo v;

			v = current_block.AddVariable (type, (string) p.First, l);
			if (v == null)
				continue;

			v.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Fixed);
			v.Pinned = true;
			p.First = v;
			list [i] = p;
		}
	  }
  break;
case 795:
#line 5063 "cs-parser.jay"
  {
		Location l = (Location) yyVals[-6+yyTop];

		Fixed f = new Fixed ((Expression) yyVals[-4+yyTop], (ArrayList) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], l);

		current_block.AddStatement (f);

		yyVal = end_block (lexer.Location);
	  }
  break;
case 796:
#line 5075 "cs-parser.jay"
  { 
	   	ArrayList declarators = new ArrayList (4);
	   	if (yyVals[0+yyTop] != null)
			declarators.Add (yyVals[0+yyTop]);
		yyVal = declarators;
	  }
  break;
case 797:
#line 5082 "cs-parser.jay"
  {
		ArrayList declarators = (ArrayList) yyVals[-2+yyTop];
		if (yyVals[0+yyTop] != null)
			declarators.Add (yyVals[0+yyTop]);
		yyVal = declarators;
	  }
  break;
case 798:
#line 5092 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-2+yyTop];
		/* FIXME: keep location*/
		yyVal = new Pair (lt.Value, yyVals[0+yyTop]);
	  }
  break;
case 799:
#line 5098 "cs-parser.jay"
  {
		Report.Error (210, ((LocatedToken) yyVals[0+yyTop]).Location, "You must provide an initializer in a fixed or using statement declaration");
		yyVal = null;
	  }
  break;
case 800:
#line 5106 "cs-parser.jay"
  {
		/**/
 	  }
  break;
case 801:
#line 5110 "cs-parser.jay"
  {
		yyVal = new Lock ((Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], (Location) yyVals[-5+yyTop]);
	  }
  break;
case 802:
#line 5117 "cs-parser.jay"
  {
		start_block (lexer.Location);
		Block assign_block = current_block;

		DictionaryEntry de = (DictionaryEntry) yyVals[-1+yyTop];
		Location l = (Location) yyVals[-3+yyTop];

		Expression type = (Expression) de.Key;
		ArrayList var_declarators = (ArrayList) de.Value;

		Stack vars = new Stack ();

		foreach (VariableDeclaration decl in var_declarators) {
			LocalInfo vi = current_block.AddVariable (type, decl.identifier, decl.Location);
			if (vi == null)
				continue;
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Using);

			Expression expr = decl.expression_or_array_initializer;
			if (expr == null) {
				Report.Error (210, l, "You must provide an initializer in a fixed or using statement declaration");
				continue;
			}
			LocalVariableReference var;

			/* Get a writable reference to this read-only variable.*/
			var = new LocalVariableReference (assign_block, decl.identifier, l, vi, false);

			/* This is so that it is not a warning on using variables*/
			vi.Used = true;

			vars.Push (new DictionaryEntry (var, expr));

			/* Assign a = new SimpleAssign (var, expr, decl.Location);*/
			/* assign_block.AddStatement (new StatementExpression (a));*/
		}

		/* Note: the $$ here refers to the value of this code block and not of the LHS non-terminal.*/
		/* It can be referred to as $5 below.*/
		yyVal = vars;
	  }
  break;
case 803:
#line 5159 "cs-parser.jay"
  {
		Statement stmt = (Statement) yyVals[0+yyTop];
		Stack vars = (Stack) yyVals[-1+yyTop];
		Location l = (Location) yyVals[-5+yyTop];

		while (vars.Count > 0) {
			  DictionaryEntry de = (DictionaryEntry) vars.Pop ();
			  stmt = new Using ((Expression) de.Key, (Expression) de.Value, stmt, l);
		}
		current_block.AddStatement (stmt);
		yyVal = end_block (lexer.Location);
	  }
  break;
case 804:
#line 5172 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 805:
#line 5176 "cs-parser.jay"
  {
		current_block.AddStatement (new UsingTemporary ((Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], (Location) yyVals[-5+yyTop]));
		yyVal = end_block (lexer.Location);
	  }
  break;
case 806:
#line 5187 "cs-parser.jay"
  {
		++lexer.query_parsing;
	  }
  break;
case 807:
#line 5191 "cs-parser.jay"
  {
		if (--lexer.query_parsing == 1)
			lexer.query_parsing = 0;
			
		Linq.AQueryClause from = yyVals[-2+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 808:
#line 5207 "cs-parser.jay"
  {
		yyVal = new Linq.QueryExpression (current_block, new Linq.QueryStartClause ((Expression)yyVals[0+yyTop]));
		current_block = new Linq.QueryBlock (current_block, (LocatedToken) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 809:
#line 5212 "cs-parser.jay"
  {
		yyVal = new Linq.QueryExpression (current_block, new Linq.Cast ((FullNamedExpression)yyVals[-3+yyTop], (Expression)yyVals[0+yyTop]));
		current_block = new Linq.QueryBlock (current_block, (LocatedToken) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 810:
#line 5220 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 811:
#line 5224 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-3+yyTop];
		yyVal = new Linq.SelectMany (current_block.Toplevel, lt, (Expression)yyVals[0+yyTop]);
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddTransparentParameter (lt);
	  }
  break;
case 812:
#line 5234 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 813:
#line 5238 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-3+yyTop];
		FullNamedExpression type = (FullNamedExpression)yyVals[-4+yyTop];
		
		yyVal = new Linq.SelectMany (current_block.Toplevel, lt, new Linq.Cast (type, (FullNamedExpression)yyVals[0+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddTransparentParameter (lt);
	  }
  break;
case 814:
#line 5253 "cs-parser.jay"
  {
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 815:
#line 5271 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 816:
#line 5275 "cs-parser.jay"
  {
		yyVal = new Linq.Select (current_block.Toplevel, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 817:
#line 5282 "cs-parser.jay"
  {
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push (current_block);
	  }
  break;
case 818:
#line 5290 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 819:
#line 5297 "cs-parser.jay"
  {
		yyVal = new Linq.GroupBy (current_block.Toplevel, (Expression)yyVals[-3+yyTop], (ToplevelBlock) linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 823:
#line 5313 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 829:
#line 5329 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 830:
#line 5333 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-3+yyTop];
	  	yyVal = new Linq.Let (current_block.Toplevel, current_container, lt, (Expression)yyVals[0+yyTop]);
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddTransparentParameter (lt);
	  }
  break;
case 831:
#line 5346 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 832:
#line 5350 "cs-parser.jay"
  {
		yyVal = new Linq.Where (current_block.Toplevel, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 833:
#line 5360 "cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 834:
#line 5368 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 835:
#line 5376 "cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, (LocatedToken) yyVals[-7+yyTop], lexer.Location);
	  }
  break;
case 836:
#line 5384 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-10+yyTop];
		
		ToplevelBlock outer_selector = (ToplevelBlock) linq_clause_blocks.Pop ();
		ToplevelBlock block = (ToplevelBlock) linq_clause_blocks.Pop ();

		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, lt, (Expression)yyVals[-7+yyTop], outer_selector, current_block.Toplevel, GetLocation (yyVals[-11+yyTop]));
		} else {
			yyVal = new Linq.GroupJoin (block, lt, (Expression)yyVals[-7+yyTop], outer_selector, current_block.Toplevel,
				(LocatedToken) yyVals[0+yyTop], GetLocation (yyVals[-11+yyTop]));
		}

		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		if (yyVals[0+yyTop] == null)
			((Linq.QueryBlock)current_block).AddTransparentParameter (lt);
		else
			((Linq.QueryBlock)current_block).AddTransparentParameter ((LocatedToken) yyVals[0+yyTop]);
	  }
  break;
case 837:
#line 5407 "cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 838:
#line 5415 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push (current_block);
	  }
  break;
case 839:
#line 5423 "cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, (LocatedToken) yyVals[-7+yyTop], lexer.Location);
	  }
  break;
case 840:
#line 5431 "cs-parser.jay"
  {
		LocatedToken lt = (LocatedToken) yyVals[-10+yyTop];
		ToplevelBlock outer_selector = (ToplevelBlock) linq_clause_blocks.Pop ();
		ToplevelBlock block = (ToplevelBlock) linq_clause_blocks.Pop ();
		
		Linq.Cast cast = new Linq.Cast ((FullNamedExpression)yyVals[-11+yyTop], (Expression)yyVals[-7+yyTop]);
		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, lt, cast, outer_selector, current_block.Toplevel, GetLocation (yyVals[-12+yyTop]));
		} else {
			yyVal = new Linq.GroupJoin (block, lt, cast, outer_selector, current_block.Toplevel,
				(LocatedToken) yyVals[0+yyTop], GetLocation (yyVals[-12+yyTop]));
		}
		
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		if (yyVals[0+yyTop] == null)
			((Linq.QueryBlock)current_block).AddTransparentParameter (lt);
		else
			((Linq.QueryBlock)current_block).AddTransparentParameter ((LocatedToken) yyVals[0+yyTop]);
	  }
  break;
case 842:
#line 5458 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 843:
#line 5465 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 844:
#line 5469 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 846:
#line 5480 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 847:
#line 5487 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }
  break;
case 849:
#line 5496 "cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);	 
	 }
  break;
case 850:
#line 5503 "cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[-1+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }
  break;
case 851:
#line 5511 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending (current_block.Toplevel, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 852:
#line 5515 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 853:
#line 5519 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 854:
#line 5526 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending (current_block.Toplevel, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 855:
#line 5530 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 856:
#line 5534 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending (current_block.Toplevel, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 858:
#line 5543 "cs-parser.jay"
  {
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
		
		current_block = new Linq.QueryBlock (current_block, (LocatedToken) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 859:
#line 5554 "cs-parser.jay"
  {
  		yyVal = new Linq.QueryExpression (current_block, (Linq.AQueryClause)yyVals[0+yyTop]);
	  }
  break;
case 862:
#line 5575 "cs-parser.jay"
  { 
	        Evaluator.LoadAliases (current_namespace);

		push_current_class (new Class (current_namespace, current_class, new MemberName ("Class" + class_count++),
			Modifiers.PUBLIC, null), null);

		ArrayList baseclass_list = new ArrayList ();
		baseclass_list.Add (new TypeExpression (Evaluator.InteractiveBaseClass, lexer.Location));
		current_container.AddBasesForPart (current_class, baseclass_list);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (TypeManager.system_object_expr, "$retval", Parameter.Modifier.REF, null, Location.Null);

		Parameters pars = new Parameters (mpar);
		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			TypeManager.system_void_expr,
			Modifiers.PUBLIC | Modifiers.STATIC,
			new MemberName ("Host"),
			pars,
			null /* attributes */);

		oob_stack.Push (method);
	        ++lexer.parsing_block;
		start_block (lexer.Location);
	  }
  break;
case 863:
#line 5605 "cs-parser.jay"
  {
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);
		current_container.AddMethod (method);

		--lexer.parsing_declaration;
		InteractiveResult = pop_current_class ();
		current_local_parameters = null;
	  }
  break;
case 864:
#line 5616 "cs-parser.jay"
  {
	        Evaluator.LoadAliases (current_namespace);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: continue;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: continue;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    0,    0,    0,    0,    2,    2,    1,    1,    5,
    5,    5,    9,    9,    6,    6,   10,   10,    7,    7,
   11,   11,   12,   19,   15,   17,   17,   17,   20,   20,
   21,   21,   14,   23,   18,   22,   27,   22,   22,   25,
   25,   24,   24,   26,   26,   28,   28,    8,    8,    8,
    8,   29,   29,   29,   29,   29,    3,   16,   16,   37,
   37,   38,   38,   39,   41,   41,   41,   41,   40,   40,
   45,   42,   43,   44,   44,   46,   46,   46,   47,   47,
   48,   48,   49,   49,   49,   51,   52,   53,   53,   54,
   54,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   66,   68,   71,   72,   33,   33,   74,   70,
   73,   73,   75,   75,   76,   76,   76,   76,   76,   76,
   76,   76,   76,   76,   56,   78,   78,   81,   79,   79,
   80,   80,   30,   30,   30,   86,   86,   87,   87,   88,
   88,   89,   89,   89,   90,   90,   90,   90,   90,   85,
   85,   96,   93,   93,   93,   91,   95,   95,  100,   31,
  103,  104,   98,  105,   98,   98,   99,   99,  102,  102,
  109,  110,  109,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  111,  111,  114,  114,  114,  114,  114,  115,
  115,  116,  116,  117,  117,  117,  112,  112,  118,  118,
  118,  113,  119,  121,  122,   57,  120,  120,  120,  120,
  120,  126,  123,  127,  124,  125,  125,  125,  128,  129,
  131,  132,   34,   34,  130,  133,  133,  134,  134,  135,
  135,  135,  135,  135,  135,  135,  135,  135,  138,   60,
  137,  137,  139,  139,  142,  136,  136,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  141,  144,
  143,  145,  143,  143,  143,   61,  148,  150,  146,  147,
  147,  149,  149,  154,  152,  155,  152,  152,  156,   62,
   58,  158,  159,   58,   58,  157,  157,  157,  157,  157,
  157,  162,  160,  160,  160,  163,  161,  161,  161,  165,
  166,   59,  169,   35,  167,  167,  167,  171,  172,  168,
  170,  170,  173,  173,  174,  175,  174,  176,  177,   36,
  178,  178,   13,   13,  179,  179,  182,  181,  181,  181,
  183,  183,  185,   65,   94,  101,  101,  164,  164,  186,
  186,  186,  184,  184,  187,  187,  188,  188,  189,  189,
   84,   77,   77,   92,   92,  140,  140,  190,  190,  190,
  190,  193,  193,  194,  194,  192,  192,  192,  192,  192,
  192,  192,  195,  195,  195,  195,  195,  195,  195,  195,
  195,  196,  196,  197,  197,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  200,  200,  200,  200,  200,  200,
  220,  220,  220,  219,  218,  218,  221,  221,  221,  201,
  203,  203,  203,  204,  222,  222,  223,  223,  224,  224,
  225,  225,  226,  226,  226,  226,  227,  227,  153,  153,
  230,  230,  230,  230,  231,  231,  232,  232,  232,  232,
  232,  233,  205,  205,  205,  229,  229,  206,  207,  207,
  207,  208,  209,  210,  210,  199,  199,  199,  199,  211,
  236,  236,  237,  237,  238,  238,  239,  239,  239,  239,
  239,  234,  234,  240,  240,  191,  191,  241,  241,  241,
  242,  242,  235,  235,   83,   83,  243,  243,  243,  244,
  212,  245,  245,  245,  246,  246,  246,  246,  246,  247,
  180,  213,  214,  215,  216,  249,  217,  248,  248,  251,
  250,  202,  252,  252,  252,  252,  254,  254,  253,  253,
  253,  253,  253,  253,  253,  255,  255,  255,  255,  256,
  256,  256,  256,  256,  256,  257,  257,  257,  258,  258,
  258,  258,  258,  259,  259,  259,  260,  260,  261,  261,
  262,  262,  263,  263,  264,  264,  265,  265,  266,  266,
  267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
  267,  268,  268,  269,  269,  269,  270,  270,  272,  271,
  271,  274,  273,  275,  273,   50,   50,  228,  228,  228,
   82,  277,  278,  279,  280,  281,   32,   64,   64,   63,
   63,  106,  106,  282,  282,  282,  282,  282,  282,  282,
  282,  282,  282,  282,  282,  282,  282,   67,   67,  283,
   69,   69,  284,  284,  285,  286,  286,  287,  287,  287,
  287,  289,  107,  290,  151,  288,  288,  291,  291,  292,
  292,  292,  296,  296,  297,  297,  297,  294,  294,  294,
  294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
  298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
  298,  298,  298,  312,  312,  312,  299,  313,  295,  293,
  293,  316,  316,  316,  317,  317,  317,  317,  318,  318,
  314,  315,  300,  311,  319,  319,  320,  320,  301,  301,
  321,  321,  323,  322,  324,  325,  325,  326,  326,  329,
  327,  328,  328,  330,  330,  302,  302,  302,  302,  331,
  332,  337,  333,  335,  335,  339,  339,  336,  336,  338,
  338,  341,  340,  340,  334,  342,  334,  303,  303,  303,
  303,  303,  303,  343,  344,  345,  345,  345,  346,  347,
  348,  348,  348,   97,   97,  304,  304,  304,  304,  349,
  349,  351,  351,  353,  350,  352,  352,  354,  354,  305,
  306,  355,  309,  357,  310,  356,  356,  358,  358,  359,
  307,  360,  308,  361,  308,  364,  276,  362,  362,  366,
  365,  367,  365,  363,  371,  369,  372,  373,  369,  368,
  368,  374,  374,  375,  375,  375,  375,  375,  380,  376,
  381,  377,  382,  383,  384,  378,  386,  387,  388,  378,
  385,  385,  390,  379,  389,  393,  389,  392,  395,  392,
  391,  391,  391,  394,  394,  394,  370,  396,  370,    4,
    4,  397,    4,  399,    4,  398,  398,  398,  398,
  };
   static  short [] yyLen = {           2,
    2,    3,    2,    1,    2,    0,    1,    1,    2,    1,
    1,    1,    1,    2,    4,    2,    1,    2,    1,    1,
    5,    2,    3,    0,    6,    1,    3,    1,    0,    1,
    0,    1,    1,    0,    3,    4,    0,    3,    4,    0,
    1,    0,    1,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    5,    4,    2,    1,    1,    1,    1,    1,    3,
    0,    3,    1,    0,    3,    1,    3,    1,    0,    1,
    1,    3,    1,    3,    3,    3,    3,    0,    1,    1,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    0,    0,    0,   13,    5,    0,    4,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    6,    1,    3,    0,    4,    1,
    1,    1,    5,    6,    5,    1,    3,    4,    3,    1,
    3,    3,    1,    2,    1,    1,    5,    1,    2,    1,
    3,    0,    4,    1,    2,    3,    1,    1,    0,    3,
    0,    0,   10,    0,   10,    8,    1,    1,    0,    1,
    0,    0,    2,    1,    3,    3,    3,    5,    3,    5,
    1,    1,    1,    3,    4,    6,    3,    4,    6,    0,
    1,    1,    2,    1,    1,    1,    4,    4,    1,    2,
    2,    1,    0,    0,    0,   10,    1,    2,    1,    2,
    1,    0,    5,    0,    5,    1,    1,    1,    0,    0,
    0,    0,   13,    5,    3,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    5,
    1,    1,    1,    1,    0,    7,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    7,    0,    7,    2,    2,    2,    0,    0,    9,    1,
    1,    0,    1,    0,    6,    0,    6,    2,    0,    8,
    6,    0,    0,   10,    6,    2,    2,    1,    1,    1,
    0,    0,    4,    3,    3,    0,    4,    3,    3,    0,
    0,   12,    0,    8,    0,    2,    2,    0,    0,    5,
    0,    2,    1,    3,    2,    0,    5,    0,    0,   12,
    0,    1,    1,    3,    1,    4,    2,    0,    3,    2,
    1,    3,    0,    3,    1,    1,    3,    1,    2,    3,
    4,    4,    0,    3,    1,    3,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
    2,    1,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
    4,    4,    3,    4,    0,    1,    3,    4,    0,    1,
    1,    3,    3,    1,    3,    2,    1,    1,    0,    1,
    1,    3,    2,    2,    1,    1,    2,    2,    4,    3,
    1,    1,    4,    4,    2,    1,    3,    1,    4,    4,
    2,    2,    2,    6,    3,    7,    4,    3,    3,    4,
    1,    2,    0,    1,    1,    3,    3,    1,    4,    1,
    1,    0,    1,    1,    2,    1,    2,    2,    3,    3,
    1,    2,    0,    1,    2,    4,    1,    3,    1,    0,
    5,    1,    1,    1,    2,    3,    3,    4,    4,    1,
    2,    4,    4,    4,    3,    0,    4,    0,    1,    0,
    4,    4,    1,    2,    2,    1,    4,    4,    1,    2,
    2,    2,    2,    2,    2,    1,    3,    3,    3,    1,
    3,    3,    3,    3,    3,    1,    3,    3,    1,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    5,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    2,    1,    0,    1,    0,    2,
    1,    0,    4,    0,    6,    1,    1,    1,    1,    1,
    1,    1,    0,    0,    0,    0,   13,    0,    1,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    2,
    0,    1,    1,    2,    4,    1,    3,    1,    3,    1,
    1,    0,    4,    0,    4,    0,    1,    1,    2,    1,
    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    4,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    1,    2,
    2,    3,    2,    2,    1,    1,    1,    1,    1,    1,
    5,    7,    0,    6,    3,    0,    1,    1,    2,    0,
    3,    1,    2,    3,    1,    1,    1,    1,    1,    5,
    7,    0,   10,    0,    1,    1,    1,    0,    1,    0,
    1,    1,    1,    3,    6,    0,    9,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    4,    3,    3,    3,
    4,    3,    3,    0,    1,    3,    4,    5,    3,    1,
    2,    0,    1,    0,    4,    0,    1,    4,    2,    2,
    2,    0,    3,    0,    7,    1,    3,    3,    1,    0,
    6,    0,    6,    0,    6,    0,    3,    4,    5,    0,
    5,    0,    6,    3,    0,    3,    0,    0,    6,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    0,    5,
    0,    3,    0,    0,    0,   12,    0,    0,    0,   13,
    0,    2,    0,    3,    1,    0,    4,    1,    0,    4,
    1,    2,    2,    1,    2,    2,    0,    0,    4,    2,
    2,    0,    3,    0,    3,    1,    2,    1,    0,
  };
   static  short [] yyDefRed = {            0,
    7,    0,    0,    0,    0,  864,    0,    0,    0,    4,
    0,    0,    8,   10,   11,   12,   19,   20,   49,    0,
   48,   50,   51,   52,   53,   54,   55,   56,    0,   60,
  159,   22,    0,    0,    0,  333,    0,  335,   16,    0,
   68,   66,   67,    0,    0,    0,    0,    0,   69,   71,
  860,    0,    0,   17,    0,    1,    0,    9,    3,    5,
  629,  635,  627,    0,  624,  634,  628,  626,  625,  632,
  630,  631,  637,  633,  636,    0,    0,  622,   61,    0,
    0,    0,  521,  337,    0,   23,    0,    0,    0,    0,
    0,    0,   64,    0,  718,    0,  378,    0,  384,  391,
    0,    0,    0,  379,    0,    0,    0,  381,  426,    0,
  380,    0,    0,    0,    0,  387,    0,  389,    0,  420,
  376,    0,  383,  385,    0,  377,    0,  468,    0,  425,
    0,  510,  388,  390,    0,  792,  386,    0,    0,    0,
    0,  652,    0,  697,    0,    0,    0,    0,    0,    0,
    0,    0,  424,  421,  422,  423,  418,  419,    0,    0,
    0,  717,  681,    0,    0,  382,    0,    0,    0,    0,
  396,    0,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,  607,  539,    0,  536,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  608,  606,  609,  610,
  665,  667,    0,  663,  666,  682,  684,  685,  686,  687,
  688,  689,  690,  691,  692,  693,  683,    0,    0,  709,
    0,    0,    0,  719,  720,  736,  737,  738,  739,  758,
  759,  760,  761,  762,  763,  806,    0,  868,  865,   18,
    2,   28,   26,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  359,  361,    0,    0,  623,  168,  160,  167,
  340,    0,  341,  362,    0,    0,    0,  334,   15,    0,
   70,   63,    0,   72,  471,    0,    0,  764,  427,  429,
  428,  790,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  398,    0,  765,    0,  530,  526,  529,  716,  715,
  668,  695,  694,  696,  669,  670,  671,  672,  673,  674,
  675,  676,  677,  678,  679,  680,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  393,    0,  775,    0,  392,    0,    0,
  723,    0,    0,    0,  791,    0,    0,    0,  707,  493,
  704,    0,    0,    0,    0,    0,    0,  535,  540,  541,
  534,  545,  544,  542,  543,    0,    0,  602,  698,  397,
  195,  194,  196,    0,    0,    0,    0,  592,    0,    0,
    0,  332,  706,    0,  703,    0,    0,  472,  473,    0,
    0,    0,  705,  465,  702,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  664,  700,  701,  708,  710,    0,    0,  140,  714,    0,
  867,    0,    0,    0,  343,    0,    0,  371,    0,  368,
  613,    0,    0,    0,  346,    0,  150,    0,    0,    0,
    0,    0,  370,  367,  369,  339,    0,   21,  336,   62,
    0,    0,   76,    0,    0,   81,   83,  466,    0,    0,
    0,    0,    0,  126,    0,    0,    0,    0,  713,    0,
  746,  753,    0,  745,    0,    0,  611,    0,  768,  766,
  612,    0,    0,  491,    0,    0,    0,    0,  481,    0,
  485,    0,  498,  501,    0,  479,    0,    0,    0,    0,
  475,    0,  478,  497,  769,    0,    0,  770,  779,    0,
    0,    0,  780,    0,    0,  793,    0,    0,    0,    0,
    0,    0,    0,  658,  660,  661,  662,  430,    0,  773,
  772,    0,    0,    0,  595,    0,    0,    0,    0,  433,
  495,    0,    0,  525,    0,    0,    0,    0,  455,    0,
    0,  451,  456,    0,    0,  546,    0,  581,  582,  583,
  584,  585,  586,  587,  588,  589,  591,  590,  547,  549,
  548,  554,  555,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  578,    0,
    0,    0,  144,    0,  831,    0,    0,    0,  843,  807,
  824,    0,    0,  822,  825,  826,  827,  828,   27,   34,
    0,    0,    0,    0,  313,  135,    0,    0,  136,    0,
    0,  224,    0,  108,    0,    0,    0,  133,  152,  155,
  161,    0,    0,    0,  342,    0,   75,    0,    0,  470,
    0,  469,  523,  128,    0,  532,  202,    0,    0,    0,
  170,    0,    0,    0,  183,  527,    0,    0,    0,  796,
  742,    0,    0,    0,  767,    0,  800,    0,    0,  480,
    0,  500,  499,  502,    0,    0,    0,    0,  441,  444,
    0,  504,  477,    0,  509,  505,  157,  158,  507,    0,
  522,    0,    0,  784,  787,  777,    0,  781,  514,    0,
    0,    0,  512,    0,    0,  524,  804,  802,    0,  808,
    0,  653,  659,  538,  771,  601,  603,    0,  699,  594,
  593,  604,  537,  432,  431,  462,  458,  457,    0,  454,
  434,    0,  463,  464,    0,    0,    0,  148,  145,  146,
  142,  141,    0,    0,    0,    0,    0,    0,    0,  815,
  817,    0,  823,    0,   30,   25,    0,    0,  344,  317,
  316,    0,    0,    0,  134,    0,  614,  220,  104,  350,
  151,  345,    0,    0,    0,    0,    0,  347,   86,    0,
   82,   85,   84,  467,    0,  127,    0,    0,    0,  192,
    0,  531,    0,    0,    0,    0,    0,  794,    0,    0,
  754,    0,    0,    0,    0,    0,  487,  486,  446,    0,
    0,  437,    0,    0,    0,    0,    0,    0,  789,    0,
    0,  778,  520,  515,    0,    0,  511,    0,    0,    0,
  740,  809,  600,    0,  460,    0,  452,  580,  156,    0,
  832,  810,    0,  833,    0,  829,    0,  844,    0,    0,
    0,    0,  814,   37,   13,    0,   35,    0,    0,  358,
    0,    0,  355,  318,    0,  139,    0,  137,    0,    0,
    0,    0,  153,    0,    0,  351,  352,  129,  131,  132,
  200,  201,    0,  193,    0,    0,    0,  176,  184,  177,
  179,    0,  798,    0,  797,  749,    0,  755,    0,    0,
  801,    0,  445,  447,  448,  443,  438,  442,    0,  474,
  436,  508,  506,    0,  724,  783,    0,  785,    0,  516,
    0,  805,  803,  605,  459,    0,    0,  812,    0,  837,
    0,  852,  853,  846,  816,  818,  858,    0,   14,    0,
    0,  328,  357,  354,    0,    0,  314,  138,  164,    0,
    0,  639,    0,    0,  162,  166,  188,    0,  198,  197,
    0,    0,  741,  795,    0,  756,  722,  476,    0,  735,
    0,    0,  728,    0,  732,  788,  519,  518,    0,  811,
    0,    0,    0,  830,    0,    0,    0,   38,   46,    0,
    0,    0,  356,    0,  319,    0,  323,    0,  375,  374,
    0,  372,    0,  615,    0,  643,  221,  105,    0,    0,
    0,  180,  178,    0,    0,  751,    0,    0,  725,  729,
    0,  733,  147,  813,  834,    0,    0,    0,  848,    0,
  859,   39,   36,   47,  329,    0,    0,    0,  322,  165,
    0,    0,    0,  644,    0,    0,  163,  186,  189,    0,
  757,  734,    0,    0,  838,  855,  856,  849,  819,    0,
    0,  320,  324,  373,    0,    0,  616,    0,  222,  109,
  106,  743,    0,    0,    0,  330,    0,  650,    0,  651,
  648,    0,  646,  102,    0,  101,   93,   94,    0,    0,
   90,   92,   95,   96,   97,   98,   99,  100,    0,    0,
    0,  238,  231,  232,  230,  233,  234,  235,  236,  237,
    0,    0,  228,    0,    0,    0,  835,    0,  850,  327,
    0,    0,    0,   87,   91,  654,  281,  276,  280,  617,
    0,  225,  229,  223,  123,  116,  117,  115,  118,  119,
  120,  121,  122,  124,    0,    0,  113,  107,    0,  839,
  649,  647,    0,    0,    0,    0,    0,  289,    0,    0,
  239,    0,    0,  247,    0,  110,  114,    0,    0,    0,
    0,  275,    0,  274,    0,    0,    0,  348,    0,    0,
    0,    0,    0,    0,    0,  836,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  349,  242,  241,  240,
  253,  252,  249,  254,  255,  248,  267,  266,  259,  260,
  256,  258,  257,  261,  250,  251,  262,  263,  269,  268,
  264,  265,    0,  655,  842,  840,  125,  291,  295,  292,
  272,  270,    0,    0,  204,    0,    0,  245,    0,    0,
    0,    0,  278,    0,    0,  173,    0,  300,    0,  293,
    0,    0,    0,    0,  290,    0,  211,    0,  205,    0,
    0,  310,    0,    0,    0,    0,    0,    0,  296,    0,
  297,  273,  271,    0,  279,  283,    0,    0,  208,  210,
    0,  246,  304,    0,  308,    0,  305,  309,  294,    0,
    0,  288,    0,    0,  212,  214,  206,  311,  303,  307,
  284,  286,    0,    0,    0,    0,    0,  218,  217,  216,
  213,  215,  312,    0,    0,  285,  287,
  };
  protected static  short [] yyDgoto  = {             8,
    9,   10,   11,   12,   13,   14,   15,   16,  886,   55,
   17,   18,  260,   35,   19,  678,  254,  641,  453,  786,
   92,  887,  784,  888,  971, 1020,  968, 1021,   21,   22,
   23,   24,   25,   26,   27,   28,  679,   30,   46,   47,
   48,   49,   50,  284,   94,  482,  483,  484,  485,  310,
  487, 1097, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
 1127, 1128,   76,  261,  465,  655,  981,  902, 1034, 1101,
 1076, 1146, 1175, 1145, 1176, 1177,  385,  493,  494,  908,
  815,  508,  718, 1190,  466,  648,  649,  447,  448,  771,
  660,  340,  467,  468,  719,  803,  347,   31,  269,   80,
  469,  680,  804, 1039, 1028,   77,  311,  681, 1266, 1267,
  682,  683,  684,  685,  818,  819,  386,  821, 1225, 1289,
 1274, 1308, 1290, 1291, 1341, 1333, 1334,  653,  901, 1099,
 1075, 1144, 1141, 1142, 1143, 1191, 1230, 1212, 1192,  274,
 1253, 1277, 1194, 1271, 1270, 1129, 1158, 1207, 1305, 1286,
 1159, 1306,  580, 1336, 1337, 1206, 1280, 1269, 1297, 1281,
 1282, 1314, 1316, 1210, 1311, 1335,  645,  895,  792, 1025,
  976, 1067, 1026, 1027, 1091, 1022, 1090,  394,   36,  164,
   84,   38,  275,  789,  643,  472,  892,  893,  264,  265,
  360,  348, 1031, 1032,  166,  167,  168,  349,  170,  171,
  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
  293,  940,  531,  707,  708,  709,  936,  192,  489,  581,
  582,  583,  757,  361,  713,  518,  519,  520,  521,  395,
  343,  525,  720,  354,  734,  735,  854,  307,  497,  308,
  496,  193,  194,  195,  196,  197,  198,  199,  200,  201,
  202,  203,  204,  205,  206,  207,  208,  387,  388,  389,
  747,  748,  209,  563,  864,  210,  512,  651,  900, 1073,
 1130,   78,  982, 1035, 1036, 1112, 1113,  552,  365, 1195,
  553,  554,  312,  313,  314,  213,  214,  215,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
  227,  327,  564,  228,  229,  230,  231,  232,  328,  233,
  234,  235,  537,  945, 1001, 1002, 1003, 1004, 1051, 1005,
  236,  237,  238,  239,  503,  927,  830, 1044,  504,  505,
 1046, 1047,  240,  241,  242,  243,  244,  245,  542,  543,
  947,  724,  851,  725,  357,  689,  924,  690,  835,  860,
  859,  246,  630,  450,  631,  957, 1011,  632,  782,  883,
  880,  881, 1016,  633,  634,  635,  636,  637,  638,  961,
  773,  959, 1084, 1179, 1216, 1013, 1104, 1199,  878,  779,
  879, 1058, 1015, 1059, 1105, 1017,   52,  249,   53,
  };
  protected static  short [] yySindex = {         -205,
    0, -193, -188, -194,  -11,    0, -249,    0,   56,    0,
   61,   61,    0,    0,    0,    0,    0,    0,    0, 7906,
    0,    0,    0,    0,    0,    0,    0,    0,  -24,    0,
    0,    0,   86, -241,  118,    0,  -41,    0,    0,  -31,
    0,    0,    0,   88, -241,  115,  164,  131,    0,    0,
    0, 2347,  132,    0, -249,    0,   61,    0,    0,    0,
    0,    0,    0, -183,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 9413,10166,    0,    0,  262,
  266,  115,    0,    0,  163,    0,  182,  213,   88,  164,
  115,  265,    0,  327,    0, -171,    0,  332,    0,    0,
  124, 8793,  343,    0, -276,  410, 2511,    0,    0, -276,
    0, -276, -276, -128, -276,    0, -276,    0, 9581,    0,
    0, 8013,    0,    0, -276,    0, -276,    0, 8013,    0,
  336,    0,    0,    0,  124,    0,    0, -276,  -69, -276,
 6470,    0, 8013,    0, 8637, 8637, 8637, 8637, 8637, 8637,
 8637, 8637,    0,    0,    0,    0,    0,    0,  123, 9489,
 6626,    0,    0,  364, -134,    0,  371,  675,  245,  421,
    0,  414,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  855,    0,  492,    3,  298,  346,  501,
  429,  443,  440,  453,  -99,  473,    0,    0,    0,    0,
    0,    0, 2347,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  506,  510,    0,
  -35,  448,  515,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  132,    0,    0,    0,
    0,    0,    0,  530, 6782,  488, 6782,  529,  580,  100,
   23, 3466,    0,    0,    5,  568,    0,    0,    0,    0,
    0,  529,    0,    0,  207,  296,  182,    0,    0,  561,
    0,    0, 8169,    0,    0, 8013,  519,    0,    0,    0,
    0,    0, 8013, -276, -276,  566, 8013,   88,  568,  675,
  141,    0,  536,    0, 6626,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  607,  577, 6782, 3705,
 6626, 8013,  586,  589, 8013, 8013,  529, 1040,  -75, -166,
  581,  609,  566,    0,   12,    0,  598,    0,  631, 6626,
    0,  616,  288, -276,    0, 8013,  336, 8325,    0,    0,
    0, 8013,   16,  575, 2511,  634,  398,    0,    0,    0,
    0,    0,    0,    0,    0,  627, 7077,    0,    0,    0,
    0,    0,    0,   88,  588, 6626,  638,    0,  646,  649,
  182,    0,    0,  566,    0,  611,  622,    0,    0,  624,
 6453, 3377,    0,    0,    0, 8013, 8637, 8013, 8013, 8013,
 8013, 8013, 8013, 8013, 8013, 8013, 8013, 8013, 8637, 8637,
 8637, 6626, 6626, 8637, 8637, 8637, 8637, 8637, 8637, 8637,
 8637, 8637, 8637, 8637, 8637, 8637, 8637, 8637, 8637, 8013,
    0,    0,    0,    0,    0,   31,  653,    0,    0,  369,
    0,  636,  692,  488,    0,  686, -182,    0,  643,    0,
    0,  806,  807,   88,    0,  179,    0,   37,  700, 3466,
  655,  658,    0,    0,    0,    0, 6626,    0,    0,    0,
   14,  708,    0,  707,  710,    0,    0,    0,  271,  182,
  714,  709,  715,    0,  716, -220,  336, -276,    0,  672,
    0,    0,  718,    0,  721, -238,    0,  723,    0,    0,
    0,  729,  732,    0,  -63,  235,    0,  739,    0,  735,
    0,  744,    0,    0,  384,    0, 7233, 3377,  609, 6453,
    0, 3541,    0,    0,    0,  743, 8013,    0,    0, -276,
  336, -141,    0, 1057,  747,    0,  748,  749,  751, 8013,
  819,  757, 2511,    0,    0,    0,    0,    0, 8637,    0,
    0,  752,  336, 2511,    0,  711, 9489,  781, 8637,    0,
    0,  182,  182,    0, 8013, 8013, -276, 6609,    0,  758,
  755,    0,    0,  428,  438,    0,  492,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  492,  492,    3,    3,  298,  298,  298,
  298,  346,  346,  501,  429,  443,  440,  453,    0,  768,
 8013, 6765,    0,  448,    0, 6938, 7094,  713,    0,    0,
    0,  621,  369,    0,    0,    0,    0,    0,    0,    0,
  766,  773,  785, 3886,    0,    0,  779,  239,    0,  780,
  488,    0,  488,    0,  488,  777,  643,    0,    0,    0,
    0,  783,  182,  620,    0, 8013,    0, 8169, 8169,    0,
 8013,    0,    0,    0,  536,    0,    0,  316,  -24,  784,
    0,  788,  789,  790,    0,    0, 8013,  787,  391,    0,
    0, 3869, 8013,  861,    0, 2511,    0,  745, 7389,    0,
 1040,    0,    0,    0, 7545,  126,  802,  792,    0,    0,
  456,    0,    0,  801,    0,    0,    0,    0,    0,  803,
    0,  804, 6314,    0,    0,    0,  336,    0,    0, -271,
  209,  762,    0,  811,  805,    0,    0,    0, 2511,    0,
 8013,    0,    0,    0,    0,    0,    0, 8013,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 6297,    0,
    0, 6609,    0,    0, 8013,  815, 7250,    0,    0,    0,
    0,    0, 8013,   22,  770,   38,  771,  812, 8013,    0,
    0,  836,    0, -186,    0,    0, -220, -191,    0,    0,
    0,  831, 7701,  799,    0, -220,    0,    0,    0,    0,
    0,    0, 7389, -220, -220,  813,  827,    0,    0,  710,
    0,    0,    0,    0, 7389,    0,  316, 6626,  177,    0,
 6626,    0,  -36,  944,  945,  835, 8013,    0,  672, 8013,
    0,  837, 8013,  925, 2511,  182,    0,    0,    0,  108,
 7857,    0, 6921,  566,  856, 7389,  858,  862,    0,  808,
  336,    0,    0,    0,  810, -261,    0,  814, 2511, 2511,
    0,    0,    0,  336,    0,  404,    0,    0,    0,  863,
    0,    0,  934,    0,  936,    0,  567,    0,  864, 8013,
 8013,  817,    0,    0,    0,  879,    0, -249,  870,    0,
  823,  280,    0,    0,  766,    0,  874,    0,  873,  876,
  876,  876,    0,  880,  884,    0,    0,    0,    0,    0,
    0,    0, -178,    0, -176,  893,  894,    0,    0,    0,
    0,  872,    0, 2511,    0,    0,  895,    0,  897, 2511,
    0,    0,    0,    0,    0,    0,    0,    0,  609,    0,
    0,    0,    0, -201,    0,    0,  898,    0, -261,    0,
  851,    0,    0,    0,    0, 8013, 8013,    0, 8013,    0,
 8013,    0,    0,    0,    0,    0,    0,  907,    0, -249,
  -24,    0,    0,    0, -191,  -24,    0,    0,    0, 4250,
  938,    0,  938,  938,    0,    0,    0,   84,    0,    0,
 1017, 1022,    0,    0, 3869,    0,    0,    0, 8013,    0,
  914, -201,    0, -201,    0,    0,    0,    0,  913,    0,
 8013,  935, 8013,    0, 8013,  939,  369,    0,    0, -133,
  -24,  938,    0,  867,    0,  917,    0,  938,    0,    0,
  919,    0,  868,    0,  938,    0,    0,    0,  938,  928,
 8013,    0,    0,  929,  721,    0, 2511,  927,    0,    0,
 2511,    0,    0,    0,    0,  951,  632,  930,    0, 8013,
    0,    0,    0,    0,    0,    0,  937,  -24,    0,    0,
 4250,  931,  942,    0,  950,  954,    0,    0,    0, 2511,
    0,    0, 2511, 8013,    0,    0,    0,    0,    0,  947,
  922,    0,    0,    0, 9513, -150,    0,  -24,    0,    0,
    0,    0,  961, 8013, 8013,    0, 8013,    0,  941,    0,
    0,  952,    0,    0,10166,    0,    0,    0,  965, -150,
    0,    0,    0,    0,    0,    0,    0,    0,  309,  766,
10166,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  966,  -24,    0,  766,  -24,  766,    0,  979,    0,    0,
  964, 9513, 9066,    0,    0,    0,    0,    0,    0,    0,
 9134,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  969,  -24,    0,    0, 8013,    0,
    0,    0, 6626, 6626, -148, -131,  529,    0,   88, 6233,
    0, 1032,    0,    0, 2511,    0,    0,  983, 8013,  536,
  643,    0, 6626,    0, 6626,  924,  971,    0,   37,  980,
 -248,  320, 2087,  982,  932,    0,  983,  463,  474, -175,
  986,  987,  992, -220,  999,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  998,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  981, 1007,    0,  984, -220,    0, -115,    0,
    0,  262,    0, -112, 1004,    0,    0,    0, 3426,    0,
  -24,  -24, 1009, 1011,    0, 1010,    0,10166,    0, -112,
 -112,    0, 1012, 1127, 1128, 8668, 1020,10069,    0, 3590,
    0,    0,    0,  184,    0,    0,  626, 1021,    0,    0,
 -112,    0,    0,  336,    0,  336,    0,    0,    0,10104,
10134,    0, 1025, 1029,    0,    0,    0,    0,    0,    0,
    0,    0, -187, -187, 1024, 6453, 6453,    0,    0,    0,
    0,    0,    0, 1035, 1036,    0,    0,
  };
  protected static  short [] yyRindex = {         2106,
    0,    0,    0,    0, 2675,    0,    0,    0, 2106,    0,
 1398, 1398,    0,    0,    0,    0,    0,    0,    0, 9205,
    0,    0,    0,    0,    0,    0,    0,    0, 1862,    0,
    0,    0,  360, 1028,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  436,  351,    0, 1039,    0,    0,    0,
    0,    0, 1940,    0,   34,    0, 1398,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   30, 8895,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2965,    0, 3093, 1039,
 1042,    0,    0,  468,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1043,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1041,    0,    0,    0,    0,    0,    0, 1041,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 5306, 1044,
    0,    0,    0,    0, -251,    0,    0, 9609, 5379, 5154,
    0, 4926,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9679,    0, 9758,10161,10362,10697,10898,
11032,11166,11300,11434,11568,11599,    0,    0,    0,    0,
    0,    0,   36,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  536,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2028,    0,    0,    0,
    0,    0,    0, 1048,    0,    0,    0,  557,  162, 3221,
    0,    0,    0,    0, 3995, 3221,    0,    0,    0,    0,
    0, 4116,    0,    0,    0,    0, 2965,    0,    0,    0,
    0,    0, 1046,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   13,    0, 4774, -251,    0,
  612,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1045,
    0,    0,    0,    0,    0,    0, -181, 1052,    0,    0,
 -160,    0, 2191,    0, 4774,    0,    0,    0, 5230,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  192,    0, 1055,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  168,    0,    0, 1047,    0,    0,    0,
 4774,    0,    0, 1005,    0,    0,    0,    0,    0,    0,
 1054,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  379,   82,    0,    0,  645,
    0,    0,    0,    0,    0, 1061,    0,    0,    0,    0,
    0, 1013, 1014,   65,    0,    0,    0,  490,  455,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5455,    0,    0, 1058, 1059,    0,    0,    0,    0, 4774,
    0,  518, 1053,    0,    0, 9345,    0,    0,    0,    0,
    0,    0,    0,    0, 1056,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  533,  548,    0,    0, 1067,
    0,    0,    0,    0,    0,    0, 1068,    0, 5002, 1054,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1070,
    0, 1424,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1071,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 8481,    0,    0,    0,    0,    0,    0,    0,
    0, 4774, 4774,    0,    0,    0,  523,    0,    0,    0,
 1066,    0,    0,    0,    0,    0, 9826,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 9896, 9964,10228,10295,10429,10496,10563,
10630,10764,10831,10965,11099,11233,11367,11501,    0,    0,
 1072,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  647,    0,    0,    0,    0,    0,    0,    0,
 1760,    0,   81,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1074,  478,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 7406, 5679,    0,
    0,  541,  558,  562,    0,    0,    0,  564,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1073,    0,    0,    0,    0, 5529,    0, 1075,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1080,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  341,
 -219,    0,    0,    0, 1078,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  572,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  192,    0,  192,    0,    0,    0,    0,
    0, 6466,    0, 4318,    0,    0, 9345, 1033,    0,    0,
    0,    0,    0,    0,    0, 9345,    0,    0,    0,    0,
    0,    0,    0, 9345, 9345,    0,    0,    0,    0, 1089,
    0,    0,    0,    0,    0,    0, 7562,    0, 7718,    0,
    0,    0, 9445,    0,    0,    0,    0,    0,    0, 1064,
    0,    0,    0, 1590,    0,  767,    0,    0,    0,    0,
    0,    0,    0, 5078, 4850, 1084,    0,    0,    0, 1093,
    0,    0,    0,    0,    0,  341,    0,    0,    0,    0,
    0,    0,    0, 8481,    0,    0,    0,    0,    0,  403,
    0,    0,    0,    0,    0,    0,  323,    0,  668,    0,
    0,    0,    0,    0,    0, 4415,    0, 4507,    0,    0,
    0,    0,    0,    0, 1250,    0,    0,    0,    0,   75,
   75,   75,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  281,    0,    0,  579,  591,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  828,    0,    0,    0,    0,    0,    0, 5002,    0,
    0,    0,    0, 1099,    0,    0,    0,    0,  341,    0,
  657,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 4599,
 4691,    0,    0,    0, 1033, -266,    0,    0,    0,    0,
 1101,    0, 1101, 1101,    0,    0,    0,  486,    0,    0,
    0,    0,    0,    0, 1097,    0,    0,    0,    0,    0,
    0, 1102,    0, 2839,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  645,    0,    0,    0,
 4773, 1095,    0,    0,    0, 1080,    0,  372,    0,    0,
  166,    0,    0,    0,  373,    0,    0,    0,  372,    0,
    0,    0,    0,    0, 1103,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  449,  722,    0,    0,
    0,    0,    0,    0,    0,  314,    0, -239,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -211,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 5777,    0, 6117,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -208,    0,    0, 8966,    0,    0,    0,    0, 5862,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1250,
 9034,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 6191,    0, 1250, 5947, 1250,    0,    0,    0,    0,
    0,    0,   30,    0,    0,    0,    0,    0,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 6032,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1330,    0,  798,    0,
    0,    0, 4118,    0, 1055,    0,    0, 1051,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  283,    0,
    0,    0,    0,    0,    0,    0, 1051,    0,    0,  490,
    0,    0,    0, 9345,    0, 9237,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 9445,    0, 3630, 9305,
 9305,    0,    0, 8512,    0,    0, 9305,    0,    0,    0,
 8200, 8356,    0,    0,    0,  374,    0,  671,    0, 3736,
 8044,    0,    0, 1106, 1107,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 8512,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1054, 1054,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
  };
  protected static  short [] yyGindex = {            0,
 1368,  324,   29,    0,   33, -671,   -2, -868,    0,  585,
    0,    0,   20,    0,    0,    1,    0,    0,    0, -856,
  -86,    0,    0,    0,    0,    0,    0,    0, -543, -515,
 -506,    0,    0,    0,    0,    0,   51,  -15,    0, 1429,
    0, 1385,    0,    0,    0,    0,    0,    0,  809,  -50,
  833,    0,    0,    0,  358, -760, -744, -677, -670, -569,
 -551,-1018,-1060,    0, -228,    0,  134,    0, -424,    0,
    0,    0,    0,    0,    0,  303,   19,  304,  830,    0,
    0, -778, -322,  -30,  302,    0,  719,    0,  885,    0,
 1034,  741,  853, -595, -641,    0, -104,    0,  240,    0,
 -443, -761,    0,    0,    0, -256,  -40,  247, -507,    0,
    0,  693,  695,  696,    0,    0, -577,  704,    0, -633,
    0,    0,    0,    0,  190,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  386,    0,    0,    0,    0,  -73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -522,    0,    0,    0,    0,    0,    0,  244,
  249,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  467,    0,    0,    0, -237,    0,  258,
   -4,    0,    0,  875,    0,  350,    0,  569, -280, -102,
  -71,  625,    0,  465,    0, 1399,  -81,  -43,    0,    0,
  -13,    0, -306,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  644,    0,   17,    0,    0,  698,    0, -496, -361,  794,
 -531,    0,  972, -213,  617,    0,    0,    0,  857,  -57,
    0,    0,    0,    0,    0,    0, -606,    0,    0,    0,
    0,    0, 1062,    0,  279,  623,  442,  619, 1129, 1130,
 1133, 1137, 1126,    0, 1131,    0,    0,    0, 1008,    0,
  712,    0,    0,    0,    0,    0, -312,    0,    0,    0,
    0,  -77,    0,    0,  542,    0,  426,  387,    0,    0,
  528, -534,  -45, -352,  -37,    0, 1380,    0,   32,    0,
   42,   53,   55,   57,   58,   62,   64,   66,   70,   71,
    0, -663,    0,  -49,    0, 1492,    0,    0, -319,    0,
    0,    0,    0,    0,    0,    0,  593,    0,    0,  592,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  602,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1060,
    0,    0,    0,    0,    0,    0,    0,  769,    0,    0,
    0,    0,  582,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  967,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  389,    0,    0,    0,    0,    0,
    0,    0,    0,  496,    0,    0,    0,    0,    0,
  };
  protected static  short [] yyTable = {           267,
   20,  162,  263,  280,   54,  470,  211,  714,  169,   20,
  502,  163,  556,   79,  212,  650,  341,  445,  743,  533,
  300,   34,  460,   45,  352,  889,  662,  456,  475,  749,
  710,  517,  834,  861,  899,  863,  909,   57,  977,  270,
  584,   58,  904,  905,  585,  262,  760,  342,  500,  549,
   29,    1,  250,   20, 1153,  693,  731,  837,  301,   29,
  292,   41,   32,  169,  890,   45,  999,   39, 1338,  884,
 1161,  346,  252,  646,  365,  861, 1227,  987,  346,  989,
 1259,  248,  278,  216,  285,    2,   81,   42,  302,  526,
  353,  289,  366,  217,  355,  364,   81,  404,  321,  273,
  820,  276, 1019,   29,  218, 1114,  219, 1202,  220,  221,
   45,  405,  885,  222,  331,  223,   83,  224,  392,   43,
  677,  225,  226, 1062, 1204,   32, 1174,  540,   85,    2,
  645,  302,  302,  302,  302,  302,  302,  302,  302,  332,
 1278,  290,  291, 1287,  727,    4,  331,  333,  853,  331,
   58,    3, 1064,  731,  380,  645, 1203, 1174,  853,  364,
    4,  903,  162,  331,  645,  331,  711,  211,  664,  169,
    3,  931,  163, 1205,    4,  212,  142,   58,  694,  390,
  522,  263,  365,  263,  365, 1339,  365,  365, 1260,  365,
  621,  365,  285,  474,  286,  952,  953,  527,  287,  528,
  556,  289,  659,  364,  942,  364,  712,  364,  364,  731,
  364,  556,  364,  802,  969,    4,    5,    6,    7, 1000,
 1048,  392,   44,   33,  454,  642,  457, 1307,   40,  404,
  867, 1063,  486,  253,  647,  488,  365,  365,  988,  911,
  990,  914,  491,  405,  216,   51,  366,   20,  393,  950,
    4,  290,  291,    4,  217,  263,  300,  364,  364,   37,
  994,   37, 1079,  733,  422,  218,  997,  219,  529,  220,
  221,  534,  479, 1160,  222,  451,  223,  404,  224,   58,
  501,  507,  225,  226,  511,  513,  169, 1164,  334, 1178,
  861,  523,  863,  380,  461,  524,  339,   29,  438,  770,
  423,  618,  286,   37,  916,  545,  698,  547,  548,  550,
  439,  511,    1,  359,  169,  872,  546,    1,  462,  555,
  343,  169,  571,  495,  302,  618,  562,  557, 1150,    4,
  339,  874,   56,   37,   59,   60,  353, 1135,   37,   37,
  380,    4, 1007,  840, 1008,  463,  710,  444,   37,  506,
  579,  488,  618, 1136,  378,  488,  378,  588,  589,  590,
  591,  592,  593,  594,  595,  596,  597,  598,  536,   81,
  339,   81,  831,   81,  826,   87,   37,  424,  425,   81,
  251, 1135,  393, 1081, 1168,   88,  570,  473,  376,  620,
    2,  666,  267,  302,  517,   81,  621, 1136,   37,   83,
 1169,   83,  621,   83,  566,  302,  302,  302,  622,   83,
  302,  302,    3,  638,  659, 1168, 1102,   37,   37,  353,
 1137,    4,  797,  343,  798,   83,  799, 1138,  343,  492,
  343, 1169,  343,  619,  338,  343,  377,  343,  638, 1322,
  602,  603,  343,   81,  353,   81,  353, 1323,  353, 1040,
  711,  353,  353,  353,  711,  392,  686,  619,  353,  656,
  871, 1041, 1264,   82, 1137,  378,    2, 1170,  378,   85,
  263, 1138,  933,   83, 1171,   83,  380,  488,  671,  579,
   81,  717,  381,   81,  619,  672,  722,  142,    3,  382,
   86,  289,  910,  460,  379,  665,  392,    4, 1170,  740,
  726,  383,   93,  841,  640, 1171,  402,  555, 1324,  169,
   83,  380,   37,   83,   37,  557,  766,  926,  555,  471,
  169,  271,  746,  338,  756,  756,  557,  579, 1139,  640,
   97,   89,   99,  338,   91,  100,  596,  338,  596,   81,
  104,  290,  291,  539,  108,  302, 1140,  338,  743,  657,
  338,  658, 1116,  111, 1132,  302,  540,  338, 1037, 1038,
  116,  338,   37,  731,  392,  118,  476,  754,  755,  121,
  346,  769, 1139,  541,  338, 1172, 1116,  477,  855,  277,
 1117,  123, 1133,  124,  338,  279,   37,  126,   37, 1118,
 1140, 1134,   81, 1173, 1209,  133,  134, 1065, 1132,  137,
  392, 1165,  272, 1070, 1117, 1220, 1172,   37,  338,  794,
  402,  795,  699, 1118, 1077,  809,  712,  811,  812,  300,
  814,  381,   83,  817, 1173,  142, 1133,  403,  382, 1166,
  939,  282, 1165,  847,  268, 1134,  511,  670, 1167,  974,
  383,  671,  832,   37,  775,  777,  203,  187,  717,  187,
  975,  187,  169,  154,  488,  154, 1309, 1310,  806,  807,
 1166,  851,  791,   79,  341,   85,  851,  851,  478, 1167,
  851,  851, 1156,  851,  851,  502,  165, 1328,  325,   37,
   37, 1157,   89,  142,  325,  587,  852,  302,  426,  427,
  862,  326, 1228,  851,  283,  169,  338,  863,  556,  142,
  266,  380,  604,  605,  288,  266,  338,  625,  579,  338,
  338,  579,  626,  627,  868,  304,  471,   73,   73,  628,
  629,   73,  511,  338,  428,  429,  299,  471,  877,  338,
  556,  165,  338,  353,   37,  641,  642,  282,  430,  431,
  396,  850,  897,  266,  641,  642,  282,  143,  305,  143,
  703,  143,  717,  329,  704,  330,  331,  802,  335,  828,
  336,  829, 1283, 1284,  507,  266,  559,  396,  350, 1293,
  351,  149,  955,  149,  762,  149,  923,  306,  356,  511,
  391,  358,  929,  362,  266,  266,  406,  854,  891,  407,
  934,  169,  854,  854,  763,  717,  854,  854,  671,  854,
  854,  732,  338,  338,  764,  338,  338,   65,  671,  434,
  948,  401,  360, 1344, 1345,  169,  169,  360,  345,  854,
  345,  436,  844,  746,   37,  345,  671,  345,  435,  965,
  966,  932,  345,  675,   74, 1257,  913,  165,   74,  915,
  360,  353,  556,  353,  657,  353, 1258,  338,  353,  437,
  353,  278,  185,  360,  185,  353,  185,  935,  360,  440,
  154,  941,  154,  360,  446,  360,  360,  360,  360,  608,
  609,  610,  611,  360,  419,  420,  421,  360,  442,  266,
  169,  266,  443,   37,   37,   54,  169,  449,  130,  360,
  130,  461,  360,  461,  360,  432,  433,  488,  338,  452,
  338,   37,  338,  488,  455, 1009, 1010,  174, 1012,  174,
 1014,  458,  490,  400,  471,  400,  459,  400,  490,  962,
  963,  338,  338,  392,  181,  360,  181,  480,  182,  266,
  182,  339,  799,  470,  799,  490,  400,  400,  356, 1069,
  453,  338,  453,  401,  479,  202,  498,  202,  507,  499,
  338,  338,  492,  266,  165,  266,  400,  175,  509,  175,
 1054,  510, 1056,  473, 1057,  400,  400,  250,  780,  781,
  535,   20,  532,  360,  266,  891, 1024,   81,  788,  394,
   37,  394,  165,  530, 1086, 1087, 1325, 1326,  538,  165,
  507,  551,  820,  820,  821,  821,  402,  544, 1030,  560,
  394,  394,  558,  169,  565,  555,  845,  169,  567, 1089,
  266,  845,  845,  557,  568,  845,  845,  569,  845,  845,
  394,   20, 1296,  624,   37,  517,  517,  572,  331,  394,
  394,  620,  620, 1103,  983,  984,  169,  555,  573,  169,
  574, 1320,  289, 1321,  397,  557,  266,  266,  606,  607,
  612,  613,  639, 1148, 1057,  640,  507,  644,  338,  464,
  847,  652,  654,  398,  399,  847,  847,  661, 1024,  847,
  847,  663,  847,  847,  664,   37,  667,  668,   37, 1193,
  669,  338,  673,  400,  676,  675,  674, 1193,  688, 1030,
  691,  692,  290,  291,  338,  695, 1115,  696, 1131,  338,
  697,  266,  338,  700,  338,  701,  338,  338,  338,  338,
  702,  721,  741, 1111,  338,  736,  737,  738,  338,  739,
 1115,  742,  338,  752,  745,  762,  761,  750, 1198,  778,
  338,  338,  338,  338,  338,  338,  338,  338,  785,  765,
  787,  687, 1131,  788,  793, 1115,  800,  796, 1217,  555,
  805,  169,  822,  338,  833,  338,  338,  557,  823,  824,
  825,  836,  843,  338,  827,  277,  842,  338,  266,  845,
 1111, 1229,  848,  846,  858,  338, 1115,  165,  856,  857,
  338,  869,  906,  723,  338,  338,  873,  875,  165,  876,
  882,  266,  489,  469,  894,  469,  907,  469,  489,  920,
  921, 1200, 1201,  922,  930,  928,  368,  369,  370,  371,
  372,  373,  374,  375,  338,  647,  469,  469,  267,  527,
  759, 1221,  943, 1222,  946,  944,  949,  958,  956,  960,
  951,  270,  408,  967,  964,    3,  469,   37,  972,  973,
  978,  979,  267,  267,  993,  469,  469,  980,  985,   29,
  266,  266,  986,  409,  410,  411,  412,  413,  414,  415,
  416,  417,  418,  991,  992,  996, 1006,  995,  266, 1279,
  853, 1018, 1042, 1329, 1288, 1330, 1033, 1043, 1049, 1053,
 1055, 1298, 1300, 1066, 1072,  579,  579, 1068, 1060, 1071,
 1288, 1288, 1340, 1340, 1078,  514, 1085, 1080, 1082, 1107,
 1088, 1092, 1095,  515,   97, 1096,   99, 1147, 1151,  100,
  294, 1288,  729, 1098,  104,  105,  106, 1100,  108, 1106,
  165,   97, 1152,   99,  109, 1180,  100,  111,   37, 1154,
 1162,  104, 1181, 1196,  116,  108, 1213, 1215, 1224,  118,
 1223,  119,  120,  121,  111, 1226, 1254,  266, 1255, 1272,
 1275,  116,   37, 1261, 1262,  123,  118,  124,  125, 1263,
  121,  126, 1265,  165,  128, 1268,  130, 1292,  132,  133,
  134,  295,  123,  137,  124, 1273,  344, 1302,  126, 1303,
 1312, 1304, 1313, 1315, 1319, 1327,  133,  134, 1343,  841,
  137,  266, 1331,  258,  841,  841, 1332,    6,  841,  841,
   33,  841,  841, 1346, 1347,   31,  528,  297,   32,   37,
   37,   24,  597,  774,   79,  598,  483,  744,   37,  656,
  247,  494,  449,  776,  315,  712,   80,   78,  747,  219,
  103,  484,  439,  786,  450,  657,  748,  482,  774,  440,
   37,   37,  266,  338,   31,  266,  513,  471,   32,   58,
  153,  154,  155,  156,  157,  158,  516,   77,  471,  165,
   37,  782,   37,  726,  641,  750,  727,  641,  586,  302,
  306,  752,  970,  730,   90,  281,  810, 1155, 1197,  623,
  599,  600,  601,  165,  165,  586,  586,  586,  586,  586,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
  586,  813, 1219, 1218,  816,   29,   29,  870,  772,  801,
   29, 1285,  898, 1276,   29,  917,   29,  918,  919,   29,
  912,   29,   29, 1342,   29, 1301,   29, 1163,   29, 1299,
   29,   29,   29,   29, 1093, 1094,   29,   29,  808, 1211,
  938,  367,   29, 1023,   29,   29,   29,  758,  165,   29,
   29,   29,  866,   29,  165,  998,   29,  838,   29,   29,
   29,   29,  614,  618,  615,   29,   29,   29,  616,  619,
   29,   29,   29,  617,  751,  954, 1074, 1182, 1083,   29,
   29, 1214,   29,   29,   29,   29,   29,   29,  586,  721,
  360,   29,  441,  303, 1050, 1052, 1045,  925, 1061,  783,
 1149,  728,    0,    0,  266, 1256,   29,    0,    0,    0,
    0,    0,    0,  360,   29,   29,    0,    0,    0,    0,
  744,    0,    0,   29,    0,    0,  360,    0,    0,    0,
  753,  360,    0,    0,  244,    0,  360,    0,  360,  360,
  360,  360,    0,    0,    0,    0,  360,    0,    0,    0,
  360,    0,    0,    0,  360,    0,    0,    0,    0,    0,
    0,    0,  360,    0,    0,  360,   29,  360,    0,    0,
    0,  165,    0,    0,    0,  165,    0,    0,    0,  776,
  776,    0,    0,    0,    0,    0,    0,  776,  776,  776,
  776,  776,    0,  776,  776,  266,  776,  776,  776,  776,
  776,  776,  776,  776,  165,    0,    0,  165,  776,    0,
  776,  776,  776,  776,  776,  776,    0,    0,  776,  266,
    0,    0,  776,  776,    0,  776,  776,  776,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  776,    0,  776,
    0,  776,  776,    0,    0,  776,  360,  776,  776,  776,
  776,  776,  776,  776,  776,  776,  776,  776,  776,   29,
  776,    0,    0,  776,    0,    0,    0,  776,    0,    0,
    0,    0,    0,    0,    0,    0,  266,  266,    0,    0,
    0,    0,    0,    0,    0,  266,    0,  776,  776,    0,
    0,  776,    0,    0,    0,    0,  776,  776,  776,  776,
  776,    0,    0,    0,  776,    0,  776,  266,  266,    0,
    0,    0,  776,  776,    0,    0,    0,    0,    0,  165,
    0,    0,    0,    0,    0,    0,    0,  266,    0,  266,
    0,    0,    0,    0,  776,  776,  776,  776,  776,  776,
  776,  776,  776,    0,  776,  721,  721,    0,    0,    0,
    0,    0,    0,  721,  721,  721,  721,  721,    0,  721,
  721,   57,  721,  721,  721,  721,  721,  721,  721,    0,
    0,    0,    0,    0,  721,    0,  721,  721,  721,  721,
  721,  721,    0,    0,  721,    0,    0,    0,  721,  721,
    0,  721,  721,  721,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  721,  586,  721,    0,  721,  721,    0,
    0,  721,    0,  721,  721,  721,  721,  721,  721,  721,
  721,  721,  721,  721,  721,    0,  721,    0,    0,  721,
    0,    0,    0,  721,    0,    0,    0,    0,    0,  869,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  721,  721,    0,    0,  721,    0,    0,
    0,    0,  721,  721,  721,  721,  721,    0,    0,    0,
  721,    0,  721,    0,    0,    0,    0,    0,  721,  721,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  721,  721,  721,  721,  721,  721,  721,  721,  721,    0,
  721,    0,    0,    0,    0,    0,   29,    0,    0,    0,
   29,    0,    0,    0,   29,    0,   29,  866,    0,   29,
    0,   29,    0,    0,   29,    0,   29,    0,   29,    0,
   29,    0,    0,   29,    0,    0,   29,   29,    0,    0,
    0,    0,    0,    0,   29,   29,   29,    0,    0,   29,
   29,   29,    0,   29,    0,    0,   29,    0,   29,   29,
   29,   29,    0,    0,    0,   29,   29,   29,    0,    0,
   29,   29,   29,    0,    0,    0,    0,    0,    0,   29,
   29,    0,   29,   29,   29,   29,   29,   29,    0,    0,
    0,   29,    0,    0,    0,    6,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   29,    0,   57,    0,
    0,    0,   59,    0,   29,   29,   59,    0,   59,    0,
    0,   59,    0,   59,    0,    0,   59,    0,   59,    0,
   59,    0,   59,    0,    0,   59,    0,    0,   59,   59,
    0,    0,    0,    0,    0,    0,   59,   59,   59,    0,
    0,   59,   59,   59,    0,   59,    0,    0,   59,    0,
   59,   59,   59,   59,    0,    0,   29,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,    0,    0,
    0,   59,   59,    0,   59,   59,  869,   59,   59,   59,
   58,    0,    0,   59,   58,    0,   58,    0,    0,   58,
    0,   58,    0,    0,   58,    0,   58,    0,   58,    0,
   58,    0,    0,   58,    0,    0,   58,   58,    0,    0,
    0,    0,    0,    0,   58,   58,   58,    0,    0,   58,
   58,   58,    0,   58,    0,    0,   58,    0,   58,   58,
   58,   58,    0,    0,    0,   58,   58,   58,    0,    0,
   58,   58,   58,    0,    0,    0,    0,    0,    0,   58,
   58,    0,   58,   58,    0,   58,   58,   58,   59,    0,
    0,   58,    0,    0,  866,    0,    0,    0,   58,    0,
    0,    0,   58,    0,   58,    0,    0,   58,    0,   58,
    0,    0,   58,    0,   58,    0,   58,    0,   58,    0,
    0,   58,    0,    0,   58,   58,    0,    0,    0,    0,
    0,    0,   58,   58,   58,    0,    0,   58,   58,   58,
    0,   58,    0,    0,   58,    0,   58,   58,   58,   58,
    0,    0,    0,   58,   58,   58,    0,    0,   58,   58,
   58,    0,    0,    0,    0,    0,   58,   58,   58,    0,
   58,   58,    0,   58,   58,   58,   58,    0,    0,   58,
   58, 1231,   58,    0,    0,   58,    0,   58,    0,    0,
   58,    0,   58,    0,   58,    0,   58,    0,    0,   58,
    0,    0,   58,   58,    0,    0,    0,    0,    0,    0,
   58,   58,   58,    0,    0,   58,   58,   58,    0,   58,
    0,    0,   58, 1232,   58,   58,   58,   58,    0,    0,
    0,   58,   58,   58,    0,    0,   58,   58,   58,    0,
    0,    0,    0,    0,    0,   58,   58,    0,   58,   58,
    0,   58,   58,   58,   58,    0,  496,   58,    0,    0,
    0,  496,  496,    0,    0,    0,    0,    0,    0,    0,
 1233, 1234, 1235, 1236,    0, 1237, 1238, 1239, 1240, 1241,
 1242, 1243, 1244,    0,  496, 1245, 1246, 1247, 1248, 1249,
 1250, 1251, 1252,    0,  496,    0,    0,  496,  496,    0,
    0,    0,  496,    0,    0,  496,    0,  496,    0,  496,
  496,  496,  496,    0,    0,    0,    0,  496,    0,    0,
    0,  496,    0,    0,    0,  496,    0,    0,    0,    0,
    0,    0,   58,  496,    0,    0,  496,    0,  496,  496,
    0,    0,    0,    0,  496,  496,  496,  496,  496,  496,
  496,  496,  496,  496,  496,  496,  496,    0,    0,    0,
  496,    0,    0,    0,  496,  496,    0,  496,  496,  496,
  496,  496,  496,  496,    0,  496,  496,    0,  496,  496,
  496,  496,  496,  496,  496,  496,  496,  496,    0,  496,
  496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
  496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
  496,    0,   95,    0,    0,    0,    0,  496,  496,  496,
   96,   97,   98,   99,    0,    0,  100,  101,    0,  102,
  103,  104,  105,  106,  107,  108,    0,    0,    0,    0,
    0,  109,    0,  110,  111,  112,  113,  114,  115,    0,
    0,  116,    0,    0,    0,  117,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  122,    0,  123,    0,  124,  125,    0,    0,  126,    0,
  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
  137,  138,    0,  139,    0,    0,  140,    0,    0,    0,
  141,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  142,    0,    0,    0,  143,    0,    0,    0,    0,  144,
  145,  146,  147,  148,    0,    0,    0,  149,    0,  150,
    0,    0,    0,    0,    0,  151,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  153,  154,  155,
  156,  157,  158,  159,  160,  161,  309,    0,    0,    0,
    0,    0,    0,    0,   96,   97,   98,   99,    0,    0,
  100,  101,    0,  102,  103,  104,  105,  106,  107,  108,
    0,    0,    0,    0,    0,  109,    0,  110,  111,  112,
  113,  114,  115,    0,    0,  116,    0,    0,    0,  117,
  118,    0,  119,  120,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  122,    0,  123,    0,  124,  125,
    0,    0,  126,    0,  127,  128,  129,  130,  131,  132,
  133,  134,  135,  136,  137,  138,    0,  139,    0,    0,
  140,    0,    0,    0,  141,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  142,    0,    0,    0,  143,    0,
    0,    0,    0,  144,  145,  146,  147,  148,    0,    0,
    0,  149,    0,  150,    0,    0,    0,    0,    0,  151,
  152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  153,  154,  155,  156,  157,  158,  159,  160,  161,
  862,    0,    0,    0,    0,    0,    0,    0,  862,  862,
  862,  862,    0,    0,  862,  862,    0,  862,  862,  862,
  862,  862,  862,  862,    0,    0,    0,    0,    0,  862,
    0,  862,  862,  862,  862,  862,  862,    0,    0,  862,
    0,    0,    0,  862,  862,    0,  862,  862,  862,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  862,    0,
  862,    0,  862,  862,    0,    0,  862,    0,  862,  862,
  862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
    0,  862,    0,    0,  862,    0,    0,    0,  862,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  862,    0,
    0,    0,  862,    0,    0,    0,    0,  862,  862,  862,
  862,  862,    0,    0,    0,  862,    0,  862,    0,    0,
    0,    0,    0,  862,  862,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  862,  862,  862,  862,  862,
  862,  862,  862,  862,  730,    0,    0,    0,    0,    0,
    0,    0,  730,  730,  730,  730,    0,    0,  730,  730,
    0,  730,  730,  730,  730,  730,  730,  730,    0,    0,
    0,    0,    0,  730,    0,  730,  730,  730,  730,  730,
  730,    0,    0,  730,    0,    0,    0,  730,  730,    0,
  730,  730,  730,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  730,    0,  730,    0,  730,  730,    0,    0,
  730,    0,  730,  730,  730,  730,  730,  730,  730,  730,
  730,  730,  730,  730,    0,  730,    0,    0,  730,    0,
    0,    0,  730,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  730,    0,    0,    0,  730,    0,    0,    0,
    0,  730,  730,  730,  730,  730,    0,    0,    0,  730,
  338,  730,    0,    0,    0,  338,  338,  730,  730,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  338,  730,
  730,  730,  730,  730,  730,  730,  730,  730,  338,    0,
    0,  338,  338,    0,    0,    0,  338,    0,    0,  338,
    0,  338,    0,  338,  338,  338,  338,    0,    0,    0,
    0,  338,    0,    0,    0,  338,    0,    0,    0,  338,
    0,    0,    0,    0,    0,    0,    0,  338,    0,    0,
  338,    0,  338,  338,    0,    0,    0,    0,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
  338,    0,    0,    0,  338,    0,    0,    0,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  338,    0,  338,
  338,    0,    0,  338,  338,  338,  338,  338,  338,    0,
  338,  338,    0,  338,  338,  338,  338,  338,  338,  338,
  338,  338,  338,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  338,    0,  338,    0,    0,    0,
    0,  338,  338,  338,    0,    0,  338,    0,    0,  338,
  338,    0,    0,    0,  338,    0,    0,    0,    0,  338,
    0,  338,  338,  338,  338,    0,    0,    0,    0,  338,
    0,    0,    0,  338,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  338,    0,    0,  338,    0,
  338,  338,    0,    0,    0,    0,  338,  338,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  338,  338,    0,
    0,    0,  338,    0,    0,    0,  338,  338,  338,  338,
  338,  338,  338,  338,  338,  338,    0,  338,  338,    0,
    0,  338,  338,  338,  338,  338,  331,    0,  338,  338,
    0,  331,  331,  338,  338,  338,  338,  338,  338,  338,
  338,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  338,    0,  331,    0,    0,    0,    0,  338,
  338,  338,    0,    0,  331,    0,    0,  331,  331,    0,
    0,    0,  331,    0,    0,  331,    0,  331,    0,  331,
  331,  331,  331,    0,    0,    0,    0,  331,    0,    0,
    0,  331,    0,    0,    0,  331,    0,    0,    0,    0,
    0,    0,    0,  331,    0,    0,  331,    0,  331,  331,
    0,    0,    0,    0,  331,  331,  331,  331,  331,  331,
  331,  331,  331,  331,  331,  331,    0,    0,    0,    0,
  331,    0,    0,    0,  331,  331,  331,  331,  331,  331,
    0,  331,  331,  331,    0,  331,  331,    0,    0,  331,
  331,  331,  331,  331,    0,    0,  331,  331,    0,    0,
    0,  331,  331,  331,  331,  331,  331,  331,  331,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  331,    0,  522,    0,    0,    0,    0,  331,  331,  331,
   96,   97,    0,   99,    0,    0,  100,  294,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,   61,    0, 1294,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  295,   62,
  137,    0,    0,  344,    0,    0,    0,    0,    0,    0,
  141,    0,   63,    0,    0,    0,   61,   65,    0,    0,
    0,    0,   66,    0,   67,   68,   69,   70,    0,    0,
 1295,    0,   71,  523,  143,    0,   72,  524,    0,   62,
  145,  146,  147,  148,    0,    0,    0,  149,   73,  150,
    0,   74,   63,   75,    0,  151,  152,   65,    0,    0,
    0,    0,   66,    0,   67,   68,   69,   70,    0,    0,
    0,    0,   71,    0,    0,    0,   72,  153,  154,  155,
  156,  157,  158,  345,  160,  161,  715,    0,   73,    0,
    0,   74,    0,   75,   96,   97,    0,   99,    0,    0,
  100,  294,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
    0,    0,    0,    0,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,    0,    0,    0,    0,
   61,    0, 1294,    0,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  295,   62,  137,    0,    0,  344,    0,    0,
    0,    0,  464,    0,  141,    0,   63,    0,    0,    0,
   58,   65,   58,    0,    0,    0,   66,    0,   67,   68,
   69,   70,    0,    0,  532,  716,   71,    0,  143,    0,
   72,    0,    0,   58,  145,  146,  147,  148,    0,    0,
    0,  149,   73,  150,    0,   74,   58,   75,    0,  151,
  152,   58,    0,    0,    0,    0,   58,    0,   58,   58,
   58,   58,    0,    0,   58,    0,   58,    0,    0,    0,
   58,  153,  154,  155,  156,  157,  158,  345,  160,  161,
  309,    0,   58,    0,    0,   58,    0,   58,   96,   97,
    0,   99,    0,    0,  100,  294,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,  301,    0,   58,    0,    0,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,   58,  132,  133,  134,  295,   58,  137,    0,
    0,  139,   58,    0,   58,   58,   58,   58,  141,    0,
    0,    0,   58,    0,    0,    0,   58,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   58,    0,
    0,   58,  143,   58,    0,    0,    0,    0,  145,  146,
  147,  148,    0,    0,    0,  149,    0,  150,    0,    0,
    0,    0,    0,  151,  152,    0,   58,   58,    0,    0,
  207,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  153,  154,  155,  156,  157,
  158,  345,  160,  161,  309,    0,    0,    0,    0,    0,
    0,    0,   96,   97,    0,   99,    0,    0,  100,  294,
    0,  790,    0,  104,  105,  106,    0,  108,    0,    0,
   97,    0,   99,  109,    0,  100,  111,    0,    0,    0,
  104,    0,    0,  116,  108,    0,    0,    0,  118,    0,
  119,  120,  121,  111,    0,    0,    0,    0,    0,    0,
  116,    0,    0,    0,  123,  118,  124,  125,    0,  121,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  295,  123,  137,  124,    0,  344,    0,  126,    0,    0,
    0,    0,  141,    0,    0,  133,  134,    0,    0,  137,
    0,    0,  272,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
    0,    0,  145,  146,  147,  148,    0,    0,    0,  149,
  366,  150,    0,    0,    0,  366,  366,  151,  152,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  366,  153,
  154,  155,  156,  157,  158,  345,  160,  161,  366,    0,
    0,  366,  366,    0,    0,    0,  366,    0,    0,  366,
    0,  366,   89,  366,  366,  366,  366,    0,    0,    0,
    0,  366,    0,    0,    0,  366,    0,    0,    0,  366,
    0,    0,    0,    0,    0,    0,    0,  366,    0,    0,
  366,    0,  366,  366,    0,    0,    0,    0,  366,  366,
  366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
    0,    0,    0,    0,  366,    0,    0,    0,  366,  366,
    0,  366,  366,  366,    0,  366,  366,  366,    0,  366,
  366,  363,    0,  366,  366,  366,  366,  363,  359,    0,
  366,  366,    0,    0,    0,  366,  366,  366,  366,  366,
  366,  366,  366,    0,    0,    0,    0,    0,    0,    0,
    0,  359,    0,    0,  366,    0,    0,    0,    0,  363,
    0,  366,    0,  363,  359,    0,    0,    0,    0,  359,
    0,    0,  243,    0,  359,    0,  359,  359,  359,  359,
    0,    0,    0,    0,  359,    0,    0,    0,  359,    0,
    0,    0,  359,    0,    0,    0,    0,    0,    0,    0,
  359,    0,    0,  359,  363,  359,    0,    0,    0,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,    0,    0,    0,    0,  363,    0,    0,    0,  363,
  363,    0,  363,  363,  363,    0,  363,  363,  363,    0,
  363,  363,    0,    0,  363,  363,  363,  363,    0,    0,
    0,  363,  363,    0,    0, 1029,  363,  363,  363,  363,
  363,  363,  363,  363,   97,    0,   99,    0,    0,  100,
    0,    0,    0,    0,  104,  363,    0,    0,  108,    0,
    0,    0,  363,    0,  359,    0,    0,  111,    0,    0,
    0,    0,    0,    0,  116,    0,    0,    0,    0,  118,
    0,    0,    0,  121,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  123,    0,  124,    0,    0,
    0,  126,    0,    0,   42,    0,    0,    0,   42,  133,
  134,    0,   42,  137,   42,    0,  272,   42,    0,   42,
    0,    0,   42,    0,   42,    0,   42,    0,   42,    0,
    0,   42,    0,    0,   42,   42,    0,    0,    0,    0,
    0,    0,   42,   42,   42,    0,    0,   42,   42,   42,
    0,   42,    0,    0,   42,    0,   42,   42,   42,   42,
    0,    0,    0,   42,   42,   42,    0,    0,   42,   42,
   42,    0,    0,    0,    0,    0,    0,   42,   42,    0,
   42,   42,   42,   42,   42,   42,    0,    0,    0,   42,
    0,    0,    0,    0,    0,    0,   89,    0,    0,    0,
    0,   43,    0,    0,    0,   43,    0,    0,    0,   43,
    0,   43,   42,   42,   43,    0,   43,    0,    0,   43,
    0,   43,    0,   43,    0,   43,    0,    0,   43,    0,
    0,   43,   43,    0,    0,    0,    0,    0,    0,   43,
   43,   43,    0,    0,   43,   43,   43,    0,   43,    0,
    0,   43,    0,   43,   43,   43,   43,    0,    0,    0,
   43,   43,   43,    0,   42,   43,   43,   43,    0,    0,
    0,    0,    0,    0,   43,   43,    0,   43,   43,   43,
   43,   43,   43,    0,    0,    0,   43,    0,    0,    0,
    0,    0,    0,   40,    0,    0,    0,   40,    0,    0,
    0,   40,    0,   40,    0,    0,   40,    0,   40,   43,
   43,   40,    0,   40,    0,   40,    0,   40,    0,    0,
   40,    0,    0,   40,   40,    0,    0,    0,    0,    0,
    0,   40,   40,   40,    0,    0,   40,   40,   40,    0,
   40,    0,    0,   40,    0,   40,   40,   40,   40,    0,
    0,    0,   40,   40,   40,    0,    0,   40,   40,   40,
    0,   43,    0,    0,    0,    0,   40,   40,    0,   40,
   40,    0,   40,   40,   40,    0,    0,    0,   40,    0,
    0,    0,    0,    0,    0,   41,    0,    0,    0,   41,
    0,    0,    0,   41,    0,   41,    0,    0,   41,    0,
   41,   40,   40,   41,    0,   41,    0,   41,    0,   41,
    0,    0,   41,    0,    0,   41,   41,    0,    0,    0,
    0,    0,    0,   41,   41,   41,    0,    0,   41,   41,
   41,    0,   41,    0,    0,   41,    0,   41,   41,   41,
   41,    0,    0,    0,   41,   41,   41,    0,    0,   41,
   41,   41,    0,   40,    0,    0,    0,    0,   41,   41,
    0,   41,   41,    0,   41,   41,   41,    0,    0,    0,
   41,    0,    0,    0,    0,    0,    0,   44,    0,    0,
    0,   58,    0,    0,    0,   58,    0,   58,    0,    0,
   58,    0,   58,   41,   41,   58,    0,   58,    0,   58,
    0,   58,    0,    0,   58,    0,    0,   58,   58,    0,
    0,    0,    0,    0,    0,   58,   58,   58,    0,    0,
   58,   58,   58,    0,   58,    0,    0,   58,    0,   58,
   58,   58,   58,    0,    0,    0,   58,   58,   58,    0,
    0,   58,   58,   58,    0,   41,    0,    0,    0,    0,
   58,   58,    0,   58,   58,    0,   58,   58,   58,   45,
    0,    0,   58,   58,    0,  338,    0,   58,    0,   58,
    0,    0,   58,    0,   58,    0,    0,   58,    0,   58,
    0,   58,    0,   58,    0,   44,   58,    0,    0,   58,
   58,    0,    0,    0,    0,    0,    0,   58,   58,   58,
    0,  338,   58,   58,   58,    0,   58,    0,    0,   58,
    0,   58,   58,   58,   58,    0,    0,    0,   58,   58,
   58,    0,    0,   58,   58,   58,    0,    0,    0,    0,
    0,    0,   58,   58,    0,   58,   58,   58,   58,   58,
   58,  435,  338,    0,   58,    0,    0,  338,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
    0,    0,    0,    0,    0,    0,    0,   45,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  435,  338,  338,
    0,  338,  338,  338,  338,  338,  338,  338,  338,  338,
  338,    0,  338,  338,  338,  338,  338,  338,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
  338,  338,  338,  338,    0,    0,    0,  398,  435,   58,
  338,  338,  338,  435,  435,  435,  435,  435,  435,  435,
  435,  435,  435,  435,  435,  435,    0,    0,    0,    0,
    0,    0,    0,    0,  435,  435,  435,  435,  435,  435,
  435,  435,  435,  398,  435,  435,    0,  435,  435,  435,
  435,  435,  435,  435,  435,  435,  435,    0,  435,  435,
  435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
  435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
    0,    0,    0,  503,  398,    0,  435,  435,  435,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  398,  398,    0,    0,    0,    0,    0,    0,    0,    0,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  503,
  398,    0,    0,  398,  398,  398,  398,  398,  398,  398,
  398,  398,  398,    0,  398,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,    0,    0,    0,  492,
  503,    0,  398,  398,  398,  503,  503,  503,  503,  503,
  503,  503,  503,  503,  503,  503,  503,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  503,  503,  503,  503,
  503,  503,  503,  503,  503,  492,  503,  503,    0,  503,
  503,  503,  503,  503,  503,  503,  503,  503,  503,    0,
  503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
  503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
  503,  503,    0,    0,    0,  395,  492,    0,    0,  503,
  503,  492,  492,  492,  492,  492,  492,  492,  492,  492,
  492,  492,  492,    0,    0,    0,    0,    0,    0,    0,
    0,  492,  492,    0,  492,  492,  492,  492,  492,  492,
  492,  395,  492,  492,    0,  492,  492,  492,  492,  492,
  492,  492,  492,  492,  492,    0,  492,  492,  492,  492,
  492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
  492,  492,  492,  492,  492,  492,  492,  492,    0,    0,
    0,  394,  395,    0,    0,  492,  492,  395,  395,  395,
  395,  395,  395,  395,  395,  395,  395,  395,  395,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  395,    0,
  395,  395,  395,  395,  395,  395,  395,  394,  395,  395,
    0,  395,  395,  395,  395,  395,  395,  395,  395,  395,
  395,    0,  395,  395,  395,  395,  395,  395,  395,  395,
  395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
  395,  395,  395,  395,    0,    0,    0,  338,  394,    0,
    0,  395,  395,  394,  394,  394,  394,  394,  394,  394,
  394,  394,  394,  394,  394,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  394,    0,  394,  394,  394,  394,
  394,  394,  394,  338,  394,  394,    0,  394,  394,  394,
  394,  394,  394,  394,  394,  394,  394,    0,  394,  394,
  394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
  394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
  394,    0,    0,    0,    0,    0,    0,  394,  394,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  338,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  338,    0,  338,    0,  338,  394,    0,  338,    0,
  338,  338,    0,  338,  338,  338,  338,  338,  338,  338,
  338,  338,  338,    0,  338,  338,  338,  338,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
  338,  338,  338,  338,  338,  338,  338,    0,    0,    0,
    0,    0,  338,  338,  338,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  394,  394,  394,  394,
    0,  394,  338,  394,  394,    0,  394,  394,  394,  394,
  394,    0,  394,  394,  394,  394,    0,  394,  394,  394,
  394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
  394,  394,  394,  394,  394,  394,  394,  394,  394,    0,
  338,    0,    0,    0,    0,  331,  394,  394,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  338,    0,  338,  338,  338,  338,  338,    0,    0,  338,
  338,    0,    0,  338,  338,  338,  338,  338,  338,  338,
  338,  338,    0,  338,  338,  338,  338,  338,  338,  338,
  338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
  338,  338,  338,  338,  338,    0,    0,    0,    0,    0,
    0,    0,  338,  338,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  338,  338,    0,  338,    0,  338,  338,
    0,    0,    0,  338,  338,    0,    0,  338,  338,  338,
  338,  338,  338,  338,  338,  338,    0,  338,  338,  338,
  338,  338,  338,  338,  338,  338,  338,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  338,  338,   59,
    0,   59,    0,   59,    0,   59,  338,  338,   59,    0,
   59,   59,    0,   59,    0,   59,    0,   59,    0,   59,
   59,   59,   59,    0,    0,   59,   59,    0,    0,    0,
    0,   59,    0,   59,   59,   59,    0,    0,   59,   59,
   59,    0,   59,    0,   59,   59,   59,   59,   59,   59,
   59,   59,    0,   59,   59,   59,   59,    0,    0,   59,
   59,   59,    0,   59,    0,    0,    0,    0,   59,   59,
    0,   59,   59,    0,   59,   59,   59,    0,    0,    0,
   59,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   58,    0,   59,
   59,   58,    0,   58,    0,    0,   58,    0,   58,   58,
    0,   58,   59,   58,    0,   58,    0,   58,   58,   58,
   58,    0,    0,   58,   58,    0,    0,    0,    0,   58,
    0,   58,   58,   58,    0,    0,   58,    0,   58,    0,
   58,    0,    0,   58,    0,   58,   58,   58,   58,    0,
    0,    0,   58,   58,   58,   59,    0,   58,   58,   58,
    0,    0,    0,    0,    0,    0,   58,   58,    0,   58,
   58,    0,   58,   58,   58,    0,    0,    0,   58,    0,
    0,    0,   58,    0,    0,    0,   58,    0,   58,    0,
    0,   58,    0,   58,   58,    0,   58,    0,   58,    0,
   58,   88,   58,   58,   58,   58,    0,    0,   58,   58,
   58,    0,    0,    0,   58,    0,   58,   58,   58,    0,
    0,   58,    0,   58,    0,   58,    0,    0,   58,    0,
   58,   58,   58,   58,    0,    0,    0,   58,   58,   58,
    0,    0,   58,   58,   58,    0,    0,    0,    0,    0,
    0,   58,   58,   58,   58,   58,    0,   58,   58,   58,
    0,    0,    0,   58,    0,    0,    0,   58,    0,    0,
    0,   58,    0,   58,    0,    0,   58,    0,   58,   58,
    0,   58,    0,   58,    0,   58,   89,   58,   58,   58,
   58,    0,    0,   58,   58,   58,    0,    0,    0,   58,
    0,   58,   58,   58,    0,    0,   58,    0,   58,    0,
   58,    0,    0,   58,    0,   58,   58,   58,   58,    0,
    0,    0,   58,   58,   58,    0,    0,   58,   58,   58,
    0,    0,    0,    0,    0,    0,   58,   58,   58,   58,
   58,    0,   58,   58,   58,    0,    0,    0,   58,    0,
    0,    0,   58,    0,    0,    0,   58,    0,   58,    0,
    0,   58,    0,   58,   58,    0,   58,    0,   58,    0,
   58,  111,   58,   58,   58,   58,    0,    0,   58,   58,
   58,    0,    0,    0,   58,    0,   58,   58,   58,    0,
    0,   58,    0,   58,    0,   58,    0,    0,   58,    0,
   58,   58,   58,   58,    0,    0,    0,   58,   58,   58,
    0,    0,   58,   58,   58,    0,    0,    0,    0,    0,
    0,   58,   58,   58,   58,   58,    0,   58,   58,   58,
    0,    0,    0,   58,    0,    0,    0,   58,    0,    0,
    0,   58,    0,   58,    0,    0,   58,    0,   58,   58,
    0,   58,    0,   58,    0,   58,  112,   58,   58,   58,
   58,    0,    0,   58,   58,   58,    0,    0,    0,   58,
    0,   58,   58,   58,    0,    0,   58,    0,   58,    0,
   58,    0,    0,   58,    0,   58,   58,   58,   58,    0,
    0,    0,   58,   58,   58,    0,    0,   58,   58,   58,
    0,    0,    0,    0,    0,    0,   58,   58,   58,   58,
   58,   58,   58,   58,   58,   58,    0,   58,   58,    0,
   58,    0,   58,   58,    0,   58,    0,   58,    0,   58,
    0,   58,   58,   58,   58,    0,    0,   58,   58,    0,
    0,  226,    0,   58,    0,   58,   58,   58,    0,    0,
   58,    0,   58,   61,   58,    0,    0,   58,    0,   58,
   58,   58,   58,    0,    0,    0,   58,   58,   58,    0,
    0,   58,   58,   58,    0,    0,   62,    0,    0,    0,
   58,   58,    0,   58,   58,    0,   58,   58,   58,   63,
    0,    0,   58,   58,   65,    0,    0,    0,    0,   66,
    0,   67,   68,   69,   70,    0,    0,    0,    0,   71,
    0,    0,    0,   72,    0,  227,    0, 1208,    0,    0,
   96,   97,    0,   99,    0,   73,  100,  294,   74,    0,
   75,  104,  105,  106,    0,  108,    0,    0,   97,    0,
   99,  109,    0,  100,  111,    0,    0,    0,  104,    0,
    0,  116,  108,    0,    0,    0,  118,    0,  119,  120,
  121,  111,  575,    0,    0,    0,    0,   58,  116,  576,
    0,    0,  123,  118,  124,  125,    0,  121,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  295,  123,
  137,  124,    0,  344,    0,  126,    0,  577,    0,    0,
  141,    0,    0,  133,  134,    0,    0,  137,    0,  464,
  272,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  143,  865,    0,  578,    0,    0,
  145,  146,  147,  148,    0,    0,    0,  149,    0,  150,
    0,    0,  849,    0,    0,  151,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  153,  154,  155,
  156,  157,  158,  345,  160,  161,   96,   97,    0,   99,
    0,    0,  100,  294,    0,    0,    0,  104,  105,  106,
   89,  108,    0,    0,   97,    0,   99,  109,    0,  100,
  111,    0,    0,    0,  104,    0,    0,  116,  108,    0,
    0,    0,  118,    0,  119,  120,  121,  111,  575,    0,
    0,    0,    0,    0,  116,  576,    0,    0,  123,  118,
  124,  125,    0,  121,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  295,  123,  137,  124,    0,  344,
    0,  126,    0,  577,    0,    0,  141,    0,    0,  133,
  134,    0,    0,  137,  857,    0,  272,    0,    0,  857,
  857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
  143,    0,    0,  578,    0,    0,  145,  146,  147,  148,
  857,    0,  857,  149,  857,  150,  857,  857,  857,    0,
    0,  151,  152,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  153,  154,  155,  156,  157,  158,  345,
  160,  161,   96,   97,    0,   99,    0,    0,  100,  294,
    0,    0,    0,  104,  105,  106,  363,  108,    0,    0,
   97,    0,   99,  109,    0,  100,  111,    0,    0,    0,
  104,    0,    0,  116,  108,    0,    0,    0,  118,    0,
  119,  120,  121,  111,  575,    0,    0,    0,    0,    0,
  116,  576,    0,    0,  123,  118,  124,  125,    0,  121,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  295,  123,  137,  124,    0,  344,    0,  126,    0,  577,
    0,    0,  141,    0,    0,  133,  134,    0,    0,  137,
    0,    0,  272,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143,    0,    0,    0,
    0,    0,  145,  146,  147,  148,    0,    0,    0,  149,
    0,  150,    0,    0,    0,    0,    0,  151,  152,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  153,
  154,  155,  156,  157,  158,  345,  160,  161,   96,   97,
    0,   99,    0,    0,  100,  294,    0,    0,    0,  104,
  105,  106,   89,  108,    0,    0,   97,    0,   99,  109,
    0,  100,  111,    0,    0,    0,  104,    0,    0,  116,
  108,    0,    0,    0,  118,    0,  119,  120,  121,  111,
    0,    0,    0,    0,    0,    0,  116,    0,    0,    0,
  123,  118,  124,  125,  767,  121,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  295,  123,  137,  124,
    0,  344,    0,  126,    0,  768,    0,    0,  141,    0,
    0,  133,  134,    0,    0,  137,    0,    0,  258,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  532,    0,
    0,    0,  143,    0,    0,    0,    0,    0,  145,  146,
  147,  148,    0,    0,    0,  149,    0,  150,    0,    0,
    0,    0,    0,  151,  152,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  153,  154,  155,  156,  157,
  158,  345,  160,  161,   96,   97,    0,   99,    0,    0,
  100,  294,    0,    0,    0,  104,  105,  106,   89,  108,
    0,    0,   97,    0,   99,  109,    0,  100,  111,    0,
    0,    0,  104,    0,    0,  116,  108,    0,    0,    0,
  118,    0,  119,  120,  121,  111,    0,    0,    0,    0,
    0,    0,  116,    0,    0,    0,  123,  118,  124,  125,
    0,  121,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  295,  123,  137,  124,    0,  344,    0,  126,
    0,    0,    0,    0,  141,    0,    0,  133,  134,    0,
    0,  137,    0,    0,  272,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  705,  937,    0,    0,  143,    0,
    0,    0,    0,    0,  145,  146,  147,  148,    0,    0,
    0,  149,    0,  150,    0,    0,    0,    0,    0,  151,
  152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  153,  154,  155,  156,  157,  158,  706,  160,  161,
   96,   97,    0,   99,    0,    0,  100,  294,    0,    0,
    0,  104,  105,  106,  774,  108,    0,    0,   97,    0,
   99,  109,    0,  100,  111,    0,    0,    0,  104,    0,
    0,  116,  108,    0,    0,    0,  118,    0,  119,  120,
  121,  111,    0,    0,    0,    0,    0,    0,  116,    0,
    0,    0,  123,  118,  124,  125,    0,  121,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  295,  123,
  137,  124,    0,  344,    0,  126,    0,    0,    0,    0,
  141,    0,    0,  133,  134,    0,    0,  137,    0,    0,
  272,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  143,    0,    0,    0,    0,  561,
  145,  146,  147,  148,    0,    0,    0,  149,    0,  150,
    0,    0,    0,    0,    0,  151,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  153,  154,  155,
  156,  157,  158,  345,  160,  161,   96,   97,    0,   99,
    0,    0,  100,  294,    0,    0,    0,  104,  105,  106,
  776,  108,    0,    0,   97,    0,   99,  109,    0,  100,
  111,    0,    0,    0,  104,    0,    0,  116,  108,    0,
    0,    0,  118,    0,  119,  120,  121,  111,    0,    0,
    0,    0,    0,    0,  116,    0,    0,    0,  123,  118,
  124,  125,    0,  121,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  295,  123,  137,  124,    0,  344,
    0,  126,    0,    0,    0,    0,  141,    0,    0,  133,
  134,    0,    0,  137,    0,    0,  337,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  705,    0,    0,    0,
  143,    0,    0,    0,    0,    0,  145,  146,  147,  148,
    0,    0,    0,  149,    0,  150,    0,    0,    0,    0,
    0,  151,  152,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  153,  154,  155,  156,  157,  158,  706,
  160,  161,   96,   97,    0,   99,    0,    0,  100,  294,
    0,    0,    0,  104,  105,  106,   89,  108,    0,    0,
  190,    0,  190,  109,    0,  190,  111,    0,    0,    0,
  190,    0,    0,  116,  190,    0,    0,    0,  118,    0,
  119,  120,  121,  190,    0,    0,    0,    0,    0,    0,
  190,    0,    0,    0,  123,  190,  124,  125,    0,  190,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  295,  190,  137,  190,    0,  344,    0,  190,    0,    0,
    0,    0,  141,    0,    0,  190,  190,    0,    0,  190,
    0,    0,  190,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  532,    0,    0,    0,  143,    0,    0,    0,
    0,    0,  145,  146,  147,  148,    0,    0,    0,  149,
    0,  150,    0,    0,    0,    0,    0,  151,  152,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  153,
  154,  155,  156,  157,  158,  345,  160,  161,   96,   97,
    0,   99,    0,    0,  100,  294,    0,    0,    0,  104,
  105,  106,  190,  108,    0,    0,  199,    0,  199,  109,
    0,  199,  111,    0,    0,    0,  199,    0,    0,  116,
  199,    0,    0,    0,  118,    0,  119,  120,  121,  199,
    0,    0,    0,    0,    0,    0,  199,    0,    0,    0,
  123,  199,  124,  125,    0,  199,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  295,  199,  137,  199,
    0,  344,    0,  199,    0,    0,    0,    0,  141,    0,
    0,  199,  199,    0,    0,  199,    0,    0,  199,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  839,
    0,    0,  143,    0,    0,    0,    0,    0,  145,  146,
  147,  148,    0,    0,    0,  149,    0,  150,    0,    0,
    0,    0,    0,  151,  152,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  153,  154,  155,  156,  157,
  158,  345,  160,  161,   96,   97,    0,   99,    0,    0,
  100,  294,    0,    0,    0,  104,  105,  106,  199,  108,
    0,    0,  191,    0,  191,  109,    0,  191,  111,    0,
    0,    0,  191,    0,    0,  116,  191,    0,    0,    0,
  118,    0,  119,  120,  121,  191,    0,    0,    0,    0,
    0,    0,  191,    0,    0,    0,  123,  191,  124,  125,
    0,  191,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  295,  191,  137,  191,    0,  344,    0,  191,
    0,    0,    0,    0,  141,    0,    0,  191,  191,    0,
    0,  191,    0,    0,  191,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  896,  143,    0,
    0,    0,    0,    0,  145,  146,  147,  148,    0,    0,
    0,  149,    0,  150,    0,    0,    0,    0,    0,  151,
  152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  153,  154,  155,  156,  157,  158,  345,  160,  161,
   96,   97,    0,   99,    0,    0,  100,  294,    0,    0,
    0,  104,  105,  106,  191,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,    0,    0,    0,    0,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,   61,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  295,   62,
  137,    0,    0,  344,    0,    0,    0,    0,    0,    0,
  141,    0,   63,    0,    0,    0,   64,   65,    0,    0,
    0,    0,   66,    0,   67,   68,   69,   70,    0,    0,
  527,    0,   71,    0,  143,    0,   72,    0,    0,    0,
  145,  146,  147,  148,    0,    0,    0,  149,   73,  150,
    0,   74,    0,   75,    0,  151,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  153,  154,  155,
  156,  157,  158,  345,  160,  161,   96,   97,    0,   99,
    0,    0,  100,  294,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,    0,    0,   58,    0,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   58,  123,    0,
  124,  125,    0,    0,  126,    0,    0,  128,    0,  130,
   58,  132,  133,  134,  295,   58,  137,    0,    0,  344,
   58,    0,   58,   58,   58,   58,  141,    0,    0,    0,
   58,    0,    0,    0,   58,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   58,    0,    0,   58,
  143,   58,    0,    0,    0,    0,  145,  146,  147,  148,
    0,    0,    0,  149,    0,  150,    0,    0,    0,    0,
    0,  151,  152,    0,   58,   58,    0,    0,  209,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  153,  154,  155,  156,  157,  158,  345,
  160,  161,   96,   97,    0,   99,    0,    0,  100,  294,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,    0,    0,
   58,    0,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   58,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,   58,  132,  133,  134,
  295,   58,  137,    0,    0,  344,   58,    0,   58,   58,
   58,   58,  141,    0,   58,    0,   58,    0,    0,    0,
   58,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   58,    0,    0,   58,  143,   58,    0,    0,
    0,    0,  145,  146,  147,  148,    0,    0,    0,  149,
    0,  150,    0,    0,    0,    0,    0,  151,  152,    0,
    0,    0,    0,    0,  298,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  153,
  154,  155,  156,  157,  158,  481,  160,  161,   96,   97,
    0,   99,    0,    0,  100,  294,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,    0,    0,   58,    0,   58,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,   58,  132,  133,  134,  295,   58,  137,    0,
    0,  139,   58,    0,   58,   58,   58,   58,  141,    0,
    0,    0,   58,    0,    0,    0,   58,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   58,    0,
    0,   58,  143,   58,    0,    0,    0,    0,  145,  146,
  147,  148,    0,    0,    0,  149,    0,  150,    0,    0,
    0,    0,    0,  151,  152,    0,    0,    0,    0,    0,
  299,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  153,  154,  155,  156,  157,
  158,  345,  160,  161,  599,  599,    0,  599,    0,    0,
  599,  599,    0,    0,    0,  599,  599,  599,    0,  599,
    0,    0,    0,    0,    0,  599,    0,    0,  599,    0,
    0,    0,   58,    0,    0,  599,    0,    0,    0,    0,
  599,    0,  599,  599,  599,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   58,  599,    0,  599,  599,
    0,    0,  599,    0,    0,  599,    0,  599,   58,  599,
  599,  599,  599,   58,  599,    0,    0,  599,   58,    0,
   58,   58,   58,   58,  599,    0,    0,    0,   58,    0,
    0,    0,   58,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   58,    0,    0,   58,  599,   58,
    0,    0,    0,    0,  599,  599,  599,  599,    0,    0,
    0,  599,    0,  599,    0,    0,    0,    0,    0,  599,
  599,    0,   58,   58,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  599,  599,  599,  599,  599,  599,  599,  599,  599,
   96,   97,    0,   99,    0,    0,  100,  294,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,    0,    0,   61,    0,
 1317,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   62,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,   63,  132,  133,  134,  295,   65,
  137,    0,    0,  344,   66,    0,   67,   68,   69,   70,
    0,    0, 1318,    0,   71,    0,    0,    0,   72,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,    0,   74,  143,   75,    0,    0,    0,    0,
  145,  146,  147,  148,    0,    0,    0,  149,    0,  150,
    0,    0,    0,    0,    0,  151,  152,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  153,  154,  155,
  156,  157,  158,  298,    0,  161,   96,   97,    0,   99,
    0,    0,  100,  294,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,    0,    0,    0,    0,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
  124,  125,    0,    0,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  295,    0,  137,    0,    0,  296,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  621,
  297,  621,    0,    0,  621,    0,  621,  621,    0,  621,
    0,  621,    0,  621,    0,  621,  621,  621,    0,    0,
    0,  621,  621,    0,    0,    0,    0,  621,    0,  621,
  621,    0,    0,    0,  621,    0,    0,    0,  621,    0,
    0,    0,    0,  153,  154,  155,  156,  157,  158,  298,
  621,    0,  621,    0,    0,    0,  621,  621,    0,    0,
    0,    0,    0,    0,  621,  621,    0,    0,  621,    0,
  620,  621,  620,    0,    0,  620,  621,  620,  620,    0,
  620,    0,  620,    0,  620,    0,  620,  620,  620,    0,
    0,    0,  620,  620,    0,  621,  621,    0,  620,    0,
  620,  620,    0,    0,    0,  620,    0,    0,  621,  620,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  620,    0,  620,    0,    0,    0,  620,  620,    0,
    0,    0,    0,    0,    0,  620,  620,    0,  620,  620,
  620,    0,  620,  620,    0,  620,  620,  620,  620,    0,
  620,  621,  620,    0,  620,  620,  620,    0,    0,    0,
  620,  620,    0,    0,    0,    0,  620,    0,  620,  620,
   97,    0,   99,  620,    0,  100,    0,  620, 1183,  620,
  104,    0,  255,    0,  108,    0,  256, 1184, 1185,  620,
    0,  620,  257,  111,    0,  620,  620,    0, 1186,    0,
  116,    0,    0,  620,  620,  118,    0,  620,    0,  121,
  620,    0,    0,    0,    0,  620,    0,    0,    0,    0,
    0,  123,  620,  124,    0,    0,    0,  126,    0,    0,
    0,    0,    0,    0,    0,  133,  134,    0,   97,  137,
   99,    0, 1187,  100,    0,    0, 1183,  259,  104,    0,
  255,    0,  108,    0,  256, 1184, 1185,    0,    0,    0,
  257,  111,    0,    0,    0,    0, 1186,    0,  116,    0,
    0,    0,    0,  118,    0,    0,    0,  121,    0, 1188,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  123,
  620,  124,    0,    0,    0,  126,    0,    0,    0,    0,
    0,    0,    0,  133,  134,    0,    0,  137,    0,  620,
 1187,  620,    0,    0,  620,  259,  620,    0,    0,  620,
    0,  620, 1189,  620,    0,  620,    0,    0,    0,    0,
    0,  620,  620,    0,    0,    0,    0,    0,    0,  620,
  620,  172,    0,  172,  620,    0,  172,    0,  620,    0,
    0,  172,    0,    0,    0,  172,    0,    0,    0,    0,
  620,    0,  620,    0,  172,    0,  620,  620,    0,    0,
    0,  172,    0,    0,  620,  620,  172,    0,  620,    0,
  172,  620,  172,    0,  172,    0,  620,    0,    0,  172,
 1189,    0,  172,    0,  172,    0,    0,    0,  172,    0,
    0,  172,    0,    0,    0,    0,  172,  172,    0,  172,
  172,  172,    0,  172,  172,    0,    0,  172,    0,  172,
    0,    0,    0,  172,    0,    0,    0,    0,    0,    0,
    0,    0,  172,    0,    0,    0,    0,    0,    0,  172,
    0,    0,  172,  171,  172,    0,    0,    0,  172,   58,
  172,   58,  172,    0,   58,    0,    0,  172,    0,   58,
  172,  620,  172,   58,    0,    0,  172,    0,    0,  172,
    0,    0,   58,    0,  172,  172,    0,    0,  172,   58,
    0,  172,    0,    0,   58,  172,    0,    0,   58,    0,
   58,    0,   58,  172,    0,    0,    0,   58,    0,    0,
   58,    0,   58,    0,    0,    0,   58,    0,    0,   58,
  172,    0,    0,  171,   58,   58,    0,   97,   58,   99,
    0,   58,  100,    0,    0,    0,    0,  104,    0,  255,
    0,  108,    0,  256,    0,    0,    0,    0,    0,  257,
  111,    0,    0,    0,    0,    0,    0,  116,    0,   58,
    0,   58,  118,  169,   58,    0,  121,    0,    0,   58,
    0,  172,    0,   58,    0,    0,    0,    0,  123,    0,
  124,    0,   58,    0,  126,    0,    0,    0,    0,   58,
    0,    0,  133,  134,   58,    0,  137,    0,   58,  258,
   58,    0,   58,   97,  259,   99,    0,   58,  100,    0,
   58,   58,   58,  104,    0,    0,   58,  108,    0,   58,
    0,    0,    0,    0,   58,   58,  111,   97,   58,   99,
    0,   58,  100,  116, 1108,    0,    0,  104,  118,    0,
    0,  108,  121,    0,  381,    0,    0,    0,    0,    0,
  111,  382,    0,    0,  123,    0,  124,  116,    0,    0,
  126,    0,  118,  383, 1109,    0,  121,    0,  133,  134,
    0,    0,  137,    0,    0,  272,    0,    0,  123,   89,
  124,    0,    0,    0,  126, 1110,    0,    0,    0,    0,
    0,    0,  133,  134,    0,   97,  137,   99,    0,  272,
  100,    0,    0,    0,    0,  104,    0,    0,    0,  108,
    0,   58,    0,    0,    0,    0,    0,    0,  111,    0,
  533,    0,    0,    0,    0,  116,    0,    0,    0,    0,
  118,    0,    0,    0,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  123,    0,  124,    0,
    0,    0,  126,    0,    0,  384,  533,    0,    0,    0,
  133,  134,    0,    0,  137,    0,    0,  337,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  546,    0,    0,    0,  338,    0,  339,  533,    0,    0,
    0,    0,  533,  533,  533,  533,  533,  533,  533,  533,
  533,  533,  533,  533,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  533,    0,  533,  546,  533,    0,  533,
  533,  533,    0,  533,  533,    0,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,    0,   89,    0,  533,
  533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,  546,  533,  550,
    0,    0,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  546,    0,  546,    0,  546,    0,  546,
  546,  546,    0,  546,  546,  550,    0,  546,  546,  546,
  546,  546,  546,  546,  546,  546,    0,    0,    0,  546,
  546,  546,  546,  546,  546,  546,  546,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  553,  546,    0,
    0,    0,    0,    0,    0,    0,  550,    0,    0,    0,
    0,  550,  550,  550,  550,  550,  550,  550,  550,  550,
  550,  550,  550,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  550,  553,  550,    0,  550,    0,  550,  550,
  550,    0,  550,  550,    0,    0,  550,  550,  550,  550,
    0,    0,    0,  550,  550,    0,    0,    0,  550,  550,
  550,  550,  550,  550,  550,  550,    0,  551,    0,    0,
    0,    0,    0,    0,  553,    0,    0,  550,    0,  553,
  553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
  553,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  553,    0,  553,  551,  553,    0,  553,  553,  553,    0,
  553,  553,    0,    0,  553,  553,  553,  553,    0,    0,
    0,  553,  553,    0,    0,    0,  553,  553,  553,  553,
  553,  553,  553,  553,    0,  552,    0,    0,    0,    0,
    0,    0,    0,    0,  551,  553,    0,    0,    0,  551,
  551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
  551,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  551,  552,  551,    0,  551,    0,  551,  551,  551,    0,
  551,  551,    0,    0,  551,  551,  551,  551,    0,    0,
    0,  551,  551,    0,    0,    0,  551,  551,  551,  551,
  551,  551,  551,  551,    0,    0,    0,    0,    0,    0,
    0,    0,  552,    0,    0,  551,    0,  552,  552,  552,
  552,  552,  552,  552,  552,  552,  552,  552,  552,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  552,   61,
  552,    0,  552,    0,  552,  552,  552,    0,  552,  552,
    0,    0,  552,  552,  552,  552,    0,    0,    0,  552,
  552,    0,   62,    0,  552,  552,  552,  552,  552,  552,
  552,  552,    0,    0,   61,   63,    0,    0,    0,    0,
   65,    0,    0,  552,    0,   66,    0,   67,   68,   69,
   70,    0,    0, 1295,    0,   71,    0,   62,    0,   72,
    0,    0,    0,    0,   61,    0, 1317,    0,    0,    0,
   63,   73,    0,    0,   74,   65,   75,    0,    0,    0,
   66,    0,   67,   68,   69,   70,    0,   62, 1318,    0,
   71,    0,    0,    0,   72,    0,   61,    0,    0,    0,
   63,    0,    0,    0,    0,   65,   73,    0,    0,   74,
   66,   75,   67,   68,   69,   70,    0,    0,    0,   62,
   71,    0,    0,    0,   72,    0,    0,    0,    0,    0,
    0,    0,   63,    0,    0,    0,   73,   65,    0,   74,
    0,   75,   66,    0,   67,   68,   69,   70,    0,    0,
    0,    0,   71,    0,    0,    0,   72,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   73,  556,
    0,   74,    0,   75,  556,  556,  556,  556,  556,  556,
  556,  556,  556,  556,  556,  556,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  556,    0,  556,    0,  556,
    0,  556,  556,  556,    0,    0,    0,    0,    0,  556,
  556,  556,  556,    0,    0,    0,  556,  556,    0,    0,
    0,  556,  556,  556,  556,  556,  556,  556,  556,    0,
    0,    0,    0,    0,    0,    0,  557,    0,    0,    0,
  556,  557,  557,  557,  557,  557,  557,  557,  557,  557,
  557,  557,  557,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  557,    0,  557,    0,  557,    0,  557,  557,
  557,    0,    0,    0,    0,    0,  557,  557,  557,  557,
    0,    0,    0,  557,  557,    0,    0,    0,  557,  557,
  557,  557,  557,  557,  557,  557,    0,    0,    0,    0,
    0,    0,    0,  558,    0,    0,    0,  557,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  558,
    0,  558,    0,  558,    0,  558,  558,  558,    0,    0,
    0,    0,    0,  558,  558,  558,  558,    0,    0,    0,
  558,  558,    0,    0,    0,  558,  558,  558,  558,  558,
  558,  558,  558,    0,    0,    0,    0,    0,    0,    0,
  559,    0,    0,    0,  558,  559,  559,  559,  559,  559,
  559,  559,  559,  559,  559,  559,  559,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  559,    0,  559,    0,
  559,    0,  559,  559,  559,    0,    0,    0,    0,    0,
  559,  559,  559,  559,    0,    0,    0,  559,  559,    0,
    0,    0,    0,    0,  559,  559,  559,  559,  559,  559,
    0,    0,    0,    0,    0,    0,    0,  560,    0,    0,
    0,  559,  560,  560,  560,  560,  560,  560,  560,  560,
  560,  560,  560,  560,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  560,    0,  560,    0,  560,    0,  560,
  560,  560,    0,    0,    0,    0,    0,  560,  560,  560,
  560,    0,    0,    0,  560,  560,    0,    0,    0,    0,
    0,  560,  560,  560,  560,  560,  560,    0,    0,    0,
    0,    0,    0,    0,  561,    0,    0,    0,  560,  561,
  561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
  561,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  561,    0,  561,    0,  561,    0,  561,  561,  561,    0,
    0,    0,    0,    0,  561,  561,  561,  561,    0,    0,
    0,  561,  561,    0,    0,    0,    0,    0,  561,  561,
  561,  561,  561,  561,    0,    0,    0,    0,    0,    0,
    0,  562,    0,    0,    0,  561,  562,  562,  562,  562,
  562,  562,  562,  562,  562,  562,  562,  562,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  562,    0,  562,
    0,  562,    0,  562,  562,  562,    0,    0,    0,    0,
    0,  562,  562,  562,  562,    0,    0,    0,  562,  562,
    0,    0,    0,    0,    0,  562,  562,  562,  562,  562,
  562,    0,    0,    0,    0,    0,    0,    0,  563,    0,
    0,    0,  562,  563,  563,  563,  563,  563,  563,  563,
  563,  563,  563,  563,  563,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  563,    0,  563,    0,  563,    0,
  563,  563,  563,    0,    0,    0,    0,    0,  563,  563,
  563,  563,    0,    0,    0,  563,  563,    0,    0,    0,
    0,    0,  563,  563,  563,  563,  563,  563,    0,    0,
    0,    0,    0,    0,    0,  564,    0,    0,    0,  563,
  564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
  564,  564,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  564,    0,  564,    0,  564,    0,  564,  564,  564,
    0,    0,    0,    0,    0,    0,    0,  564,  564,    0,
    0,    0,  564,  564,    0,    0,    0,    0,    0,    0,
    0,  564,  564,  564,  564,    0,    0,    0,    0,    0,
    0,    0,  565,    0,    0,    0,  564,  565,  565,  565,
  565,  565,  565,  565,  565,  565,  565,  565,  565,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  565,    0,
  565,    0,  565,    0,  565,  565,  565,    0,    0,    0,
    0,    0,    0,    0,  565,  565,    0,    0,    0,  565,
  565,    0,    0,    0,    0,    0,    0,    0,  565,  565,
  565,  565,    0,    0,    0,    0,    0,    0,    0,  566,
    0,    0,    0,  565,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  566,    0,  566,    0,  566,
    0,  566,  566,  566,    0,    0,    0,    0,    0,    0,
    0,  566,  566,    0,    0,    0,  566,  566,    0,    0,
    0,    0,    0,    0,    0,  566,  566,  566,  566,    0,
    0,    0,    0,    0,    0,    0,  567,    0,    0,    0,
  566,  567,  567,  567,  567,  567,  567,  567,  567,  567,
  567,  567,  567,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  567,    0,  567,    0,  567,    0,  567,  567,
  567,    0,    0,    0,    0,    0,    0,    0,  567,  567,
    0,    0,    0,  567,  567,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  567,  567,    0,    0,    0,    0,
    0,    0,    0,  568,    0,    0,    0,  567,  568,  568,
  568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  568,
    0,  568,    0,  568,    0,  568,  568,  568,    0,    0,
    0,    0,    0,    0,    0,  568,  568,    0,    0,    0,
  568,  568,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  568,  568,    0,    0,    0,    0,    0,    0,    0,
  569,    0,    0,    0,  568,  569,  569,  569,  569,  569,
  569,  569,  569,  569,  569,  569,  569,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  569,    0,  569,    0,
  569,    0,  569,  569,  569,    0,    0,    0,    0,    0,
    0,    0,    0,  569,    0,    0,    0,  569,  569,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  569,  569,
    0,    0,    0,    0,    0,    0,    0,  570,    0,    0,
    0,  569,  570,  570,  570,  570,  570,  570,  570,  570,
  570,  570,  570,  570,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  570,    0,  570,    0,  570,    0,  570,
  570,  570,    0,    0,    0,    0,    0,    0,    0,    0,
  570,    0,    0,    0,  570,  570,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  570,  570,    0,    0,    0,
    0,    0,    0,    0,  571,    0,    0,    0,  570,  571,
  571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
  571,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  571,    0,  571,    0,  571,    0,  571,  571,  571,    0,
    0,    0,    0,    0,    0,    0,    0,  571,    0,    0,
    0,    0,  571,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  571,  571,    0,    0,    0,    0,    0,    0,
    0,  572,    0,    0,    0,  571,  572,  572,  572,  572,
  572,  572,  572,  572,  572,  572,  572,  572,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  572,    0,  572,
    0,  572,    0,  572,  572,  572,    0,    0,    0,    0,
    0,    0,    0,    0,  572,    0,    0,    0,    0,  572,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  572,
  572,    0,    0,    0,    0,    0,    0,    0,  573,    0,
    0,    0,  572,  573,  573,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  573,    0,  573,    0,  573,    0,
  573,  573,  573,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  573,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  573,  573,    0,    0,
    0,    0,    0,    0,    0,  574,    0,    0,    0,  573,
  574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  574,    0,  574,    0,  574,    0,  574,  574,  574,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  574,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  574,  574,    0,    0,    0,    0,    0,
    0,    0,  575,    0,    0,    0,  574,  575,  575,  575,
  575,  575,  575,  575,  575,  575,  575,  575,  575,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  575,    0,
  575,    0,  575,    0,  575,  575,  575,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  575,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  575,    0,    0,    0,    0,    0,    0,    0,  576,
    0,    0,    0,  575,  576,  576,  576,  576,  576,  576,
  576,  576,  576,  576,  576,  576,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  576,    0,  576,    0,  576,
    0,  576,  576,  576,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  576,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  576,    0,
    0,    0,    0,    0,    0,    0,  577,    0,    0,    0,
  576,  577,  577,  577,  577,  577,  577,  577,  577,  577,
  577,  577,  577,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  577,    0,  577,    0,  577,  579,  577,  577,
  577,    0,  579,  579,  579,  579,  579,  579,  579,  579,
  579,  579,  579,  579,  577,    0,    0,    0,    0,    0,
    0,    0,    0,  579,    0,  579,    0,  579,    0,  579,
  579,  579,
  };
  protected static  short [] yyCheck = {            77,
    0,   52,   76,   90,    7,  262,   52,  530,   52,    9,
  330,   52,  365,   29,   52,  459,  119,  231,  553,  342,
  102,    2,  260,    4,  129,  787,  470,  256,  266,  564,
  527,  338,  696,    0,  796,    0,  815,    9,  895,   80,
  402,    9,  804,  805,  406,   76,  578,  119,  329,  362,
    0,  257,   55,   53, 1115,  294,  268,  699,  102,    9,
  101,  256,  256,  107,  256,   46,  268,  256,  256,  256,
 1131,  122,  256,  256,  256,  739,  325,  256,  129,  256,
  256,   53,   87,   52,  256,  335,  358,  282,  102,  256,
  131,  368,  143,   52,  135,  256,  358,  169,  365,   81,
  678,   82,  971,   53,   52,  256,   52,  256,   52,   52,
   91,  169,  784,   52,  366,   52,  388,   52,  370,  314,
  341,   52,   52,  257,  256,  365, 1145,  269,  370,  335,
  339,  145,  146,  147,  148,  149,  150,  151,  152,  268,
  256,  418,  419,  256,  286,  366,  366,  276,  420,  369,
  417,  357, 1021,  365,  159,  364,  305, 1176,  420,  141,
  366,  803,  213,  383,  373,  417,  528,  213,  417,  213,
  357,  835,  213,  305,  366,  213,  364,  417,  417,  161,
  256,  255,  364,  257,  366,  373,  368,  369,  364,  371,
  366,  373,  256,  265,  366,  859,  860,  364,  370,  366,
  553,  368,  378,  364,  846,  366,  529,  368,  369,  421,
  371,  564,  373,  657,  886,  366,  422,  423,  424,  421,
  999,  356,  417,  417,  255,  454,  257, 1288,  417,  301,
  762,  365,  283,  417,  417,  286,  418,  419,  417,  817,
  417,  819,  293,  301,  213,  257,  297,  247,  383,  856,
  366,  418,  419,  366,  213,  329,  338,  418,  419,    2,
  924,    4, 1041,  544,  262,  213,  930,  213,  340,  213,
  213,  343,  277, 1130,  213,  247,  213,  349,  213,  247,
  330,  332,  213,  213,  335,  336,  330, 1144,  417, 1146,
  257,  367,  257,  298,  272,  371,  366,  247,  398,  622,
  298,  272,  366,   46,  341,  356,  370,  358,  358,  294,
  410,  362,  257,  383,  358,  294,  357,  257,  296,  365,
  256,  365,  394,  305,  338,  296,  377,  365, 1107,  366,
  366,  294,    9,   76,   11,   12,  256, 1098,   81,   82,
  345,  366,  949,  705,  951,  323,  843,  383,   91,  331,
  401,  402,  323, 1098,  343,  406,  343,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,  418,  350,  358,
  366,  358,  692,  358,  687,  417,  119,  375,  376,  358,
   57, 1142,  370, 1047, 1145,  417,  391,  383,  266,  440,
  335,  378,  470,  407,  701,  358,  366, 1142,  141,  388,
 1145,  388,  366,  388,  386,  419,  420,  421,  378,  388,
  424,  425,  357,  339,  378, 1176, 1080,  160,  161,  339,
 1098,  366,  651,  359,  653,  388,  655, 1098,  364,  417,
  366, 1176,  368,  272,  370,  371,  314,  373,  364,  256,
  422,  423,  378,  358,  364,  358,  366,  264,  368,  366,
  369,  371,  372,  373,  373,  356,  497,  296,  378,  464,
  773,  378, 1224,  378, 1142,  343,  335, 1145,  343,  370,
  544, 1142,  365,  388, 1145,  388,  481,  528,  371,  530,
  358,  532,  306,  358,  323,  490,  537,  364,  357,  313,
  373,  368,  815,  731,  372,  477,  356,  366, 1176,  550,
  541,  325,  372,  378,  339, 1176,  366,  553,  325,  553,
  388,  516,  255,  388,  257,  553,  621,  830,  564,  262,
  564,  256,  563,  356,  575,  576,  564,  578, 1098,  364,
  265,  417,  267,  366,  371,  270,  369,  370,  371,  358,
  275,  418,  419,  256,  279,  559, 1098,  356, 1083,  371,
  383,  373, 1096,  288, 1098,  569,  269,  366,  983,  984,
  295,  370,  305,  544,  356,  300,  360,  572,  573,  304,
  621,  622, 1142,  286,  383, 1145, 1120,  371,  370,  417,
 1096,  316, 1098,  318,  417,  373,  329,  322,  331, 1096,
 1142, 1098,  358, 1145, 1190,  330,  331, 1022, 1142,  334,
  356, 1145,  337, 1028, 1120, 1201, 1176,  350,  417,  371,
  366,  373,  378, 1120, 1039,  666,  939,  668,  669,  701,
  671,  306,  388,  308, 1176,  364, 1142,  383,  313, 1145,
  844,  367, 1176,  720,  373, 1142,  687,  367, 1145,  360,
  325,  371,  693,  386,  626,  627,  364,  367,  699,  369,
  371,  371,  696,  371,  705,  373, 1290, 1291,  663,  664,
 1176,  339,  644,  679,  767,  370,  344,  345,  373, 1176,
  348,  349,  364,  351,  352,  995,   52, 1311,  365,  422,
  423,  373,  417,  364,  371,  407,  727,  701,  391,  392,
  741,  378,  373,  371,  368,  739,  356,  748, 1051,  364,
   76,  706,  424,  425,  373,   81,  366,  339,  759,  369,
  370,  762,  344,  345,  765,  373,  459,  367,  368,  351,
  352,  371,  773,  383,  379,  380,  102,  470,  779,  370,
 1083,  107,  373,  256,  477,  364,  364,  364,  393,  394,
  370,  723,  793,  119,  373,  373,  373,  369,  105,  371,
  367,  373,  803,  110,  371,  112,  113, 1201,  115,  369,
  117,  371, 1270, 1271,  815,  141,  369,  370,  125, 1277,
  127,  369,  369,  371,  371,  373,  827,  368,  135,  830,
  417,  138,  833,  140,  160,  161,  366,  339,  788,  376,
  841,  835,  344,  345,  367,  846,  348,  349,  371,  351,
  352,  544,  367,  368,  367,  370,  371,  372,  371,  381,
  851,  168,  256, 1336, 1337,  859,  860,  261,  364,  371,
  366,  382,  367,  864,  567,  371,  371,  373,  386,  880,
  881,  836,  378,  371,  367,  373,  818,  213,  371,  821,
  284,  364, 1195,  366,  371,  368,  373,  370,  371,  397,
  373,  856,  367,  297,  369,  378,  371,  841,  302,  387,
  371,  845,  373,  307,  417,  309,  310,  311,  312,  428,
  429,  430,  431,  317,  383,  384,  385,  321,  373,  255,
  924,  257,  373,  626,  627,  888,  930,  373,  371,  333,
  373,  369,  336,  371,  338,  395,  396,  365,  366,  370,
  368,  644,  370,  371,  417,  956,  957,  367,  959,  369,
  961,  383,  365,  366,  657,  368,  337,  370,  371,  353,
  354,  389,  390,  356,  367,  369,  369,  367,  367,  305,
  369,  366,  369, 1190,  371,  417,  389,  390,  295, 1026,
  369,  409,  371,  300,  949,  367,  340,  369,  999,  373,
  418,  419,  417,  329,  330,  331,  409,  367,  373,  369,
 1011,  373, 1013,  383, 1015,  418,  419,  970,  348,  349,
  373,  971,  364,  417,  350,  975,  976,  358,  359,  368,
  723,  370,  358,  340,  353,  354,  361,  362,  373,  365,
 1041,  417,  348,  349,  348,  349,  366,  354,  980,  373,
  389,  390,  369, 1047,  417, 1051,  339, 1051,  371, 1060,
  386,  344,  345, 1051,  369,  348,  349,  369,  351,  352,
  409, 1021, 1279,  371,  767,  369,  370,  417,  417,  418,
  419,  361,  362, 1084,  901,  902, 1080, 1083,  417, 1083,
  417, 1298,  368, 1300,  370, 1083,  422,  423,  426,  427,
  432,  433,  417, 1104, 1105,  364, 1107,  372,  261,  417,
  339,  256,  256,  389,  390,  344,  345,  368, 1068,  348,
  349,  417,  351,  352,  417,  818,  369,  371,  821, 1153,
  371,  284,  369,  409,  369,  371,  378, 1161,  417, 1071,
  373,  371,  418,  419,  297,  373, 1096,  369, 1098,  302,
  369,  477,  305,  365,  307,  371,  309,  310,  311,  312,
  367,  369,  294, 1095,  317,  369,  369,  369,  321,  369,
 1120,  365,  325,  343,  373,  371,  369,  417, 1179,  417,
  333,  365,  366,  336,  368,  338,  370,  371,  373,  372,
  368,  498, 1142,  359,  366, 1145,  370,  368, 1199, 1195,
  368, 1195,  369,  356,  294,  389,  390, 1195,  371,  371,
  371,  417,  371,  366,  378,  368,  365,  370,  544,  369,
 1152, 1212,  369,  371,  370,  409, 1176,  553,  417,  369,
  383,  367,  370,  540,  418,  419,  417,  417,  564,  378,
  355,  567,  365,  366,  364,  368,  370,  370,  371,  256,
  256, 1183, 1184,  369,  280,  369,  145,  146,  147,  148,
  149,  150,  151,  152,  417,  417,  389,  390, 1296,  364,
  577, 1203,  365, 1205,  417,  364,  417,  294,  366,  294,
  417, 1272,  378,  417,  371,  357,  409,  980,  369,  417,
  367,  369, 1320, 1321,  373,  418,  419,  372,  369,    0,
  626,  627,  369,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  371,  371,  369,  369,  373,  644, 1269,
  420,  365,  256, 1314, 1274, 1316,  339,  256,  365,  367,
  346, 1281, 1282,  417,  417, 1336, 1337,  371,  350,  371,
 1290, 1291, 1333, 1334,  367,  256,  346,  369,  372,  378,
  371,  365,  372,  264,  265,  364,  267,  347,  368,  270,
  271, 1311,  256,  364,  275,  276,  277,  364,  279,  373,
  696,  265,  371,  267,  285,  347,  270,  288, 1071,  365,
  365,  275,  369,  365,  295,  279,  305,  355,  368,  300,
  417,  302,  303,  304,  288,  366,  365,  723,  417,  369,
  367,  295, 1095,  368,  368,  316,  300,  318,  319,  368,
  304,  322,  364,  739,  325,  368,  327,  364,  329,  330,
  331,  332,  316,  334,  318,  369,  337,  369,  322,  369,
  369,  372,  256,  256,  365,  365,  330,  331,  365,  339,
  334,  767,  368,  337,  344,  345,  368,    0,  348,  349,
  373,  351,  352,  369,  369,  367,  364,  368,  367, 1152,
 1153,  364,  369,  373,  369,  369,  365,  373, 1161,  365,
   53,  417,  369,    0,  364,  373,  369,  369,  373,  417,
  417,  365,  365,  364,  369,  365,  373,  365,  367,  365,
 1183, 1184,  818,  370,  365,  821,  369, 1190,  365,  417,
  411,  412,  413,  414,  415,  416,  417,  369, 1201,  835,
 1203,  369, 1205,  365,  364,  369,  365,  373,  407,  364,
  364,  369,  888,  417,   46,   91,  668, 1120, 1176,  446,
  419,  420,  421,  859,  860,  424,  425,  426,  427,  428,
  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
  439,  669, 1201, 1200,  675,  256,  257,  767,  624,  657,
  261, 1272,  794, 1267,  265,  823,  267,  823,  823,  270,
  817,  272,  273, 1334,  275, 1282,  277, 1142,  279, 1281,
  281,  282,  283,  284, 1068, 1071,  287,  288,  664, 1190,
  843,  143,  293,  975,  295,  296,  297,  576,  924,  300,
  301,  302,  759,  304,  930,  939,  307,  701,  309,  310,
  311,  312,  434,  438,  435,  316,  317,  318,  436,  439,
  321,  322,  323,  437,  567,  864, 1035, 1152, 1051,  330,
  331, 1195,  333,  334,  335,  336,  337,  338,  527,    0,
  261,  342,  213,  102, 1002, 1004,  995,  829, 1017,  633,
 1105,  542,   -1,   -1,  980, 1217,  357,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  365,  366,   -1,   -1,   -1,   -1,
  559,   -1,   -1,  374,   -1,   -1,  297,   -1,   -1,   -1,
  569,  302,   -1,   -1,  305,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,  417,  338,   -1,   -1,
   -1, 1047,   -1,   -1,   -1, 1051,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,  266,
  267,  268,   -1,  270,  271, 1071,  273,  274,  275,  276,
  277,  278,  279,  280, 1080,   -1,   -1, 1083,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295, 1095,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,  417,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,    0,
  337,   -1,   -1,  340,   -1,   -1,   -1,  344,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1, 1152, 1153,   -1,   -1,
   -1,   -1,   -1,   -1,   -1, 1161,   -1,  364,  365,   -1,
   -1,  368,   -1,   -1,   -1,   -1,  373,  374,  375,  376,
  377,   -1,   -1,   -1,  381,   -1,  383, 1183, 1184,   -1,
   -1,   -1,  389,  390,   -1,   -1,   -1,   -1,   -1, 1195,
   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1203,   -1, 1205,
   -1,   -1,   -1,   -1,  411,  412,  413,  414,  415,  416,
  417,  418,  419,   -1,  421,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,  266,  267,  268,   -1,  270,
  271,    0,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,  843,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
   -1,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  364,  365,   -1,   -1,  368,   -1,   -1,
   -1,   -1,  373,  374,  375,  376,  377,   -1,   -1,   -1,
  381,   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,  390,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  411,  412,  413,  414,  415,  416,  417,  418,  419,   -1,
  421,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  261,   -1,   -1,   -1,  265,   -1,  267,    0,   -1,  270,
   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,   -1,   -1,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,  335,  336,  337,  338,   -1,   -1,
   -1,  342,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  357,   -1,  257,   -1,
   -1,   -1,  261,   -1,  365,  366,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,
   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  417,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,   -1,  333,  334,  257,  336,  337,  338,
  261,   -1,   -1,  342,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,   -1,   -1,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,  417,   -1,
   -1,  342,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,   -1,
   -1,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,  417,  330,  331,   -1,
  333,  334,   -1,  336,  337,  338,  261,   -1,   -1,  342,
  265,  285,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,   -1,   -1,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,
   -1,   -1,  307,  327,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,  417,   -1,  256,  342,   -1,   -1,
   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  374,  375,  376,  377,   -1,  379,  380,  381,  382,  383,
  384,  385,  386,   -1,  284,  389,  390,  391,  392,  393,
  394,  395,  396,   -1,  294,   -1,   -1,  297,  298,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,  417,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,   -1,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  364,  365,   -1,  367,  368,  369,
  370,  371,  372,  373,   -1,  375,  376,   -1,  378,  379,
  380,  381,  382,  383,  384,  385,  386,  387,   -1,  389,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,   -1,  256,   -1,   -1,   -1,   -1,  417,  418,  419,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,
  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  364,   -1,   -1,   -1,  368,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,  377,   -1,   -1,   -1,  381,   -1,  383,
   -1,   -1,   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,
  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,
  340,   -1,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,  368,   -1,
   -1,   -1,   -1,  373,  374,  375,  376,  377,   -1,   -1,
   -1,  381,   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,
  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,
   -1,   -1,  368,   -1,   -1,   -1,   -1,  373,  374,  375,
  376,  377,   -1,   -1,   -1,  381,   -1,  383,   -1,   -1,
   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,   -1,
   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  364,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   -1,  373,  374,  375,  376,  377,   -1,   -1,   -1,  381,
  256,  383,   -1,   -1,   -1,  261,  262,  389,  390,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  294,   -1,
   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,  365,
  366,  367,  368,  369,  370,  371,  372,  373,   -1,  375,
  376,   -1,   -1,  379,  380,  381,  382,  383,  256,   -1,
  386,  387,   -1,  261,  262,  391,  392,  393,  394,  395,
  396,  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  410,   -1,  284,   -1,   -1,   -1,
   -1,  417,  418,  419,   -1,   -1,  294,   -1,   -1,  297,
  298,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  339,   -1,   -1,   -1,   -1,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,  360,   -1,   -1,   -1,  364,  365,  366,  367,
  368,  369,  370,  371,  372,  373,   -1,  375,  376,   -1,
   -1,  379,  380,  381,  382,  383,  256,   -1,  386,  387,
   -1,  261,  262,  391,  392,  393,  394,  395,  396,  397,
  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  410,   -1,  284,   -1,   -1,   -1,   -1,  417,
  418,  419,   -1,   -1,  294,   -1,   -1,  297,  298,   -1,
   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,
   -1,   -1,   -1,   -1,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,
  360,   -1,   -1,   -1,  364,  365,  366,  367,  368,  369,
   -1,  371,  372,  373,   -1,  375,  376,   -1,   -1,  379,
  380,  381,  382,  383,   -1,   -1,  386,  387,   -1,   -1,
   -1,  391,  392,  393,  394,  395,  396,  397,  398,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  410,   -1,  256,   -1,   -1,   -1,   -1,  417,  418,  419,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,  261,   -1,  263,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  284,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  344,   -1,  297,   -1,   -1,   -1,  261,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  315,   -1,  317,  367,  368,   -1,  321,  371,   -1,  284,
  374,  375,  376,  377,   -1,   -1,   -1,  381,  333,  383,
   -1,  336,  297,  338,   -1,  389,  390,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  256,   -1,  333,   -1,
   -1,  336,   -1,  338,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
  261,   -1,  263,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  284,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  417,   -1,  344,   -1,  297,   -1,   -1,   -1,
  261,  302,  263,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  364,  365,  317,   -1,  368,   -1,
  321,   -1,   -1,  284,  374,  375,  376,  377,   -1,   -1,
   -1,  381,  333,  383,   -1,  336,  297,  338,   -1,  389,
  390,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,
  321,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  256,   -1,  333,   -1,   -1,  336,   -1,  338,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  365,   -1,  261,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,  297,  329,  330,  331,  332,  302,  334,   -1,
   -1,  337,  307,   -1,  309,  310,  311,  312,  344,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,  368,  338,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,   -1,   -1,   -1,  381,   -1,  383,   -1,   -1,
   -1,   -1,   -1,  389,  390,   -1,  361,  362,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,  256,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,  337,   -1,  322,   -1,   -1,
   -1,   -1,  344,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   -1,   -1,  374,  375,  376,  377,   -1,   -1,   -1,  381,
  256,  383,   -1,   -1,   -1,  261,  262,  389,  390,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  294,   -1,
   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,  305,
   -1,  307,  417,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,  365,
   -1,  367,  368,  369,   -1,  371,  372,  373,   -1,  375,
  376,  256,   -1,  379,  380,  381,  382,  262,  261,   -1,
  386,  387,   -1,   -1,   -1,  391,  392,  393,  394,  395,
  396,  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,   -1,   -1,  410,   -1,   -1,   -1,   -1,  294,
   -1,  417,   -1,  298,  297,   -1,   -1,   -1,   -1,  302,
   -1,   -1,  305,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,  339,  338,   -1,   -1,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,   -1,   -1,   -1,   -1,  360,   -1,   -1,   -1,  364,
  365,   -1,  367,  368,  369,   -1,  371,  372,  373,   -1,
  375,  376,   -1,   -1,  379,  380,  381,  382,   -1,   -1,
   -1,  386,  387,   -1,   -1,  256,  391,  392,  393,  394,
  395,  396,  397,  398,  265,   -1,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,  275,  410,   -1,   -1,  279,   -1,
   -1,   -1,  417,   -1,  417,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,   -1,   -1,  257,   -1,   -1,   -1,  261,  330,
  331,   -1,  265,  334,  267,   -1,  337,  270,   -1,  272,
   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,   -1,
   -1,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,  335,  336,  337,  338,   -1,   -1,   -1,  342,
   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,
   -1,  267,  365,  366,  270,   -1,  272,   -1,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,   -1,   -1,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
  296,  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,   -1,  417,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,  335,
  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  365,
  366,  275,   -1,  277,   -1,  279,   -1,  281,   -1,   -1,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,  417,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  365,  366,  275,   -1,  277,   -1,  279,   -1,  281,
   -1,   -1,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,
  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,  417,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,
  342,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  365,  366,  275,   -1,  277,   -1,  279,
   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,  417,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  257,
   -1,   -1,  342,  261,   -1,  262,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,   -1,  365,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
   -1,  298,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,  417,  336,  337,
  338,  262,  339,   -1,  342,   -1,   -1,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,  365,  366,
  367,  368,  369,  370,  371,  372,  373,  298,  375,  376,
   -1,  378,  379,  380,  381,  382,  383,  384,  385,  386,
  387,   -1,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,   -1,   -1,   -1,  262,  339,  417,
  417,  418,  419,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,  366,  367,  368,  369,  370,
  371,  372,  373,  298,  375,  376,   -1,  378,  379,  380,
  381,  382,  383,  384,  385,  386,  387,   -1,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
   -1,   -1,   -1,  262,  339,   -1,  417,  418,  419,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  366,  367,  368,  369,  370,  371,  372,  373,  298,
  375,   -1,   -1,  378,  379,  380,  381,  382,  383,  384,
  385,  386,  387,   -1,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,   -1,   -1,   -1,  262,
  339,   -1,  417,  418,  419,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,  367,  368,
  369,  370,  371,  372,  373,  298,  375,  376,   -1,  378,
  379,  380,  381,  382,  383,  384,  385,  386,  387,   -1,
  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,   -1,   -1,   -1,  262,  339,   -1,   -1,  418,
  419,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  364,  365,   -1,  367,  368,  369,  370,  371,  372,
  373,  298,  375,  376,   -1,  378,  379,  380,  381,  382,
  383,  384,  385,  386,  387,   -1,  389,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,   -1,   -1,
   -1,  262,  339,   -1,   -1,  418,  419,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
  367,  368,  369,  370,  371,  372,  373,  298,  375,  376,
   -1,  378,  379,  380,  381,  382,  383,  384,  385,  386,
  387,   -1,  389,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,   -1,   -1,   -1,  262,  339,   -1,
   -1,  418,  419,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,  367,  368,  369,  370,
  371,  372,  373,  298,  375,  376,   -1,  378,  379,  380,
  381,  382,  383,  384,  385,  386,  387,   -1,  389,  390,
  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  418,  419,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,   -1,  368,   -1,  370,  298,   -1,  373,   -1,
  375,  376,   -1,  378,  379,  380,  381,  382,  383,  384,
  385,  386,  387,   -1,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  262,   -1,   -1,   -1,
   -1,   -1,  417,  418,  419,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,  369,  370,  371,
   -1,  373,  298,  375,  376,   -1,  378,  379,  380,  381,
  382,   -1,  384,  385,  386,  387,   -1,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,   -1,
  262,   -1,   -1,   -1,   -1,  417,  418,  419,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,  369,  370,  371,  298,   -1,   -1,  375,
  376,   -1,   -1,  379,  380,  381,  382,  383,  384,  385,
  386,  387,   -1,  389,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  418,  419,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,  366,   -1,  368,   -1,  370,  371,
   -1,   -1,   -1,  375,  376,   -1,   -1,  379,  380,  381,
  382,  383,  384,  385,  386,  387,   -1,  389,  390,  391,
  392,  393,  394,  395,  396,  397,  398,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  409,  410,  261,
   -1,  263,   -1,  265,   -1,  267,  418,  419,  270,   -1,
  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,  301,
  302,   -1,  304,   -1,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,
  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  361,
  362,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,  374,  277,   -1,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,  417,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,  365,  281,  282,  283,  284,   -1,   -1,  287,  288,
  374,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  417,  333,  334,   -1,  336,  337,  338,
   -1,   -1,   -1,  342,   -1,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,   -1,  277,   -1,  279,  365,  281,  282,  283,
  284,   -1,   -1,  287,  288,  374,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,  417,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,
  279,  365,  281,  282,  283,  284,   -1,   -1,  287,  288,
  374,   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,
   -1,  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,
   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  417,  333,  334,   -1,  336,  337,  338,
   -1,   -1,   -1,  342,   -1,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,   -1,  277,   -1,  279,  365,  281,  282,  283,
  284,   -1,   -1,  287,  288,  374,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,  417,  333,
  334,  261,  336,  337,  338,  265,   -1,  267,  342,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,
   -1,  365,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,   -1,  302,  261,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,  284,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  297,
   -1,   -1,  342,  417,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,  365,   -1,  325,   -1,   -1,
  264,  265,   -1,  267,   -1,  333,  270,  271,  336,   -1,
  338,  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,  306,   -1,   -1,   -1,   -1,  417,  295,  313,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,  337,   -1,  322,   -1,  341,   -1,   -1,
  344,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,  417,
  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,  369,   -1,  371,   -1,   -1,
  374,  375,  376,  377,   -1,   -1,   -1,  381,   -1,  383,
   -1,   -1,  369,   -1,   -1,  389,  390,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  417,  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,
  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,  288,  306,   -1,
   -1,   -1,   -1,   -1,  295,  313,   -1,   -1,  316,  300,
  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  316,  334,  318,   -1,  337,
   -1,  322,   -1,  341,   -1,   -1,  344,   -1,   -1,  330,
  331,   -1,   -1,  334,  339,   -1,  337,   -1,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  368,   -1,   -1,  371,   -1,   -1,  374,  375,  376,  377,
  365,   -1,  367,  381,  369,  383,  371,  372,  373,   -1,
   -1,  389,  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  417,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,  306,   -1,   -1,   -1,   -1,   -1,
  295,  313,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,  337,   -1,  322,   -1,  341,
   -1,   -1,  344,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   -1,   -1,  374,  375,  376,  377,   -1,   -1,   -1,  381,
   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,  390,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  417,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,  319,  320,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,  337,   -1,  322,   -1,  341,   -1,   -1,  344,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,
   -1,   -1,  368,   -1,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,   -1,   -1,   -1,  381,   -1,  383,   -1,   -1,
   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  417,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,  337,   -1,  322,
   -1,   -1,   -1,   -1,  344,   -1,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  364,  365,   -1,   -1,  368,   -1,
   -1,   -1,   -1,   -1,  374,  375,  376,  377,   -1,   -1,
   -1,  381,   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,
  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  417,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,  337,   -1,  322,   -1,   -1,   -1,   -1,
  344,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,   -1,   -1,   -1,  373,
  374,  375,  376,  377,   -1,   -1,   -1,  381,   -1,  383,
   -1,   -1,   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  417,  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,
  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,
  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  316,  334,  318,   -1,  337,
   -1,  322,   -1,   -1,   -1,   -1,  344,   -1,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  364,   -1,   -1,   -1,
  368,   -1,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
   -1,   -1,   -1,  381,   -1,  383,   -1,   -1,   -1,   -1,
   -1,  389,  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  417,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,  337,   -1,  322,   -1,   -1,
   -1,   -1,  344,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  364,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   -1,   -1,  374,  375,  376,  377,   -1,   -1,   -1,  381,
   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,  390,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  417,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,  337,   -1,  322,   -1,   -1,   -1,   -1,  344,   -1,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,  368,   -1,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,   -1,   -1,   -1,  381,   -1,  383,   -1,   -1,
   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  417,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,  337,   -1,  322,
   -1,   -1,   -1,   -1,  344,   -1,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  367,  368,   -1,
   -1,   -1,   -1,   -1,  374,  375,  376,  377,   -1,   -1,
   -1,  381,   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,
  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,  417,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  284,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,   -1,   -1,
  344,   -1,  297,   -1,   -1,   -1,  301,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  364,   -1,  317,   -1,  368,   -1,  321,   -1,   -1,   -1,
  374,  375,  376,  377,   -1,   -1,   -1,  381,  333,  383,
   -1,  336,   -1,  338,   -1,  389,  390,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,  413,
  414,  415,  416,  417,  418,  419,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,  261,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
  297,  329,  330,  331,  332,  302,  334,   -1,   -1,  337,
  307,   -1,  309,  310,  311,  312,  344,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
  368,  338,   -1,   -1,   -1,   -1,  374,  375,  376,  377,
   -1,   -1,   -1,  381,   -1,  383,   -1,   -1,   -1,   -1,
   -1,  389,  390,   -1,  361,  362,   -1,   -1,  365,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,  412,  413,  414,  415,  416,  417,
  418,  419,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
  261,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,  297,  329,  330,  331,
  332,  302,  334,   -1,   -1,  337,  307,   -1,  309,  310,
  311,  312,  344,   -1,  315,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,  368,  338,   -1,   -1,
   -1,   -1,  374,  375,  376,  377,   -1,   -1,   -1,  381,
   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,  390,   -1,
   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
  412,  413,  414,  415,  416,  417,  418,  419,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,   -1,   -1,  261,   -1,  263,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,  297,  329,  330,  331,  332,  302,  334,   -1,
   -1,  337,  307,   -1,  309,  310,  311,  312,  344,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,  368,  338,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,   -1,   -1,   -1,  381,   -1,  383,   -1,   -1,
   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,  412,  413,  414,  415,
  416,  417,  418,  419,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
   -1,   -1,  261,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,  297,  329,
  330,  331,  332,  302,  334,   -1,   -1,  337,  307,   -1,
  309,  310,  311,  312,  344,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,  368,  338,
   -1,   -1,   -1,   -1,  374,  375,  376,  377,   -1,   -1,
   -1,  381,   -1,  383,   -1,   -1,   -1,   -1,   -1,  389,
  390,   -1,  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,  261,   -1,
  263,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,  297,  329,  330,  331,  332,  302,
  334,   -1,   -1,  337,  307,   -1,  309,  310,  311,  312,
   -1,   -1,  315,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,  368,  338,   -1,   -1,   -1,   -1,
  374,  375,  376,  377,   -1,   -1,   -1,  381,   -1,  383,
   -1,   -1,   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,  412,  413,
  414,  415,  416,  417,   -1,  419,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,
  368,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,  411,  412,  413,  414,  415,  416,  417,
  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
  265,  337,  267,   -1,   -1,  270,  342,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,  361,  362,   -1,  293,   -1,
  295,  296,   -1,   -1,   -1,  300,   -1,   -1,  374,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,  272,  273,  342,  275,   -1,
  277,  417,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  265,   -1,  267,  300,   -1,  270,   -1,  304,  273,  374,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  316,
   -1,  318,  287,  288,   -1,  322,  323,   -1,  293,   -1,
  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,
  337,   -1,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,  316,  417,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,   -1,  273,  342,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,  374,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
  417,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,  265,
  337,  267,   -1,   -1,  270,  342,  272,   -1,   -1,  275,
   -1,  277,  417,  279,   -1,  281,   -1,   -1,   -1,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
  296,  265,   -1,  267,  300,   -1,  270,   -1,  304,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
  316,   -1,  318,   -1,  288,   -1,  322,  323,   -1,   -1,
   -1,  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,
  304,  337,  306,   -1,  308,   -1,  342,   -1,   -1,  313,
  417,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,  325,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,
  334,  267,   -1,  337,  270,   -1,   -1,  341,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,  366,  367,  300,   -1,   -1,   -1,  304,  265,
  306,  267,  308,   -1,  270,   -1,   -1,  313,   -1,  275,
  316,  417,  318,  279,   -1,   -1,  322,   -1,   -1,  325,
   -1,   -1,  288,   -1,  330,  331,   -1,   -1,  334,  295,
   -1,  337,   -1,   -1,  300,  341,   -1,   -1,  304,   -1,
  306,   -1,  308,  417,   -1,   -1,   -1,  313,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,  325,
  366,   -1,   -1,  369,  330,  331,   -1,  265,  334,  267,
   -1,  337,  270,   -1,   -1,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,  265,
   -1,  267,  300,  369,  270,   -1,  304,   -1,   -1,  275,
   -1,  417,   -1,  279,   -1,   -1,   -1,   -1,  316,   -1,
  318,   -1,  288,   -1,  322,   -1,   -1,   -1,   -1,  295,
   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,  337,
  306,   -1,  308,  265,  342,  267,   -1,  313,  270,   -1,
  316,  417,  318,  275,   -1,   -1,  322,  279,   -1,  325,
   -1,   -1,   -1,   -1,  330,  331,  288,  265,  334,  267,
   -1,  337,  270,  295,  272,   -1,   -1,  275,  300,   -1,
   -1,  279,  304,   -1,  306,   -1,   -1,   -1,   -1,   -1,
  288,  313,   -1,   -1,  316,   -1,  318,  295,   -1,   -1,
  322,   -1,  300,  325,  302,   -1,  304,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,  316,  417,
  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  265,  334,  267,   -1,  337,
  270,   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,  417,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
  262,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,
   -1,   -1,  322,   -1,   -1,  417,  298,   -1,   -1,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,  364,   -1,  366,  339,   -1,   -1,
   -1,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,  367,  298,  369,   -1,  371,
  372,  373,   -1,  375,  376,   -1,  378,  379,  380,  381,
  382,  383,  384,  385,  386,  387,   -1,  417,   -1,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  339,  410,  262,
   -1,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,  367,   -1,  369,   -1,  371,
  372,  373,   -1,  375,  376,  298,   -1,  379,  380,  381,
  382,  383,  384,  385,  386,  387,   -1,   -1,   -1,  391,
  392,  393,  394,  395,  396,  397,  398,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,  410,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,  298,  367,   -1,  369,   -1,  371,  372,
  373,   -1,  375,  376,   -1,   -1,  379,  380,  381,  382,
   -1,   -1,   -1,  386,  387,   -1,   -1,   -1,  391,  392,
  393,  394,  395,  396,  397,  398,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,  410,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,  367,  298,  369,   -1,  371,  372,  373,   -1,
  375,  376,   -1,   -1,  379,  380,  381,  382,   -1,   -1,
   -1,  386,  387,   -1,   -1,   -1,  391,  392,  393,  394,
  395,  396,  397,  398,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,  410,   -1,   -1,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,  298,  367,   -1,  369,   -1,  371,  372,  373,   -1,
  375,  376,   -1,   -1,  379,  380,  381,  382,   -1,   -1,
   -1,  386,  387,   -1,   -1,   -1,  391,  392,  393,  394,
  395,  396,  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,  410,   -1,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,  261,
  367,   -1,  369,   -1,  371,  372,  373,   -1,  375,  376,
   -1,   -1,  379,  380,  381,  382,   -1,   -1,   -1,  386,
  387,   -1,  284,   -1,  391,  392,  393,  394,  395,  396,
  397,  398,   -1,   -1,  261,  297,   -1,   -1,   -1,   -1,
  302,   -1,   -1,  410,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  315,   -1,  317,   -1,  284,   -1,  321,
   -1,   -1,   -1,   -1,  261,   -1,  263,   -1,   -1,   -1,
  297,  333,   -1,   -1,  336,  302,  338,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,  284,  315,   -1,
  317,   -1,   -1,   -1,  321,   -1,  261,   -1,   -1,   -1,
  297,   -1,   -1,   -1,   -1,  302,  333,   -1,   -1,  336,
  307,  338,  309,  310,  311,  312,   -1,   -1,   -1,  284,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  297,   -1,   -1,   -1,  333,  302,   -1,  336,
   -1,  338,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,  339,
   -1,  336,   -1,  338,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,   -1,  369,
   -1,  371,  372,  373,   -1,   -1,   -1,   -1,   -1,  379,
  380,  381,  382,   -1,   -1,   -1,  386,  387,   -1,   -1,
   -1,  391,  392,  393,  394,  395,  396,  397,  398,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  410,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,  367,   -1,  369,   -1,  371,  372,
  373,   -1,   -1,   -1,   -1,   -1,  379,  380,  381,  382,
   -1,   -1,   -1,  386,  387,   -1,   -1,   -1,  391,  392,
  393,  394,  395,  396,  397,  398,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,  410,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,  367,   -1,  369,   -1,  371,  372,  373,   -1,   -1,
   -1,   -1,   -1,  379,  380,  381,  382,   -1,   -1,   -1,
  386,  387,   -1,   -1,   -1,  391,  392,  393,  394,  395,
  396,  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  410,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,   -1,
  369,   -1,  371,  372,  373,   -1,   -1,   -1,   -1,   -1,
  379,  380,  381,  382,   -1,   -1,   -1,  386,  387,   -1,
   -1,   -1,   -1,   -1,  393,  394,  395,  396,  397,  398,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,  410,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,  367,   -1,  369,   -1,  371,
  372,  373,   -1,   -1,   -1,   -1,   -1,  379,  380,  381,
  382,   -1,   -1,   -1,  386,  387,   -1,   -1,   -1,   -1,
   -1,  393,  394,  395,  396,  397,  398,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,  410,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,  367,   -1,  369,   -1,  371,  372,  373,   -1,
   -1,   -1,   -1,   -1,  379,  380,  381,  382,   -1,   -1,
   -1,  386,  387,   -1,   -1,   -1,   -1,   -1,  393,  394,
  395,  396,  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,  410,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,
   -1,  369,   -1,  371,  372,  373,   -1,   -1,   -1,   -1,
   -1,  379,  380,  381,  382,   -1,   -1,   -1,  386,  387,
   -1,   -1,   -1,   -1,   -1,  393,  394,  395,  396,  397,
  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  410,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,  367,   -1,  369,   -1,
  371,  372,  373,   -1,   -1,   -1,   -1,   -1,  379,  380,
  381,  382,   -1,   -1,   -1,  386,  387,   -1,   -1,   -1,
   -1,   -1,  393,  394,  395,  396,  397,  398,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,  410,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,  367,   -1,  369,   -1,  371,  372,  373,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,  382,   -1,
   -1,   -1,  386,  387,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  395,  396,  397,  398,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,  410,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
  367,   -1,  369,   -1,  371,  372,  373,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,  386,
  387,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  395,  396,
  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,  410,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,   -1,  369,
   -1,  371,  372,  373,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  381,  382,   -1,   -1,   -1,  386,  387,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  395,  396,  397,  398,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  410,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,  367,   -1,  369,   -1,  371,  372,
  373,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  381,  382,
   -1,   -1,   -1,  386,  387,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  397,  398,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,  410,  344,  345,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,  367,   -1,  369,   -1,  371,  372,  373,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  381,  382,   -1,   -1,   -1,
  386,  387,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,  410,  344,  345,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,   -1,
  369,   -1,  371,  372,  373,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  382,   -1,   -1,   -1,  386,  387,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,  398,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,  410,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,  367,   -1,  369,   -1,  371,
  372,  373,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  382,   -1,   -1,   -1,  386,  387,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  397,  398,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,  410,  344,
  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,  367,   -1,  369,   -1,  371,  372,  373,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,   -1,   -1,
   -1,   -1,  387,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  397,  398,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,  410,  344,  345,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,
   -1,  369,   -1,  371,  372,  373,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,   -1,   -1,   -1,   -1,  387,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  397,
  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,  410,  344,  345,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  365,   -1,  367,   -1,  369,   -1,
  371,  372,  373,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  387,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  397,  398,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,  410,
  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,  367,   -1,  369,   -1,  371,  372,  373,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  387,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  397,  398,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,  410,  344,  345,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
  367,   -1,  369,   -1,  371,  372,  373,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  387,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  398,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,  410,  344,  345,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,  367,   -1,  369,
   -1,  371,  372,  373,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  387,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
  410,  344,  345,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  365,   -1,  367,   -1,  369,  339,  371,  372,
  373,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  387,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,  367,   -1,  369,   -1,  371,
  372,  373,
  };

#line 5629 "cs-parser.jay"

// <summary>
//   A class used to pass around variable declarations and constants
// </summary>
public class VariableDeclaration {
	public string identifier;
	public Expression expression_or_array_initializer;
	public Location Location;
	public Attributes OptAttributes;
	public string DocComment;

	public VariableDeclaration (LocatedToken lt, object eoai, Attributes opt_attrs)
	{
		this.identifier = lt.Value;
		if (eoai is ArrayList) {
			this.expression_or_array_initializer = new ArrayCreation (CSharpParser.current_array_type, "", (ArrayList)eoai, lt.Location);
		} else {
			this.expression_or_array_initializer = (Expression)eoai;
		}
		this.Location = lt.Location;
		this.OptAttributes = opt_attrs;
	}

	public VariableDeclaration (LocatedToken lt, object eoai) : this (lt, eoai, null)
	{
	}
}

class VariableMemberDeclaration
{
	public readonly MemberName MemberName;
	public Expression expression_or_array_initializer;
	
	public VariableMemberDeclaration (MemberName mn, object initializer)
	{
		MemberName = mn;
		
		if (initializer is ArrayList) {
			this.expression_or_array_initializer = new ArrayCreation (CSharpParser.current_array_type, "", (ArrayList)initializer, mn.Location);
		} else {
			this.expression_or_array_initializer = (Expression)initializer;
		}
	}
}


// <summary>
//  A class used to hold info about an operator declarator
// </summary>
struct OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		Report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		expr.Error_InvalidExpressionStatement ();
	}
}

static void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	Report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

static void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	Report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

static void Error_TypeExpected (Location loc)
{
	Report.Error (1031, loc, "Type expected");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (RootContext.EvalMode){
		tc.ModFlags = (tc.ModFlags & ~(Modifiers.PRIVATE|Modifiers.INTERNAL)) | Modifiers.PUBLIC;
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;

	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == RootContext.ToplevelTypes) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

Block declare_local_variables (Expression type, ArrayList variable_declarators, Location loc)
{
	Block implicit_block;
	ArrayList inits = null;

	//
	// If we are doing interactive editing, we want variable declarations
	// that are in the top block to be added instead to the class as 
	// static variables
	//
	if (RootContext.StatementMode){
		bool hoist = true;

		for (Block b = current_block; b != null; b = b.Parent){
			if (b is ExplicitBlock && !(b is ToplevelBlock)){
				// There has been an explicit block, we cant add to the class
				hoist = false;
				break;
			}
		}		
		if (hoist){
			//
			// We can use "current_block" since we know there are no explicit blocks
			//
			foreach (VariableDeclaration decl in variable_declarators){
				// We can not use the super-handy f.Initializer, because
				// multiple lines would force code to be executed out of sync
				if (decl.expression_or_array_initializer != null){
				        string id = "$" + decl.identifier;
					current_block.AddVariable (type, id, decl.Location);					

					LocalVariableReference var;
					var = new LocalVariableReferenceWithClassSideEffect (current_container, decl.identifier, current_block, id, decl.Location);
					Assign assign = new SimpleAssign (var, decl.expression_or_array_initializer, decl.Location);
					current_block.AddStatement (new StatementExpression (assign));
					assign = new SimpleAssign (new SimpleName (decl.identifier, decl.Location), var);
					current_block.AddStatement (new StatementExpression (assign));
				} else {
					Field f = new Field (current_container, (FullNamedExpression) type, Modifiers.PUBLIC | Modifiers.STATIC,
						new MemberName (decl.identifier, loc), null);
					current_container.AddField (f);

					// Register the field to be visible later as a global variable
					Evaluator.QueueField (f);
				}
			}

			return current_block;
		}
	}

	//
	// We use the `Used' property to check whether statements
	// have been added to the current block.  If so, we need
	// to create another block to contain the new declaration
	// otherwise, as an optimization, we use the same block to
	// add the declaration.
	//
	// FIXME: A further optimization is to check if the statements
	// that were added were added as part of the initialization
	// below.  In which case, no other statements have been executed
	// and we might be able to reduce the number of blocks for
	// situations like this:
	//
	// int j = 1;  int k = j + 1;
	//
	if (current_block.Used)
		implicit_block = new Block (current_block, loc, lexer.Location);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in variable_declarators){

		if (implicit_block.AddVariable (type, decl.identifier, decl.Location) != null) {
			if (decl.expression_or_array_initializer != null){
				if (inits == null)
					inits = new ArrayList (4);
				inits.Add (decl);
			}
		}
	}

	if (inits == null)
		return implicit_block;

	foreach (VariableDeclaration decl in inits){
		Assign assign;
		Expression expr = decl.expression_or_array_initializer;
		
		LocalVariableReference var;
		var = new LocalVariableReference (implicit_block, decl.identifier, loc);

		assign = new SimpleAssign (var, expr, decl.Location);

		implicit_block.AddStatement (new StatementExpression (assign));
	}
	
	return implicit_block;
}

Block declare_local_constants (Expression type, ArrayList declarators)
{
	Block implicit_block;

	if (current_block.Used)
		implicit_block = new Block (current_block);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in declarators){
		implicit_block.AddConstant (type, decl.identifier, (Expression) decl.expression_or_array_initializer, decl.Location);
	}
	
	return implicit_block;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	Report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	Report.Error (1003, l, "Syntax error, " + msg);
}

void note (string s)
{
	// Used to put annotations
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack ();
}

public CSharpParser (SeekableStreamReader reader, CompilationUnit file)
{
	if (RootContext.EvalMode)
		undo = new Undo ();

	this.file = file;
	current_namespace = new NamespaceEntry (null, file, null);
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file);
}

public void parse ()
{
	eof_token = Token.EOF;

	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof)
			UnexpectedEOF = true;
		else if (yacc_verbose_flag > 0)
		        Console.WriteLine (e);
		if (e is yyParser.yyException)
			Report.Error (-25, lexer.Location, "Parsing error");
		else 
		        Report.Error (-32, lexer.Location, "Internal compiler error during parsing, Run with -v for details");
	}
	Tokenizer tokenizer = lexer as Tokenizer;
	tokenizer.cleanup ();

	if (RootContext.ToplevelTypes.NamespaceEntry != null)
		throw new InternalErrorException ("who set it?");
}

static void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		Report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		Report.Error (error, loc, msg);
}

void CheckIdentifierToken (int yyToken, Location loc)
{
	CheckToken (1041, yyToken, "Identifier expected", loc);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

Location GetLocation (object obj)
{
	if (obj is MemberCore)
		return ((MemberCore) obj).Location;
	if (obj is MemberName)
		return ((MemberName) obj).Location;
	if (obj is LocatedToken)
		return ((LocatedToken) obj).Location;
	if (obj is Location)
		return (Location) obj;
	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null || parsing_anonymous_method) {
		current_block = new ToplevelBlock (current_block, current_local_parameters, current_generic_method, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void
start_anonymous (bool lambda, Parameters parameters, Location loc)
{
	if (RootContext.Version == LanguageVersion.ISO_1){
		Report.FeatureIsNotAvailable (loc, "anonymous methods");
	}

	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);

	current_local_parameters = parameters;

	current_anonymous_method = lambda 
		? new LambdaExpression (loc) 
		: new AnonymousMethodExpression (loc);

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ToplevelBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_local_parameters = (Parameters) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

public NamespaceEntry CurrentNamespace {
       get { 
       	   return current_namespace;
       }
}


void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	
	if (error_code == 0) {
		if (expecting == "`)'")
			error_code = 1026;
		else
			error_code = 1525;
	}
	
	if (expecting != null)
		Report.Error (error_code, lexer.Location, "Unexpected symbol `{0}', expecting {1}", 
			symbol, expecting);	  
	else
		Report.Error (error_code, lexer.Location, "Unexpected symbol `{0}'", symbol);
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	ArrayList names = new ArrayList (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL_FLOAT:
	case Token.LITERAL_INTEGER:
	case Token.LITERAL_DOUBLE:
	case Token.LITERAL_DECIMAL:
	case Token.LITERAL_CHARACTER:
	case Token.LITERAL_STRING:
		return lexer.Value.ToString ();
	case Token.IDENTIFIER:
		return ((LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "arglist";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL_FLOAT:
	case Token.LITERAL_INTEGER:
	case Token.LITERAL_DOUBLE:
	case Token.LITERAL_DECIMAL:
	case Token.LITERAL_CHARACTER:
	case Token.LITERAL_STRING:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EOF:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:	
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int JOIN = 345;
  public const int ON = 346;
  public const int EQUALS = 347;
  public const int SELECT = 348;
  public const int GROUP = 349;
  public const int BY = 350;
  public const int LET = 351;
  public const int ORDERBY = 352;
  public const int ASCENDING = 353;
  public const int DESCENDING = 354;
  public const int INTO = 355;
  public const int INTERR_NULLABLE = 356;
  public const int EXTERN_ALIAS = 357;
  public const int OP_GENERICS_LT = 358;
  public const int OP_GENERICS_LT_DECL = 359;
  public const int OP_GENERICS_GT = 360;
  public const int GET = 361;
  public const int SET = 362;
  public const int LAST_KEYWORD = 363;
  public const int OPEN_BRACE = 364;
  public const int CLOSE_BRACE = 365;
  public const int OPEN_BRACKET = 366;
  public const int CLOSE_BRACKET = 367;
  public const int OPEN_PARENS = 368;
  public const int CLOSE_PARENS = 369;
  public const int DOT = 370;
  public const int COMMA = 371;
  public const int COLON = 372;
  public const int SEMICOLON = 373;
  public const int TILDE = 374;
  public const int PLUS = 375;
  public const int MINUS = 376;
  public const int BANG = 377;
  public const int ASSIGN = 378;
  public const int OP_LT = 379;
  public const int OP_GT = 380;
  public const int BITWISE_AND = 381;
  public const int BITWISE_OR = 382;
  public const int STAR = 383;
  public const int PERCENT = 384;
  public const int DIV = 385;
  public const int CARRET = 386;
  public const int INTERR = 387;
  public const int DOUBLE_COLON = 388;
  public const int OP_INC = 389;
  public const int OP_DEC = 390;
  public const int OP_SHIFT_LEFT = 391;
  public const int OP_SHIFT_RIGHT = 392;
  public const int OP_LE = 393;
  public const int OP_GE = 394;
  public const int OP_EQ = 395;
  public const int OP_NE = 396;
  public const int OP_AND = 397;
  public const int OP_OR = 398;
  public const int OP_MULT_ASSIGN = 399;
  public const int OP_DIV_ASSIGN = 400;
  public const int OP_MOD_ASSIGN = 401;
  public const int OP_ADD_ASSIGN = 402;
  public const int OP_SUB_ASSIGN = 403;
  public const int OP_SHIFT_LEFT_ASSIGN = 404;
  public const int OP_SHIFT_RIGHT_ASSIGN = 405;
  public const int OP_AND_ASSIGN = 406;
  public const int OP_XOR_ASSIGN = 407;
  public const int OP_OR_ASSIGN = 408;
  public const int OP_PTR = 409;
  public const int OP_COALESCING = 410;
  public const int LITERAL_INTEGER = 411;
  public const int LITERAL_FLOAT = 412;
  public const int LITERAL_DOUBLE = 413;
  public const int LITERAL_DECIMAL = 414;
  public const int LITERAL_CHARACTER = 415;
  public const int LITERAL_STRING = 416;
  public const int IDENTIFIER = 417;
  public const int OPEN_PARENS_LAMBDA = 418;
  public const int OPEN_PARENS_CAST = 419;
  public const int GENERIC_DIMENSION = 420;
  public const int DEFAULT_COLON = 421;
  public const int EVAL_STATEMENT_PARSER = 422;
  public const int EVAL_COMPILATION_UNIT_PARSER = 423;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 424;
  public const int UMINUS = 425;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
