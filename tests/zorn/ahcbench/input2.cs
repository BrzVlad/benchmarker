// (c) Microsoft Corporation.  All rights reserved.

//FOLLOW["member-modifiersopt"] byte uint const sbyte double object int char void implicit ushort delegate bool long enum identifier string short explicit decimal interface ulong ~ struct class event float
//FOLLOW["interface-property-declaration"] [ byte uint sbyte new double object } int char void ushort bool long identifier string short decimal ulong event float
//FOLLOW["namespace-name"] ;
//FOLLOW["namespace-body"] ; [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["switch-sectionsopt"] }
//FOLLOW["specific-catch-clauses"] this uint do if object - } for checked char void finally break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool catch goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["null-literal"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["interface-member-declarationsopt"] }
//FOLLOW["pre-increment-expression"] + ; %= -= == >>= &= >= ^= % - = ] } /= << as is || * : / ? != <<= , < | *= ) && += >> & > ^ <= |=
//FOLLOW["specific-catch-clausesopt"] catch
//FOLLOW["stackalloc-initializer"] ; } , )
//FOLLOW["get-accessor-declaration"] [ } identifier
//FOLLOW["relational-expression"] ; == >= ] } as is || : ? != , < | ) && & > ^ <=
//FOLLOW["member-name"] { (
//FOLLOW["method-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["expression-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["fixed-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["throw-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["shift-expression"] ; == >= ] } << as is || : ? != , < | ) && >> & > ^ <=
//FOLLOW["constant-expression"] ; } : ,
//FOLLOW["named-argument"] , )
//FOLLOW["namespace-declaration"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["primary-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["namespace-or-type-name"] ; [ { == this ( >= ] } as is || * : ? != operator , < | identifier ) && & . > ^ <=
//FOLLOW["assignment-operator"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FOLLOW["array-initializer"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["do-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["attribute-list"] ] ,
//FOLLOW["attribute-name"] ( ] ,
//FOLLOW["for-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["named-argument-list"] , )
//FOLLOW["array-initializeropt"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["exclusive-or-expression"] ; ] } || : ? , | ) && ^
//FOLLOW["literal"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["conversion-operator-declarator"] ; {
//FOLLOW["foreach-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["member-access"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["attribute-target"] :
//FOLLOW["destructor-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["attribute-section"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ out struct class event [ ref byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal params ulong float
//FOLLOW["namespace-member-declaration"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["using-directive"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class using
//FOLLOW["typeof-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["struct-body"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event ; [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["attribute-sections"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ out struct class event [ ref byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal params ulong float
//FOLLOW["namespace-member-declarations"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["using-directives"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class using
//FOLLOW["additive-expression"] + ; == >= - ] } << as is || : ? != , < | ) && >> & > ^ <=
//FOLLOW["sizeof-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["unary-operator-declarator"] ; {
//FOLLOW["attribute-arguments"] ] ,
//FOLLOW["typeswitch-block"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["typeswitch-label"] this uint do if object - for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["jump-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["typeswitch-labels"] this uint do if object - for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["compilation-unit"] <EOF>
//FOLLOW["positional-argument"] , )
//FOLLOW["namespace-member-declarationsopt"] } <EOF>
//FOLLOW["typeswitch-section"] case default }
//FOLLOW["simple-name"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["using-directivesopt"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["event-accessor-declarations"] }
//FOLLOW["attribute-argumentsopt"] ] ,
//FOLLOW["typeswitch-sections"] case default }
//FOLLOW["fixed-pointer-declarator"] , )
//FOLLOW["typeswitch-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["fixed-pointer-declarators"] , )
//FOLLOW["pointer-member-access"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["attribute"] ] ,
//FOLLOW["return-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["return-type"] identifier )
//FOLLOW["declaration-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW[";opt"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["labeled-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["typeswitch-sectionsopt"] }
//FOLLOW["positional-argument-list"] , )
//FOLLOW["struct-interfaces"] {
//FOLLOW["statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["equality-expression"] ; == ] } || : ? != , | ) && & ^
//FOLLOW["attribute-target-specifier"] identifier
//FOLLOW["empty-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["unary-expression"] + ; %= -= == >>= &= >= ^= % - = ] } /= << as is || * : / ? != <<= , < | *= ) && += >> & > ^ <= |=
//FOLLOW["add-accessor-declaration"] [ } identifier
//FOLLOW["event-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["pre-decrement-expression"] + ; %= -= == >>= &= >= ^= % - = ] } /= << as is || * : / ? != <<= , < | *= ) && += >> & > ^ <= |=
//FOLLOW["integral-type"] ; [ { == this ( >= ] } as is || * : ? != operator , < | identifier ) && & > ^ <=
//FOLLOW["addressof-expression"] + ; %= -= == >>= &= >= ^= % - = ] } /= << as is || * : / ? != <<= , < | *= ) && += >> & > ^ <= |=
//FOLLOW["embedded-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["class-base"] {
//FOLLOW["for-iterator"] )
//FOLLOW["lock-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["positional-argument-listopt"] )
//FOLLOW["multiplicative-expression"] + ; == >= % - ] } << as is || * : / ? != , < | ) && >> & > ^ <=
//FOLLOW["struct-interfacesopt"] {
//FOLLOW["primary-expression-no-array-creation"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["attribute-argument-expression"] , )
//FOLLOW["attribute-target-specifieropt"] identifier
//FOLLOW["argument"] , )
//FOLLOW["class-baseopt"] {
//FOLLOW["class-body"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event ; [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["global-attributes"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["for-iteratoropt"] )
//FOLLOW["predefined-type"] .
//FOLLOW["post-increment-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["using-namespace-directive"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class using
//FOLLOW["finally-clause"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["type-name"] ; [ { == this ( >= ] } as is || * : ? != operator , < | identifier ) && & . > ^ <=
//FOLLOW["element-access"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["dim-separators"] ] ,
//FOLLOW["selection-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["overloadable-unary-operator"] (
//FOLLOW["global-attributesopt"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["pointer-type"] ; [ == this ( >= ] } as is || * : ? != operator , < | identifier ) && & > ^ <=
//FOLLOW["overloadable-binary-operator"] (
//FOLLOW["try-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["iteration-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["array-type"] ; [ { == this ( >= ] } as is || * : ? != operator , < | identifier ) && & > ^ <=
//FOLLOW["new-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["local-variable-declaration"] ; )
//FOLLOW["dim-separatorsopt"] ]
//FOLLOW["qualified-identifier"] { .
//FOLLOW["goto-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["local-constant-declaration"] ;
//FOLLOW["global-attribute-target"] :
//FOLLOW["method-body"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["constant-declarator"] ; ,
//FOLLOW["catch-clauses"] this uint do if object - } for checked char void finally break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["parenthesized-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["global-attribute-section"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["constant-declarators"] ; ,
//FOLLOW["constant-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["using-alias-directive"] [ extern sealed volatile abstract override unsafe new internal } static virtual protected delegate enum public <EOF> private interface namespace readonly struct class using
//FOLLOW["global-attribute-sections"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public <EOF> private interface namespace readonly struct class
//FOLLOW["attributes"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ out struct class event ref byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal params ulong float
//FOLLOW["break-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["for-initializer"] ;
//FOLLOW["catch-clausesopt"] finally
//FOLLOW["switch-label"] this uint do if object - for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["base-access"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["property-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["field-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["for-condition"] ;
//FOLLOW["switch-labels"] this uint do if object - for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["indexer-declarator"] {
//FOLLOW["variable-initializer"] ; } , )
//FOLLOW["attributesopt"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ out struct class event ref byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal params ulong float
//FOLLOW["for-initializeropt"] ;
//FOLLOW["indexer-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["class-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["method-header"] ; {
//FOLLOW["argument-list"] , )
//FOLLOW["remove-accessor-declaration"] [ } identifier
//FOLLOW["for-conditionopt"] ;
//FOLLOW["parameter-array"] ] )
//FOLLOW["resource-acquisition"] )
//FOLLOW["accessor-body"] [ } identifier
//FOLLOW["START"] <EOF>
//FOLLOW["switch-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["continue-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["argument-listopt"] )
//FOLLOW["enum-baseopt"] {
//FOLLOW["parameter-modifier"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FOLLOW["<s t a r t>"] <EOF>
//FOLLOW["variable-initializer-list"] } ,
//FOLLOW["variable-declarator"] ; , )
//FOLLOW["unchecked-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["using-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["struct-member-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["rank-specifier"] %= this >= ^= - = ] } is * : operator && += >> . > ^ + ; [ { -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> identifier ) & <= |=
//FOLLOW["variable-declarators"] ; , )
//FOLLOW["checked-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["unchecked-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["set-accessor-declaration"] [ } identifier
//FOLLOW["parameter-modifieropt"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FOLLOW["struct-member-declarations"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["statement-list"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["rank-specifiers"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ { -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["variable-initializer-listopt"] }
//FOLLOW["interface-base"] {
//FOLLOW["interface-body"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event ; [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["delegate-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["identifieropt"] )
//FOLLOW["block"] this volatile if internal object - for checked void finally break string-literal delegate long switch false lock continue fixed throw ! try explicit class using ; [ { -- byte case true default ( new else double real-literal int typeswitch ++ bool catch goto identifier string decimal sizeof return uint abstract override do } char * protected ushort short private interface readonly ~ base struct integer-literal event + extern sealed const unsafe sbyte static virtual while null unchecked implicit foreach enum typeof public ulong & float character-literal
//FOLLOW["struct-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["class-member-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["class-member-declarations"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["conditional-expression"] ; ] } : , )
//FOLLOW["struct-member-declarationsopt"] }
//FOLLOW["statement-listopt"] }
//FOLLOW["rank-specifiersopt"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ { -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["variable-reference"] , )
//FOLLOW["interface-baseopt"] {
//FOLLOW["fixed-parameter"] ] , )
//FOLLOW["constructor-body"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["class-member-declarationsopt"] }
//FOLLOW["interface-type-list"] { ,
//FOLLOW["interface-accessors"] }
//FOLLOW["conditional-or-expression"] ; ] } || : ? , )
//FOLLOW["fixed-parameters"] ] , )
//FOLLOW["and-expression"] ; ] } || : ? , | ) && & ^
//FOLLOW["formal-parameter-list"] ] )
//FOLLOW["type"] ; [ == this ( >= ] } as is || * : ? != operator , < | identifier ) && & > ^ <=
//FOLLOW["statement-expression"] ; , )
//FOLLOW["conditional-and-expression"] ; ] } || : ? , ) &&
//FOLLOW["interface-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["enum-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["enum-member-declaration"] } ,
//FOLLOW["this-access"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["cast-expression"] + ; %= -= == >>= &= >= ^= % - = ] } /= << as is || * : / ? != <<= , < | *= ) && += >> & > ^ <= |=
//FOLLOW["class-type"] ; [ { == this ( >= ] } as is || * : ? != operator , < | identifier ) && & > ^ <=
//FOLLOW["general-catch-clause"] this uint do if object - } for checked char void finally break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["object-delegate-creation-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["type-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["operator-declarator"] ; {
//FOLLOW["checked-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["switch-block"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["boolean-expression"] ; )
//FOLLOW["enum-member-declarations"] } ,
//FOLLOW["formal-parameter-listopt"] )
//FOLLOW["operator-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["boolean-literal"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["expression"] ; ] } : , )
//FOLLOW["constructor-declarator"] ; {
//FOLLOW["enum-base"] {
//FOLLOW["statement-expression-list"] ; , )
//FOLLOW["unmanaged-type"] [ * )
//FOLLOW["post-decrement-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["newopt"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong event float
//FOLLOW["if-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["constructor-declaration"] uint volatile abstract override internal object } char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["constructor-initializer"] ; {
//FOLLOW["enum-member-declarationsopt"] }
//FOLLOW["invocation-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["member-modifier"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ struct class event byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["binary-operator-declarator"] ; {
//FOLLOW["array-creation-expression"] %= >= ^= - = ] } is * : && += >> . > ^ + ; [ -- -= == >>= ( &= % /= << as || / ? != ++ <<= , < | *= -> ) & <= |=
//FOLLOW["switch-section"] case default }
//FOLLOW["class-type-list"] { ,
//FOLLOW["accessor-declarations"] }
//FOLLOW["member-modifiers"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ struct class event byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["interface-event-declaration"] [ byte uint sbyte new double object } int char void ushort bool long identifier string short decimal ulong event float
//FOLLOW["expressionopt"] ;
//FOLLOW["switch-sections"] case default }
//FOLLOW["enum-body"] uint volatile abstract override internal object } char void protected ushort delegate long short <EOF> explicit private interface namespace readonly ~ struct class event ; [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FOLLOW["while-statement"] this uint do if object - } for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FOLLOW["inclusive-or-expression"] ; ] } || : ? , | ) &&
//FOLLOW["interface-member-declaration"] [ byte uint sbyte new double object } int char void ushort bool long identifier string short decimal ulong event float
//FOLLOW["interface-method-declaration"] [ byte uint sbyte new double object } int char void ushort bool long identifier string short decimal ulong event float
//FOLLOW["constructor-initializeropt"] ; {
//FOLLOW["interface-member-declarations"] [ byte uint sbyte new double object } int char void ushort bool long identifier string short decimal ulong event float
//FOLLOW["interface-indexer-declaration"] [ byte uint sbyte new double object } int char void ushort bool long identifier string short decimal ulong event float
//FOLLOW["expression-list"] ] ,
//FOLLOW["assignment"] ; ] } : , )
//FOLLOW["specific-catch-clause"] this uint do if object - } for checked char void finally break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte case true default const sbyte ( new else double real-literal int typeswitch while null unchecked foreach ++ bool catch goto typeof identifier string decimal sizeof return ulong & float character-literal
//FIRST["interface-property-declaration"] [ byte uint sbyte new double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["switch-sectionsopt"] case default
//FIRST["null-literal"] null
//FIRST["interface-member-declarationsopt"] [ byte uint sbyte new double object int char void ushort bool long identifier string short decimal ulong event float
//FIRST["relational-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["member-name"] identifier
//FIRST["method-declaration"] [ byte uint extern sealed volatile abstract override unsafe sbyte new double internal object int char void static virtual protected ushort bool long identifier string public short decimal private readonly ulong float
//FIRST["expression-statement"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["throw-statement"] throw
//FIRST["constant-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["assignment-operator"] %= -= >>= &= ^= /= <<= *= += |=
//FIRST["array-initializer"] {
//FIRST["do-statement"] do
//FIRST["attribute-list"] identifier
//FIRST["attribute-name"] identifier
//FIRST["for-statement"] for
//FIRST["array-initializeropt"] {
//FIRST["conversion-operator-declarator"] implicit explicit
//FIRST["member-access"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["attribute-target"] identifier return event
//FIRST["destructor-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected public private readonly ~
//FIRST["attribute-section"] [
//FIRST["using-directive"] using
//FIRST["attribute-sections"] [
//FIRST["using-directives"] using
//FIRST["sizeof-expression"] sizeof
//FIRST["unary-operator-declarator"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["attribute-arguments"] (
//FIRST["typeswitch-block"] {
//FIRST["typeswitch-label"] case
//FIRST["typeswitch-labels"] case
//FIRST["compilation-unit"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public private interface namespace readonly struct class using
//FIRST["typeswitch-section"] case default
//FIRST["using-directivesopt"] using
//FIRST["event-accessor-declarations"] [ identifier
//FIRST["attribute-argumentsopt"] (
//FIRST["typeswitch-sections"] case default
//FIRST["fixed-pointer-declarator"] identifier
//FIRST["typeswitch-statement"] typeswitch
//FIRST["fixed-pointer-declarators"] identifier
//FIRST["return-type"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST[";opt"] ;
//FIRST["typeswitch-sectionsopt"] case default
//FIRST["statement"] this uint do if object - for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte true const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FIRST["equality-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["attribute-target-specifier"] identifier return event
//FIRST["event-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected public private readonly event
//FIRST["class-base"] :
//FIRST["lock-statement"] lock
//FIRST["attribute-argument-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["attribute-target-specifieropt"] identifier return event
//FIRST["argument"] this uint object - checked char * string-literal ushort long false short ! ~ out base integer-literal + -- ref byte true sbyte ( new double real-literal int null unchecked ++ bool typeof identifier string decimal sizeof ulong & float character-literal
//FIRST["class-baseopt"] :
//FIRST["predefined-type"] byte uint sbyte double object int char ushort bool long string short decimal ulong float
//FIRST["post-increment-expression"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["dim-separators"] ,
//FIRST["pointer-type"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["array-type"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["new-expression"] new
//FIRST["local-variable-declaration"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["dim-separatorsopt"] ,
//FIRST["goto-statement"] goto
//FIRST["catch-clauses"] catch
//FIRST["using-alias-directive"] using
//FIRST["attributes"] [
//FIRST["break-statement"] break
//FIRST["catch-clausesopt"] catch
//FIRST["for-condition"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["variable-initializer"] this uint object - checked char * string-literal ushort long false short ! ~ base integer-literal stackalloc + { -- byte true sbyte ( new double real-literal int null unchecked ++ bool typeof identifier string decimal sizeof ulong & float character-literal
//FIRST["attributesopt"] [
//FIRST["method-header"] [ byte uint extern sealed volatile abstract override unsafe sbyte new double internal object int char void static virtual protected ushort bool long identifier string public short decimal private readonly ulong float
//FIRST["for-conditionopt"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["parameter-array"] [ identifier params
//FIRST["enum-baseopt"] :
//FIRST["parameter-modifier"] ref out
//FIRST["variable-initializer-list"] this uint object - checked char * string-literal ushort long false short ! ~ base integer-literal stackalloc + { -- byte true sbyte ( new double real-literal int null unchecked ++ bool typeof identifier string decimal sizeof ulong & float character-literal
//FIRST["struct-member-declaration"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FIRST["rank-specifier"] [
//FIRST["parameter-modifieropt"] ref out
//FIRST["struct-member-declarations"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FIRST["rank-specifiers"] [
//FIRST["variable-initializer-listopt"] this uint object - checked char * string-literal ushort long false short ! ~ base integer-literal stackalloc + { -- byte true sbyte ( new double real-literal int null unchecked ++ bool typeof identifier string decimal sizeof ulong & float character-literal
//FIRST["struct-member-declarationsopt"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FIRST["rank-specifiersopt"] [
//FIRST["fixed-parameter"] [ ref byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong out float
//FIRST["constructor-body"] ; {
//FIRST["fixed-parameters"] [ ref byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong out float
//FIRST["and-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["type"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["enum-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected enum public private readonly
//FIRST["cast-expression"] (
//FIRST["class-type"] object identifier string
//FIRST["object-delegate-creation-expression"] new
//FIRST["operator-declarator"] byte uint sbyte double object int char void implicit ushort bool long identifier string short explicit decimal ulong float
//FIRST["checked-statement"] checked
//FIRST["operator-declaration"] [ byte uint extern sealed volatile abstract override unsafe sbyte new double internal object int char void static virtual implicit protected ushort bool long identifier string public short explicit decimal private readonly ulong float
//FIRST["boolean-literal"] true false
//FIRST["constructor-declarator"] identifier
//FIRST["enum-base"] :
//FIRST["constructor-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected identifier public private readonly
//FIRST["constructor-initializer"] :
//FIRST["invocation-expression"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["member-modifier"] extern sealed volatile abstract override unsafe new internal static virtual protected public private readonly
//FIRST["array-creation-expression"] new
//FIRST["class-type-list"] object identifier string
//FIRST["accessor-declarations"] [ identifier
//FIRST["member-modifiers"] extern sealed volatile abstract override unsafe new internal static virtual protected public private readonly
//FIRST["constructor-initializeropt"] :
//FIRST["specific-catch-clause"] catch
//FIRST["member-modifiersopt"] extern sealed volatile abstract override unsafe new internal static virtual protected public private readonly
//FIRST["namespace-name"] identifier
//FIRST["namespace-body"] {
//FIRST["specific-catch-clauses"] catch
//FIRST["pre-increment-expression"] ++
//FIRST["specific-catch-clausesopt"] catch
//FIRST["stackalloc-initializer"] stackalloc
//FIRST["get-accessor-declaration"] [ identifier
//FIRST["fixed-statement"] fixed
//FIRST["shift-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["named-argument"] identifier
//FIRST["namespace-declaration"] namespace
//FIRST["primary-expression"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["namespace-or-type-name"] identifier
//FIRST["named-argument-list"] identifier
//FIRST["exclusive-or-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["literal"] true real-literal string-literal null false integer-literal character-literal
//FIRST["foreach-statement"] foreach
//FIRST["namespace-member-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public private interface namespace readonly struct class
//FIRST["typeof-expression"] typeof
//FIRST["struct-body"] {
//FIRST["namespace-member-declarations"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public private interface namespace readonly struct class
//FIRST["additive-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["jump-statement"] break goto continue throw return
//FIRST["positional-argument"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["namespace-member-declarationsopt"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public private interface namespace readonly struct class
//FIRST["simple-name"] identifier
//FIRST["pointer-member-access"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["attribute"] identifier
//FIRST["return-statement"] return
//FIRST["declaration-statement"] byte uint const sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["labeled-statement"] identifier
//FIRST["positional-argument-list"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["struct-interfaces"] :
//FIRST["empty-statement"] ;
//FIRST["unary-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["add-accessor-declaration"] [ identifier
//FIRST["pre-decrement-expression"] --
//FIRST["integral-type"] byte uint sbyte int char ushort long short ulong
//FIRST["addressof-expression"] &
//FIRST["embedded-statement"] this uint do if object - for checked char break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte true sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FIRST["for-iterator"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["positional-argument-listopt"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["multiplicative-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["struct-interfacesopt"] :
//FIRST["primary-expression-no-array-creation"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["class-body"] {
//FIRST["global-attributes"] [
//FIRST["for-iteratoropt"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["using-namespace-directive"] using
//FIRST["finally-clause"] finally
//FIRST["type-name"] identifier
//FIRST["element-access"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["selection-statement"] if typeswitch switch
//FIRST["overloadable-unary-operator"] + -- true - ++ false ! ~
//FIRST["global-attributesopt"] [
//FIRST["overloadable-binary-operator"] + == >= % - << * / != < | >> & > ^ <=
//FIRST["try-statement"] try
//FIRST["iteration-statement"] do for while foreach
//FIRST["qualified-identifier"] identifier
//FIRST["local-constant-declaration"] const
//FIRST["global-attribute-target"] identifier
//FIRST["method-body"] ; {
//FIRST["constant-declarator"] identifier
//FIRST["parenthesized-expression"] (
//FIRST["global-attribute-section"] [
//FIRST["constant-declarators"] identifier
//FIRST["constant-declaration"] [ extern sealed volatile abstract override const unsafe new internal static virtual protected public private readonly
//FIRST["global-attribute-sections"] [
//FIRST["for-initializer"] + -- byte this true uint sbyte ( new double real-literal object - int checked char void * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["switch-label"] case default
//FIRST["base-access"] base
//FIRST["property-declaration"] [ byte uint extern sealed volatile abstract override unsafe sbyte new double internal object int char void static virtual protected ushort bool long identifier string public short decimal private readonly ulong float
//FIRST["field-declaration"] [ byte uint extern sealed volatile abstract override unsafe sbyte new double internal object int char void static virtual protected ushort bool long identifier string public short decimal private readonly ulong float
//FIRST["switch-labels"] case default
//FIRST["indexer-declarator"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["for-initializeropt"] + -- byte this true uint sbyte ( new double real-literal object - int checked char void * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["indexer-declaration"] [ byte uint extern sealed volatile abstract override unsafe sbyte new double internal object int char void static virtual protected ushort bool long identifier string public short decimal private readonly ulong float
//FIRST["class-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected public private readonly class
//FIRST["argument-list"] this uint object - checked char * string-literal ushort long false short ! ~ out base integer-literal + -- ref byte true sbyte ( new double real-literal int null unchecked ++ bool typeof identifier string decimal sizeof ulong & float character-literal
//FIRST["remove-accessor-declaration"] [ identifier
//FIRST["resource-acquisition"] + -- byte this true uint sbyte ( new double real-literal object - int checked char void * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["accessor-body"] ; {
//FIRST["START"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public private interface namespace readonly struct class using
//FIRST["switch-statement"] switch
//FIRST["continue-statement"] continue
//FIRST["argument-listopt"] this uint object - checked char * string-literal ushort long false short ! ~ out base integer-literal + -- ref byte true sbyte ( new double real-literal int null unchecked ++ bool typeof identifier string decimal sizeof ulong & float character-literal
//FIRST["<s t a r t>"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public private interface namespace readonly struct class using
//FIRST["variable-declarator"] identifier
//FIRST["unchecked-statement"] unchecked
//FIRST["using-statement"] using
//FIRST["variable-declarators"] identifier
//FIRST["checked-expression"] checked
//FIRST["unchecked-expression"] unchecked
//FIRST["set-accessor-declaration"] [ identifier
//FIRST["statement-list"] this uint do if object - for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte true const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FIRST["interface-base"] :
//FIRST["interface-body"] {
//FIRST["delegate-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate public private readonly
//FIRST["identifieropt"] identifier
//FIRST["block"] {
//FIRST["struct-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected public private readonly struct
//FIRST["class-member-declaration"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FIRST["class-member-declarations"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FIRST["conditional-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["statement-listopt"] this uint do if object - for checked char void break * string-literal ushort long switch false lock continue fixed short throw ! try ~ base integer-literal using + ; { -- byte true const sbyte ( new double real-literal int typeswitch while null unchecked foreach ++ bool goto typeof identifier string decimal sizeof return ulong & float character-literal
//FIRST["variable-reference"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["interface-baseopt"] :
//FIRST["class-member-declarationsopt"] uint volatile abstract override internal object char void protected ushort delegate long short explicit private interface readonly ~ struct class event [ byte extern sealed const unsafe sbyte new double int static virtual implicit bool enum identifier string public decimal ulong float
//FIRST["interface-type-list"] identifier
//FIRST["interface-accessors"] [ identifier
//FIRST["conditional-or-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["formal-parameter-list"] [ ref byte uint sbyte double object int char void ushort bool long identifier string short decimal params ulong out float
//FIRST["statement-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["conditional-and-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["interface-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected public private interface readonly
//FIRST["enum-member-declaration"] [ identifier
//FIRST["this-access"] this
//FIRST["general-catch-clause"] catch
//FIRST["type-declaration"] [ extern sealed volatile abstract override unsafe new internal static virtual protected delegate enum public private interface readonly struct class
//FIRST["switch-block"] {
//FIRST["boolean-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["enum-member-declarations"] [ identifier
//FIRST["formal-parameter-listopt"] [ ref byte uint sbyte double object int char void ushort bool long identifier string short decimal params ulong out float
//FIRST["expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["statement-expression-list"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["unmanaged-type"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["post-decrement-expression"] byte this true uint sbyte ( new double real-literal object int checked char string-literal null unchecked ushort bool long false typeof identifier string short decimal sizeof ulong base integer-literal float character-literal
//FIRST["newopt"] new
//FIRST["if-statement"] if
//FIRST["enum-member-declarationsopt"] [ identifier
//FIRST["binary-operator-declarator"] byte uint sbyte double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["switch-section"] case default
//FIRST["interface-event-declaration"] [ new event
//FIRST["expressionopt"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["switch-sections"] case default
//FIRST["enum-body"] {
//FIRST["while-statement"] while
//FIRST["inclusive-or-expression"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["interface-member-declaration"] [ byte uint sbyte new double object int char void ushort bool long identifier string short decimal ulong event float
//FIRST["interface-method-declaration"] [ byte uint sbyte new double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["interface-member-declarations"] [ byte uint sbyte new double object int char void ushort bool long identifier string short decimal ulong event float
//FIRST["interface-indexer-declaration"] [ byte uint sbyte new double object int char void ushort bool long identifier string short decimal ulong float
//FIRST["expression-list"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
//FIRST["assignment"] + -- byte this true uint sbyte ( new double real-literal object - int checked char * string-literal null unchecked ushort ++ bool long false typeof identifier string short ! decimal sizeof ulong & ~ base integer-literal float character-literal
// unreachable: "<EOF>"
public class itemSet_933 : acceptingState {
	public itemSet_933() {}
	public itemSet_933(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return rightmost.rewrite2AST();
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		if (tok.tag == "<EOF>") {
			wl.Enqueue(this);
		}
	}

} // itemSet_933

public class itemSet_151 : terminalState {
	public itemSet_151() {}
	public itemSet_151(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_253(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_274(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_275(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
		}
	}

} // itemSet_151

public class itemSet_552 : terminalState {
	public itemSet_552() {}
	public itemSet_552(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
		case "this":
		case "operator":
		case "identifier":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "+":
		case "%=":
		case "--":
		case "-=":
		case ">>=":
		case "&=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "/=":
		case "<<":
		case "/":
		case "++":
		case "<<=":
		case "*=":
		case "->":
		case "+=":
		case ">>":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("simple-name", count, tok.coord, "simple-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ":":
			s = new itemSet_642(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.shiftNonterm("simple-name", count, tok.coord, "simple-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ";":
		case "[":
		case "==":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case "&":
		case ".":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.shiftNonterm("simple-name", count, tok.coord, "simple-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_552

public class itemSet_114 : nonterminalState {
	public itemSet_114() {}
	public itemSet_114(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("return-type", count, tok.coord, "return-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "identifier":
			if (true
				) {
			s = this.below.shiftNonterm("return-type", count, tok.coord, "return-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_114

public class itemSet_267 : nonterminalState {
	public itemSet_267() {}
	public itemSet_267(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ")":
			s = new itemSet_343(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_267

public class itemSet_326 : nonterminalState {
	public itemSet_326() {}
	public itemSet_326(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression as type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression as type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_326

public class itemSet_327 : nonterminalState {
	public itemSet_327() {}
	public itemSet_327(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression is type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression is type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_327

public class itemSet_502 : nonterminalState {
	public itemSet_502() {}
	public itemSet_502(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_596(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_502

public class itemSet_564 : nonterminalState {
	public itemSet_564() {}
	public itemSet_564(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_647(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "variable-declarator": {
				bool reject = false;
				s = new itemSet_611(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "variable-declarators": {
				bool reject = false;
				s = new itemSet_648(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_564

public class itemSet_602 : nonterminalState {
	public itemSet_602() {}
	public itemSet_602(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_662(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_602

public class itemSet_618 : nonterminalState {
	public itemSet_618() {}
	public itemSet_618(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_704(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "constant-declarator": {
				bool reject = false;
				s = new itemSet_702(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "constant-declarators": {
				bool reject = false;
				s = new itemSet_703(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_618

public class itemSet_650 : nonterminalState {
	public itemSet_650() {}
	public itemSet_650(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_704(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "constant-declarator": {
				bool reject = false;
				s = new itemSet_702(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "constant-declarators": {
				bool reject = false;
				s = new itemSet_734(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_650

public class itemSet_695 : nonterminalState {
	public itemSet_695() {}
	public itemSet_695(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_753(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_695

public class itemSet_705 : nonterminalState {
	public itemSet_705() {}
	public itemSet_705(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_765(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_705

public class itemSet_736 : nonterminalState {
	public itemSet_736() {}
	public itemSet_736(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_786(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_736

public class itemSet_795 : nonterminalState {
	public itemSet_795() {}
	public itemSet_795(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_838(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_795

public class itemSet_796 : nonterminalState {
	public itemSet_796() {}
	public itemSet_796(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_839(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_796

public class itemSet_798 : nonterminalState {
	public itemSet_798() {}
	public itemSet_798(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_841(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_798

public class itemSet_810 : nonterminalState {
	public itemSet_810() {}
	public itemSet_810(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_850(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_810

public class itemSet_910 : nonterminalState {
	public itemSet_910() {}
	public itemSet_910(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_924(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_910

public class itemSet_921 : nonterminalState {
	public itemSet_921() {}
	public itemSet_921(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			s = new itemSet_919(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_921

public class itemSet_73 : nonterminalState {
	public itemSet_73() {}
	public itemSet_73(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_list(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
			s = new itemSet_89(this, tok, count);
			wl.Enqueue(s);
			break;
		case ",":
			s = new itemSet_90(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_73

public class itemSet_77 : nonterminalState {
	public itemSet_77() {}
	public itemSet_77(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_list(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
			s = new itemSet_94(this, tok, count);
			wl.Enqueue(s);
			break;
		case ",":
			s = new itemSet_95(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_77

public class itemSet_92 : terminalState {
	public itemSet_92() {}
	public itemSet_92(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_161(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		case ")":
			if (true
				) {
			s = this.shiftNonterm("positional-argument-listopt", count, tok.coord, "positional-argument-listopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "named-argument": {
				bool reject = false;
				s = new itemSet_145(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "named-argument-list": {
				bool reject = false;
				s = new itemSet_157(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "positional-argument": {
				bool reject = false;
				s = new itemSet_171(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_173(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "positional-argument-list": {
				bool reject = false;
				s = new itemSet_182(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "positional-argument-listopt": {
				bool reject = false;
				s = new itemSet_196(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "attribute-argument-expression": {
				bool reject = false;
				s = new itemSet_199(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo43 != null) {
					memo43.add(s, count);
					return null;
				} else {
					memo43 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo44 != null) {
					memo44.add(s, count);
					return null;
				} else {
					memo44 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo45 != null) {
					memo45.add(s, count);
					return null;
				} else {
					memo45 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;
	nonterminalState memo43;
	nonterminalState memo44;
	nonterminalState memo45;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
			memo43 = null;
			memo44 = null;
			memo45 = null;
		}
	}

} // itemSet_92

public class itemSet_143 : nonterminalState {
	public itemSet_143() {}
	public itemSet_143(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_shift_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<<":
			s = new itemSet_243(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">>":
			s = new itemSet_244(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : shift-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_143

public class itemSet_168 : nonterminalState {
	public itemSet_168() {}
	public itemSet_168(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_additive_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("shift-expression", count, tok.coord, "shift-expression : additive-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "+":
			s = new itemSet_282(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_283(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_168

public class itemSet_178 : nonterminalState {
	public itemSet_178() {}
	public itemSet_178(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_conditional_or_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "||":
			s = new itemSet_285(this, tok, count);
			wl.Enqueue(s);
			break;
		case "?":
			s = new itemSet_286(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "]":
		case "}":
		case ":":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("conditional-expression", count, tok.coord, "conditional-expression : conditional-or-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_178

public class itemSet_182 : nonterminalState {
	public itemSet_182() {}
	public itemSet_182(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_positional_argument_list(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
			s = new itemSet_289(this, tok, count);
			wl.Enqueue(s);
			break;
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("positional-argument-listopt", count, tok.coord, "positional-argument-listopt : positional-argument-list", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_182

public class itemSet_185 : nonterminalState {
	public itemSet_185() {}
	public itemSet_185(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_equality_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "==":
			s = new itemSet_293(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!=":
			s = new itemSet_294(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "]":
		case "}":
		case "||":
		case ":":
		case "?":
		case ",":
		case "|":
		case ")":
		case "&&":
		case "&":
		case "^":
			if (true
				) {
			s = this.below.shiftNonterm("and-expression", count, tok.coord, "and-expression : equality-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_185

public class itemSet_268 : nonterminalState {
	public itemSet_268() {}
	public itemSet_268(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
			s = new itemSet_344(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-=":
			s = new itemSet_345(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">>=":
			s = new itemSet_346(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&=":
			s = new itemSet_348(this, tok, count);
			wl.Enqueue(s);
			break;
		case "^=":
			s = new itemSet_349(this, tok, count);
			wl.Enqueue(s);
			break;
		case "=":
			s = new itemSet_350(this, tok, count);
			wl.Enqueue(s);
			break;
		case "/=":
			s = new itemSet_351(this, tok, count);
			wl.Enqueue(s);
			break;
		case "<<=":
			s = new itemSet_352(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*=":
			s = new itemSet_353(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+=":
			s = new itemSet_354(this, tok, count);
			wl.Enqueue(s);
			break;
		case "|=":
			s = new itemSet_355(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "%":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("multiplicative-expression", count, tok.coord, "multiplicative-expression : unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "assignment-operator": {
				bool reject = false;
				s = new itemSet_347(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_268

public class itemSet_325 : nonterminalState {
	public itemSet_325() {}
	public itemSet_325(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_shift_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<<":
			s = new itemSet_243(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">>":
			s = new itemSet_244(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression >= shift-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_325

public class itemSet_328 : nonterminalState {
	public itemSet_328() {}
	public itemSet_328(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_shift_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<<":
			s = new itemSet_243(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">>":
			s = new itemSet_244(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression < shift-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_328

public class itemSet_329 : nonterminalState {
	public itemSet_329() {}
	public itemSet_329(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_shift_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<<":
			s = new itemSet_243(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">>":
			s = new itemSet_244(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression > shift-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_329

public class itemSet_330 : nonterminalState {
	public itemSet_330() {}
	public itemSet_330(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_shift_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<<":
			s = new itemSet_243(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">>":
			s = new itemSet_244(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("relational-expression", count, tok.coord, "relational-expression : relational-expression <= shift-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_330

public class itemSet_331 : nonterminalState {
	public itemSet_331() {}
	public itemSet_331(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_additive_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("shift-expression", count, tok.coord, "shift-expression : shift-expression << additive-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "+":
			s = new itemSet_282(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_283(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_331

public class itemSet_332 : nonterminalState {
	public itemSet_332() {}
	public itemSet_332(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_additive_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "==":
		case ">=":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("shift-expression", count, tok.coord, "shift-expression : shift-expression >> additive-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "+":
			s = new itemSet_282(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_283(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_332

public class itemSet_371 : nonterminalState {
	public itemSet_371() {}
	public itemSet_371(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_equality_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "]":
		case "}":
		case "||":
		case ":":
		case "?":
		case ",":
		case "|":
		case ")":
		case "&&":
		case "&":
		case "^":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("and-expression", count, tok.coord, "and-expression : and-expression & equality-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "==":
			s = new itemSet_293(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!=":
			s = new itemSet_294(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_371

public class itemSet_390 : nonterminalState {
	public itemSet_390() {}
	public itemSet_390(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_fixed_parameters(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
			s = new itemSet_473(this, tok, count);
			wl.Enqueue(s);
			break;
		case "]":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("formal-parameter-list", count, tok.coord, "formal-parameter-list : fixed-parameters", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_390

public class itemSet_396 : nonterminalState {
	public itemSet_396() {}
	public itemSet_396(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_enum_member_declarations(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
			s = new itemSet_475(this, tok, count);
			wl.Enqueue(s);
			break;
		case "}":
			if (true
				) {
			s = this.below.shiftNonterm("enum-member-declarationsopt", count, tok.coord, "enum-member-declarationsopt : enum-member-declarations", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_396

public class itemSet_455 : nonterminalState {
	public itemSet_455() {}
	public itemSet_455(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_variable_initializer_list(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
			s = new itemSet_495(this, tok, count);
			wl.Enqueue(s);
			break;
		case "}":
			if (true
				) {
			s = this.below.shiftNonterm("variable-initializer-listopt", count, tok.coord, "variable-initializer-listopt : variable-initializer-list", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_455

public class itemSet_550 : terminalState {
	public itemSet_550() {}
	public itemSet_550(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "case":
			s = new itemSet_639(this, tok, count);
			wl.Enqueue(s);
			break;
		case "default":
			s = new itemSet_640(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_641(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_550

public class itemSet_718 : nonterminalState {
	public itemSet_718() {}
	public itemSet_718(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_specific_catch_clauses(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "catch":
			s = new itemSet_721(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("specific-catch-clausesopt", count, tok.coord, "specific-catch-clausesopt : specific-catch-clauses", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "this":
		case "uint":
		case "do":
		case "if":
		case "object":
		case "-":
		case "}":
		case "for":
		case "checked":
		case "char":
		case "void":
		case "finally":
		case "break":
		case "*":
		case "string-literal":
		case "ushort":
		case "long":
		case "switch":
		case "false":
		case "lock":
		case "continue":
		case "fixed":
		case "short":
		case "throw":
		case "!":
		case "try":
		case "~":
		case "base":
		case "integer-literal":
		case "using":
		case "+":
		case ";":
		case "{":
		case "--":
		case "byte":
		case "case":
		case "true":
		case "default":
		case "const":
		case "sbyte":
		case "(":
		case "new":
		case "else":
		case "double":
		case "real-literal":
		case "int":
		case "typeswitch":
		case "while":
		case "null":
		case "unchecked":
		case "foreach":
		case "++":
		case "bool":
		case "goto":
		case "typeof":
		case "identifier":
		case "string":
		case "decimal":
		case "sizeof":
		case "return":
		case "ulong":
		case "&":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("catch-clauses", count, tok.coord, "catch-clauses : specific-catch-clauses", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "specific-catch-clause": {
				bool reject = false;
				s = new itemSet_775(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_718

public class itemSet_275 : nonterminalState {
	public itemSet_275() {}
	public itemSet_275(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_360(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_359(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_275

public class itemSet_609 : terminalState {
	public itemSet_609() {}
	public itemSet_609(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "=":
			s = new itemSet_691(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
		case "==":
		case "this":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case "<":
		case "|":
		case "identifier":
		case "&&":
		case "&":
		case ".":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "{":
		case "(":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.shiftNonterm("member-name", count, tok.coord, "member-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ";":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("variable-declarator", count, tok.coord, "variable-declarator : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_609

public class itemSet_614 : nonterminalState {
	public itemSet_614() {}
	public itemSet_614(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_609(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "member-name": {
				bool reject = false;
				s = new itemSet_696(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_605(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "variable-declarator": {
				bool reject = false;
				s = new itemSet_611(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "variable-declarators": {
				bool reject = false;
				s = new itemSet_697(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
		}
	}

} // itemSet_614

public class itemSet_899 : nonterminalState {
	public itemSet_899() {}
	public itemSet_899(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_918(this, tok, count);
			wl.Enqueue(s);
			break;
		case ":":
			s = new itemSet_919(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_899

public class itemSet_197 : nonterminalState {
	public itemSet_197() {}
	public itemSet_197(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_multiplicative_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%":
			s = new itemSet_297(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_298(this, tok, count);
			wl.Enqueue(s);
			break;
		case "/":
			s = new itemSet_299(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("additive-expression", count, tok.coord, "additive-expression : multiplicative-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_197

public class itemSet_367 : nonterminalState {
	public itemSet_367() {}
	public itemSet_367(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_multiplicative_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%":
			s = new itemSet_297(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_298(this, tok, count);
			wl.Enqueue(s);
			break;
		case "/":
			s = new itemSet_299(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("additive-expression", count, tok.coord, "additive-expression : additive-expression + multiplicative-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_367

public class itemSet_368 : nonterminalState {
	public itemSet_368() {}
	public itemSet_368(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_multiplicative_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%":
			s = new itemSet_297(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_298(this, tok, count);
			wl.Enqueue(s);
			break;
		case "/":
			s = new itemSet_299(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("additive-expression", count, tok.coord, "additive-expression : additive-expression - multiplicative-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_368

public class itemSet_402 : nonterminalState {
	public itemSet_402() {}
	public itemSet_402(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attributesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "new":
			s = new itemSet_478(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
		case "uint":
		case "sbyte":
		case "double":
		case "object":
		case "int":
		case "char":
		case "void":
		case "ushort":
		case "bool":
		case "long":
		case "identifier":
		case "string":
		case "short":
		case "decimal":
		case "ulong":
		case "event":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("newopt", count, tok.coord, "newopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "newopt": {
				bool reject = false;
				s = new itemSet_479(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_402

public class itemSet_479 : nonterminalState {
	public itemSet_479() {}
	public itemSet_479(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_newopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_105(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "event":
			s = new itemSet_511(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "return-type": {
				bool reject = false;
				s = new itemSet_509(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_510(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
		}
	}

} // itemSet_479

public class itemSet_510 : nonterminalState {
	public itemSet_510() {}
	public itemSet_510(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "this":
			s = new itemSet_600(this, tok, count);
			wl.Enqueue(s);
			break;
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("return-type", count, tok.coord, "return-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "identifier":
			s = new itemSet_601(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("return-type", count, tok.coord, "return-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_510

public class itemSet_23 : nonterminalState {
	public itemSet_23() {}
	public itemSet_23(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attributesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "volatile":
			s = new itemSet_51(this, tok, count);
			wl.Enqueue(s);
			break;
		case "abstract":
			s = new itemSet_52(this, tok, count);
			wl.Enqueue(s);
			break;
		case "override":
			s = new itemSet_53(this, tok, count);
			wl.Enqueue(s);
			break;
		case "internal":
			s = new itemSet_56(this, tok, count);
			wl.Enqueue(s);
			break;
		case "protected":
			s = new itemSet_59(this, tok, count);
			wl.Enqueue(s);
			break;
		case "private":
			s = new itemSet_63(this, tok, count);
			wl.Enqueue(s);
			break;
		case "readonly":
			s = new itemSet_64(this, tok, count);
			wl.Enqueue(s);
			break;
		case "extern":
			s = new itemSet_49(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sealed":
			s = new itemSet_50(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unsafe":
			s = new itemSet_54(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_55(this, tok, count);
			wl.Enqueue(s);
			break;
		case "static":
			s = new itemSet_57(this, tok, count);
			wl.Enqueue(s);
			break;
		case "virtual":
			s = new itemSet_58(this, tok, count);
			wl.Enqueue(s);
			break;
		case "public":
			s = new itemSet_62(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
		case "uint":
		case "const":
		case "sbyte":
		case "double":
		case "object":
		case "int":
		case "char":
		case "void":
		case "implicit":
		case "ushort":
		case "delegate":
		case "bool":
		case "long":
		case "enum":
		case "identifier":
		case "string":
		case "short":
		case "explicit":
		case "decimal":
		case "interface":
		case "ulong":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("member-modifiersopt", count, tok.coord, "member-modifiersopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "member-modifiersopt": {
				bool reject = false;
				s = new itemSet_48(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "member-modifier": {
				bool reject = false;
				s = new itemSet_60(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "member-modifiers": {
				bool reject = false;
				s = new itemSet_61(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_23

public class itemSet_44 : terminalState {
	public itemSet_44() {}
	public itemSet_44(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			if (true
				&& ((terminalState)this).terminal.str =="type"
				) {
			s = this.below.shiftNonterm("attribute-target", count, tok.coord, "attribute-target : identifier===type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				&& ((terminalState)this).terminal.str =="param"
				) {
			s = this.below.shiftNonterm("attribute-target", count, tok.coord, "attribute-target : identifier===param", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				&& ((terminalState)this).terminal.str =="field"
				) {
			s = this.below.shiftNonterm("attribute-target", count, tok.coord, "attribute-target : identifier===field", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				&& ((terminalState)this).terminal.str =="method"
				) {
			s = this.below.shiftNonterm("attribute-target", count, tok.coord, "attribute-target : identifier===method", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				&& ((terminalState)this).terminal.str =="property"
				) {
			s = this.below.shiftNonterm("attribute-target", count, tok.coord, "attribute-target : identifier===property", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_44

public class itemSet_48 : nonterminalState {
	public itemSet_48() {}
	public itemSet_48(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_member_modifiersopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "delegate":
			s = new itemSet_79(this, tok, count);
			wl.Enqueue(s);
			break;
		case "enum":
			s = new itemSet_80(this, tok, count);
			wl.Enqueue(s);
			break;
		case "interface":
			s = new itemSet_81(this, tok, count);
			wl.Enqueue(s);
			break;
		case "struct":
			s = new itemSet_82(this, tok, count);
			wl.Enqueue(s);
			break;
		case "class":
			s = new itemSet_83(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_48

public class itemSet_410 : nonterminalState {
	public itemSet_410() {}
	public itemSet_410(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attributesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "volatile":
			s = new itemSet_51(this, tok, count);
			wl.Enqueue(s);
			break;
		case "abstract":
			s = new itemSet_52(this, tok, count);
			wl.Enqueue(s);
			break;
		case "override":
			s = new itemSet_53(this, tok, count);
			wl.Enqueue(s);
			break;
		case "internal":
			s = new itemSet_56(this, tok, count);
			wl.Enqueue(s);
			break;
		case "protected":
			s = new itemSet_59(this, tok, count);
			wl.Enqueue(s);
			break;
		case "private":
			s = new itemSet_63(this, tok, count);
			wl.Enqueue(s);
			break;
		case "readonly":
			s = new itemSet_64(this, tok, count);
			wl.Enqueue(s);
			break;
		case "extern":
			s = new itemSet_49(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sealed":
			s = new itemSet_50(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unsafe":
			s = new itemSet_54(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_55(this, tok, count);
			wl.Enqueue(s);
			break;
		case "static":
			s = new itemSet_57(this, tok, count);
			wl.Enqueue(s);
			break;
		case "virtual":
			s = new itemSet_58(this, tok, count);
			wl.Enqueue(s);
			break;
		case "public":
			s = new itemSet_62(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
		case "uint":
		case "const":
		case "sbyte":
		case "double":
		case "object":
		case "int":
		case "char":
		case "void":
		case "implicit":
		case "ushort":
		case "delegate":
		case "bool":
		case "long":
		case "enum":
		case "identifier":
		case "string":
		case "short":
		case "explicit":
		case "decimal":
		case "interface":
		case "ulong":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("member-modifiersopt", count, tok.coord, "member-modifiersopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "member-modifiersopt": {
				bool reject = false;
				s = new itemSet_482(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "member-modifier": {
				bool reject = false;
				s = new itemSet_60(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "member-modifiers": {
				bool reject = false;
				s = new itemSet_61(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_410

public class itemSet_482 : nonterminalState {
	public itemSet_482() {}
	public itemSet_482(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_member_modifiersopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "delegate":
			s = new itemSet_79(this, tok, count);
			wl.Enqueue(s);
			break;
		case "enum":
			s = new itemSet_80(this, tok, count);
			wl.Enqueue(s);
			break;
		case "interface":
			s = new itemSet_81(this, tok, count);
			wl.Enqueue(s);
			break;
		case "struct":
			s = new itemSet_82(this, tok, count);
			wl.Enqueue(s);
			break;
		case "class":
			s = new itemSet_83(this, tok, count);
			wl.Enqueue(s);
			break;
		case "const":
			s = new itemSet_518(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_105(this, tok, count);
			wl.Enqueue(s);
			break;
		case "implicit":
			s = new itemSet_520(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_523(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "explicit":
			s = new itemSet_514(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "event":
			s = new itemSet_515(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "return-type": {
				bool reject = false;
				s = new itemSet_512(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_513(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "indexer-declarator": {
				bool reject = false;
				s = new itemSet_516(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "operator-declarator": {
				bool reject = false;
				s = new itemSet_517(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "constructor-declarator": {
				bool reject = false;
				s = new itemSet_519(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "binary-operator-declarator": {
				bool reject = false;
				s = new itemSet_521(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conversion-operator-declarator": {
				bool reject = false;
				s = new itemSet_522(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "unary-operator-declarator": {
				bool reject = false;
				s = new itemSet_524(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
		}
	}

} // itemSet_482

public class itemSet_426 : nonterminalState {
	public itemSet_426() {}
	public itemSet_426(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attributesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "volatile":
			s = new itemSet_51(this, tok, count);
			wl.Enqueue(s);
			break;
		case "abstract":
			s = new itemSet_52(this, tok, count);
			wl.Enqueue(s);
			break;
		case "override":
			s = new itemSet_53(this, tok, count);
			wl.Enqueue(s);
			break;
		case "internal":
			s = new itemSet_56(this, tok, count);
			wl.Enqueue(s);
			break;
		case "protected":
			s = new itemSet_59(this, tok, count);
			wl.Enqueue(s);
			break;
		case "private":
			s = new itemSet_63(this, tok, count);
			wl.Enqueue(s);
			break;
		case "readonly":
			s = new itemSet_64(this, tok, count);
			wl.Enqueue(s);
			break;
		case "extern":
			s = new itemSet_49(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sealed":
			s = new itemSet_50(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unsafe":
			s = new itemSet_54(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_55(this, tok, count);
			wl.Enqueue(s);
			break;
		case "static":
			s = new itemSet_57(this, tok, count);
			wl.Enqueue(s);
			break;
		case "virtual":
			s = new itemSet_58(this, tok, count);
			wl.Enqueue(s);
			break;
		case "public":
			s = new itemSet_62(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
		case "uint":
		case "const":
		case "sbyte":
		case "double":
		case "object":
		case "int":
		case "char":
		case "void":
		case "implicit":
		case "ushort":
		case "delegate":
		case "bool":
		case "long":
		case "enum":
		case "identifier":
		case "string":
		case "short":
		case "explicit":
		case "decimal":
		case "interface":
		case "ulong":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("member-modifiersopt", count, tok.coord, "member-modifiersopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "member-modifiersopt": {
				bool reject = false;
				s = new itemSet_490(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "member-modifier": {
				bool reject = false;
				s = new itemSet_60(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "member-modifiers": {
				bool reject = false;
				s = new itemSet_61(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_426

public class itemSet_490 : nonterminalState {
	public itemSet_490() {}
	public itemSet_490(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_member_modifiersopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "delegate":
			s = new itemSet_79(this, tok, count);
			wl.Enqueue(s);
			break;
		case "enum":
			s = new itemSet_80(this, tok, count);
			wl.Enqueue(s);
			break;
		case "interface":
			s = new itemSet_81(this, tok, count);
			wl.Enqueue(s);
			break;
		case "struct":
			s = new itemSet_82(this, tok, count);
			wl.Enqueue(s);
			break;
		case "class":
			s = new itemSet_83(this, tok, count);
			wl.Enqueue(s);
			break;
		case "const":
			s = new itemSet_518(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_105(this, tok, count);
			wl.Enqueue(s);
			break;
		case "implicit":
			s = new itemSet_520(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_523(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "explicit":
			s = new itemSet_514(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_588(this, tok, count);
			wl.Enqueue(s);
			break;
		case "event":
			s = new itemSet_515(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "return-type": {
				bool reject = false;
				s = new itemSet_512(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_513(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "indexer-declarator": {
				bool reject = false;
				s = new itemSet_516(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "operator-declarator": {
				bool reject = false;
				s = new itemSet_517(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "constructor-declarator": {
				bool reject = false;
				s = new itemSet_519(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "binary-operator-declarator": {
				bool reject = false;
				s = new itemSet_521(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conversion-operator-declarator": {
				bool reject = false;
				s = new itemSet_522(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "unary-operator-declarator": {
				bool reject = false;
				s = new itemSet_524(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
		}
	}

} // itemSet_490

public class itemSet_147 : nonterminalState {
	public itemSet_147() {}
	public itemSet_147(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_primary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			s = new itemSet_251(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_246(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_247(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_248(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_249(this, tok, count);
			wl.Enqueue(s);
			break;
		case "->":
			s = new itemSet_250(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : primary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_147

public class itemSet_139 : nonterminalState {
	public itemSet_139() {}
	public itemSet_139(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_relational_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "==":
		case "]":
		case "}":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "|":
		case ")":
		case "&&":
		case "&":
		case "^":
			if (true
				) {
			s = this.below.shiftNonterm("equality-expression", count, tok.coord, "equality-expression : relational-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ">=":
			s = new itemSet_236(this, tok, count);
			wl.Enqueue(s);
			break;
		case "as":
			s = new itemSet_237(this, tok, count);
			wl.Enqueue(s);
			break;
		case "is":
			s = new itemSet_238(this, tok, count);
			wl.Enqueue(s);
			break;
		case "<":
			s = new itemSet_239(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">":
			s = new itemSet_240(this, tok, count);
			wl.Enqueue(s);
			break;
		case "<=":
			s = new itemSet_241(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_139

public class itemSet_377 : nonterminalState {
	public itemSet_377() {}
	public itemSet_377(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_relational_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ">=":
			s = new itemSet_236(this, tok, count);
			wl.Enqueue(s);
			break;
		case "as":
			s = new itemSet_237(this, tok, count);
			wl.Enqueue(s);
			break;
		case "is":
			s = new itemSet_238(this, tok, count);
			wl.Enqueue(s);
			break;
		case "<":
			s = new itemSet_239(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">":
			s = new itemSet_240(this, tok, count);
			wl.Enqueue(s);
			break;
		case "<=":
			s = new itemSet_241(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "==":
		case "]":
		case "}":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "|":
		case ")":
		case "&&":
		case "&":
		case "^":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("equality-expression", count, tok.coord, "equality-expression : equality-expression == relational-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_377

public class itemSet_378 : nonterminalState {
	public itemSet_378() {}
	public itemSet_378(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_relational_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ">=":
			s = new itemSet_236(this, tok, count);
			wl.Enqueue(s);
			break;
		case "as":
			s = new itemSet_237(this, tok, count);
			wl.Enqueue(s);
			break;
		case "is":
			s = new itemSet_238(this, tok, count);
			wl.Enqueue(s);
			break;
		case "<":
			s = new itemSet_239(this, tok, count);
			wl.Enqueue(s);
			break;
		case ">":
			s = new itemSet_240(this, tok, count);
			wl.Enqueue(s);
			break;
		case "<=":
			s = new itemSet_241(this, tok, count);
			wl.Enqueue(s);
			break;
		case ";":
		case "==":
		case "]":
		case "}":
		case "||":
		case ":":
		case "?":
		case "!=":
		case ",":
		case "|":
		case ")":
		case "&&":
		case "&":
		case "^":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("equality-expression", count, tok.coord, "equality-expression : equality-expression != relational-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_378

public class itemSet_513 : nonterminalState {
	public itemSet_513() {}
	public itemSet_513(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "this":
			s = new itemSet_606(this, tok, count);
			wl.Enqueue(s);
			break;
		case "operator":
			s = new itemSet_608(this, tok, count);
			wl.Enqueue(s);
			break;
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("return-type", count, tok.coord, "return-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "*":
			if (true
				) {
			s = this.below.shiftNonterm("unmanaged-type", count, tok.coord, "unmanaged-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "identifier":
			s = new itemSet_609(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.below.shiftNonterm("return-type", count, tok.coord, "return-type : type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "member-name": {
				bool reject = false;
				s = new itemSet_607(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_610(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "variable-declarator": {
				bool reject = false;
				s = new itemSet_611(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_219(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "variable-declarators": {
				bool reject = false;
				s = new itemSet_612(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
		}
	}

} // itemSet_513

public class itemSet_2 : nonterminalState {
	public itemSet_2() {}
	public itemSet_2(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_compilation_unit(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<EOF>":
			if (true
				) {
			s = this.below.shiftNonterm("START", count, tok.coord, "START : compilation-unit", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_2

public class itemSet_39 : terminalState {
	public itemSet_39() {}
	public itemSet_39(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_69(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_39

public class itemSet_69 : terminalState {
	public itemSet_69() {}
	public itemSet_69(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ".":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : namespace-or-type-name . identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_69

public class itemSet_71 : terminalState {
	public itemSet_71() {}
	public itemSet_71(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ".":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-or-type-name", count, tok.coord, "namespace-or-type-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_71

public class itemSet_99 : nonterminalState {
	public itemSet_99() {}
	public itemSet_99(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_integral_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : integral-type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_99

public class itemSet_100 : terminalState {
	public itemSet_100() {}
	public itemSet_100(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : sbyte", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_100

public class itemSet_108 : terminalState {
	public itemSet_108() {}
	public itemSet_108(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : bool", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_108

public class itemSet_115 : terminalState {
	public itemSet_115() {}
	public itemSet_115(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : decimal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_115

public class itemSet_96 : terminalState {
	public itemSet_96() {}
	public itemSet_96(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : byte", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_96

public class itemSet_97 : terminalState {
	public itemSet_97() {}
	public itemSet_97(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : uint", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_97

public class itemSet_98 : nonterminalState {
	public itemSet_98() {}
	public itemSet_98(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_array_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : array-type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_98

public class itemSet_101 : terminalState {
	public itemSet_101() {}
	public itemSet_101(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : double", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_101

public class itemSet_102 : terminalState {
	public itemSet_102() {}
	public itemSet_102(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("class-type", count, tok.coord, "class-type : object", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_102

public class itemSet_103 : terminalState {
	public itemSet_103() {}
	public itemSet_103(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : int", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_103

public class itemSet_104 : terminalState {
	public itemSet_104() {}
	public itemSet_104(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : char", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_104

public class itemSet_107 : terminalState {
	public itemSet_107() {}
	public itemSet_107(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : ushort", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_107

public class itemSet_109 : terminalState {
	public itemSet_109() {}
	public itemSet_109(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : long", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_109

public class itemSet_111 : terminalState {
	public itemSet_111() {}
	public itemSet_111(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("class-type", count, tok.coord, "class-type : string", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_111

public class itemSet_112 : nonterminalState {
	public itemSet_112() {}
	public itemSet_112(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type_name(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("class-type", count, tok.coord, "class-type : type-name", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_112

public class itemSet_113 : terminalState {
	public itemSet_113() {}
	public itemSet_113(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : short", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_113

public class itemSet_116 : terminalState {
	public itemSet_116() {}
	public itemSet_116(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("integral-type", count, tok.coord, "integral-type : ulong", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_116

public class itemSet_118 : terminalState {
	public itemSet_118() {}
	public itemSet_118(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : float", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_118

public class itemSet_119 : nonterminalState {
	public itemSet_119() {}
	public itemSet_119(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : class-type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_119

public class itemSet_130 : terminalState {
	public itemSet_130() {}
	public itemSet_130(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("this-access", count, tok.coord, "this-access : this", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_130

public class itemSet_131 : nonterminalState {
	public itemSet_131() {}
	public itemSet_131(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_new_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : new-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_131

public class itemSet_132 : nonterminalState {
	public itemSet_132() {}
	public itemSet_132(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_null_literal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("literal", count, tok.coord, "literal : null-literal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_132

public class itemSet_133 : terminalState {
	public itemSet_133() {}
	public itemSet_133(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : object", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_133

public class itemSet_135 : terminalState {
	public itemSet_135() {}
	public itemSet_135(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_235(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_135

public class itemSet_137 : terminalState {
	public itemSet_137() {}
	public itemSet_137(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("literal", count, tok.coord, "literal : string-literal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_137

public class itemSet_138 : nonterminalState {
	public itemSet_138() {}
	public itemSet_138(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_parenthesized_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : parenthesized-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_138

public class itemSet_140 : terminalState {
	public itemSet_140() {}
	public itemSet_140(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : long", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_140

public class itemSet_141 : terminalState {
	public itemSet_141() {}
	public itemSet_141(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("boolean-literal", count, tok.coord, "boolean-literal : false", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_141

public class itemSet_144 : nonterminalState {
	public itemSet_144() {}
	public itemSet_144(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_base_access(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : base-access", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_144

public class itemSet_148 : terminalState {
	public itemSet_148() {}
	public itemSet_148(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : byte", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_148

public class itemSet_149 : terminalState {
	public itemSet_149() {}
	public itemSet_149(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("boolean-literal", count, tok.coord, "boolean-literal : true", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_149

public class itemSet_152 : terminalState {
	public itemSet_152() {}
	public itemSet_152(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : double", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_152

public class itemSet_153 : terminalState {
	public itemSet_153() {}
	public itemSet_153(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("literal", count, tok.coord, "literal : real-literal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_153

public class itemSet_154 : terminalState {
	public itemSet_154() {}
	public itemSet_154(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : int", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_154

public class itemSet_156 : terminalState {
	public itemSet_156() {}
	public itemSet_156(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : bool", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_156

public class itemSet_159 : nonterminalState {
	public itemSet_159() {}
	public itemSet_159(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_literal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : literal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_159

public class itemSet_160 : nonterminalState {
	public itemSet_160() {}
	public itemSet_160(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_member_access(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : member-access", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_160

public class itemSet_162 : terminalState {
	public itemSet_162() {}
	public itemSet_162(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : string", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_162

public class itemSet_163 : terminalState {
	public itemSet_163() {}
	public itemSet_163(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : decimal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_163

public class itemSet_165 : nonterminalState {
	public itemSet_165() {}
	public itemSet_165(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_typeof_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : typeof-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_165

public class itemSet_166 : nonterminalState {
	public itemSet_166() {}
	public itemSet_166(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_checked_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : checked-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_166

public class itemSet_167 : nonterminalState {
	public itemSet_167() {}
	public itemSet_167(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unchecked_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : unchecked-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_167

public class itemSet_169 : nonterminalState {
	public itemSet_169() {}
	public itemSet_169(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_sizeof_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : sizeof-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_169

public class itemSet_170 : terminalState {
	public itemSet_170() {}
	public itemSet_170(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : uint", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_170

public class itemSet_172 : terminalState {
	public itemSet_172() {}
	public itemSet_172(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : char", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_172

public class itemSet_174 : nonterminalState {
	public itemSet_174() {}
	public itemSet_174(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_simple_name(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : simple-name", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_174

public class itemSet_176 : terminalState {
	public itemSet_176() {}
	public itemSet_176(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : ushort", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_176

public class itemSet_180 : terminalState {
	public itemSet_180() {}
	public itemSet_180(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : short", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_180

public class itemSet_186 : terminalState {
	public itemSet_186() {}
	public itemSet_186(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("literal", count, tok.coord, "literal : integer-literal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_186

public class itemSet_187 : nonterminalState {
	public itemSet_187() {}
	public itemSet_187(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_this_access(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : this-access", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_187

public class itemSet_190 : terminalState {
	public itemSet_190() {}
	public itemSet_190(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_295(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_190

public class itemSet_191 : nonterminalState {
	public itemSet_191() {}
	public itemSet_191(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_object_delegate_creation_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("new-expression", count, tok.coord, "new-expression : object-delegate-creation-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_191

public class itemSet_194 : terminalState {
	public itemSet_194() {}
	public itemSet_194(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : sbyte", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_194

public class itemSet_195 : nonterminalState {
	public itemSet_195() {}
	public itemSet_195(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_boolean_literal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("literal", count, tok.coord, "literal : boolean-literal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_195

public class itemSet_198 : nonterminalState {
	public itemSet_198() {}
	public itemSet_198(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_primary_expression_no_array_creation(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression", count, tok.coord, "primary-expression : primary-expression-no-array-creation", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_198

public class itemSet_200 : terminalState {
	public itemSet_200() {}
	public itemSet_200(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("null-literal", count, tok.coord, "null-literal : null", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_200

public class itemSet_201 : terminalState {
	public itemSet_201() {}
	public itemSet_201(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_300(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_201

public class itemSet_202 : nonterminalState {
	public itemSet_202() {}
	public itemSet_202(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_post_decrement_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : post-decrement-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_202

public class itemSet_203 : nonterminalState {
	public itemSet_203() {}
	public itemSet_203(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_invocation_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : invocation-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_203

public class itemSet_204 : nonterminalState {
	public itemSet_204() {}
	public itemSet_204(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_array_creation_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression", count, tok.coord, "primary-expression : array-creation-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_204

public class itemSet_205 : nonterminalState {
	public itemSet_205() {}
	public itemSet_205(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_predefined_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			s = new itemSet_301(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_205

public class itemSet_206 : terminalState {
	public itemSet_206() {}
	public itemSet_206(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_302(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_206

public class itemSet_207 : nonterminalState {
	public itemSet_207() {}
	public itemSet_207(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_post_increment_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : post-increment-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_207

public class itemSet_208 : nonterminalState {
	public itemSet_208() {}
	public itemSet_208(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_element_access(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression-no-array-creation", count, tok.coord, "primary-expression-no-array-creation : element-access", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_208

public class itemSet_210 : terminalState {
	public itemSet_210() {}
	public itemSet_210(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : ulong", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_210

public class itemSet_212 : terminalState {
	public itemSet_212() {}
	public itemSet_212(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("predefined-type", count, tok.coord, "predefined-type : float", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_212

public class itemSet_213 : terminalState {
	public itemSet_213() {}
	public itemSet_213(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("literal", count, tok.coord, "literal : character-literal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_213

public class itemSet_218 : terminalState {
	public itemSet_218() {}
	public itemSet_218(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
			if (true
				) {
			s = this.shiftNonterm("dim-separatorsopt", count, tok.coord, "dim-separatorsopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ",":
			s = new itemSet_307(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "dim-separatorsopt": {
				bool reject = false;
				s = new itemSet_306(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "dim-separators": {
				bool reject = false;
				s = new itemSet_308(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_218

public class itemSet_219 : nonterminalState {
	public itemSet_219() {}
	public itemSet_219(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_rank_specifier(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "{":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.shiftNonterm("array-type", count, tok.coord, "array-type : type rank-specifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_219

public class itemSet_234 : terminalState {
	public itemSet_234() {}
	public itemSet_234(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("simple-name", count, tok.coord, "simple-name : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_234

public class itemSet_235 : terminalState {
	public itemSet_235() {}
	public itemSet_235(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_324(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
		}
	}

} // itemSet_235

public class itemSet_246 : terminalState {
	public itemSet_246() {}
	public itemSet_246(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_333(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "expression-list": {
				bool reject = false;
				s = new itemSet_334(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
		}
	}

} // itemSet_246

public class itemSet_247 : terminalState {
	public itemSet_247() {}
	public itemSet_247(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("post-decrement-expression", count, tok.coord, "post-decrement-expression : primary-expression --", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_247

public class itemSet_248 : terminalState {
	public itemSet_248() {}
	public itemSet_248(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			if (true
				) {
			s = this.shiftNonterm("argument-listopt", count, tok.coord, "argument-listopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "out":
			s = new itemSet_335(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ref":
			s = new itemSet_336(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "argument-list": {
				bool reject = false;
				s = new itemSet_337(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "argument-listopt": {
				bool reject = false;
				s = new itemSet_338(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_339(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "argument": {
				bool reject = false;
				s = new itemSet_340(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo43 != null) {
					memo43.add(s, count);
					return null;
				} else {
					memo43 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo44 != null) {
					memo44.add(s, count);
					return null;
				} else {
					memo44 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;
	nonterminalState memo43;
	nonterminalState memo44;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
			memo43 = null;
			memo44 = null;
		}
	}

} // itemSet_248

public class itemSet_249 : terminalState {
	public itemSet_249() {}
	public itemSet_249(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("post-increment-expression", count, tok.coord, "post-increment-expression : primary-expression ++", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_249

public class itemSet_251 : terminalState {
	public itemSet_251() {}
	public itemSet_251(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_342(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_251

public class itemSet_270 : nonterminalState {
	public itemSet_270() {}
	public itemSet_270(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_356(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_270

public class itemSet_291 : terminalState {
	public itemSet_291() {}
	public itemSet_291(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_333(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "expression-list": {
				bool reject = false;
				s = new itemSet_375(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
		}
	}

} // itemSet_291

public class itemSet_292 : terminalState {
	public itemSet_292() {}
	public itemSet_292(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_376(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_292

public class itemSet_295 : nonterminalState {
	public itemSet_295() {}
	public itemSet_295(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : + unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_295

public class itemSet_300 : terminalState {
	public itemSet_300() {}
	public itemSet_300(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_382(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
		}
	}

} // itemSet_300

public class itemSet_301 : terminalState {
	public itemSet_301() {}
	public itemSet_301(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_383(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_301

public class itemSet_302 : terminalState {
	public itemSet_302() {}
	public itemSet_302(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_105(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "return-type": {
				bool reject = false;
				s = new itemSet_384(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_114(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
		}
	}

} // itemSet_302

public class itemSet_306 : nonterminalState {
	public itemSet_306() {}
	public itemSet_306(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_dim_separatorsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
			s = new itemSet_393(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_306

public class itemSet_307 : terminalState {
	public itemSet_307() {}
	public itemSet_307(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("dim-separators", count, tok.coord, "dim-separators : ,", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_307

public class itemSet_324 : nonterminalState {
	public itemSet_324() {}
	public itemSet_324(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_441(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_324

public class itemSet_333 : nonterminalState {
	public itemSet_333() {}
	public itemSet_333(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("expression-list", count, tok.coord, "expression-list : expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_333

public class itemSet_335 : terminalState {
	public itemSet_335() {}
	public itemSet_335(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "variable-reference": {
				bool reject = false;
				s = new itemSet_444(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_445(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
		}
	}

} // itemSet_335

public class itemSet_336 : terminalState {
	public itemSet_336() {}
	public itemSet_336(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "variable-reference": {
				bool reject = false;
				s = new itemSet_446(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_445(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
		}
	}

} // itemSet_336

public class itemSet_338 : nonterminalState {
	public itemSet_338() {}
	public itemSet_338(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_argument_listopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_448(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_338

public class itemSet_339 : nonterminalState {
	public itemSet_339() {}
	public itemSet_339(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("argument", count, tok.coord, "argument : expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_339

public class itemSet_340 : nonterminalState {
	public itemSet_340() {}
	public itemSet_340(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_argument(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("argument-list", count, tok.coord, "argument-list : argument", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_340

public class itemSet_342 : terminalState {
	public itemSet_342() {}
	public itemSet_342(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("member-access", count, tok.coord, "member-access : primary-expression . identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_342

public class itemSet_356 : terminalState {
	public itemSet_356() {}
	public itemSet_356(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("parenthesized-expression", count, tok.coord, "parenthesized-expression : ( expression )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_356

public class itemSet_358 : nonterminalState {
	public itemSet_358() {}
	public itemSet_358(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_array_initializer(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("array-creation-expression", count, tok.coord, "array-creation-expression : new array-type array-initializer", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_358

public class itemSet_360 : terminalState {
	public itemSet_360() {}
	public itemSet_360(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			if (true
				) {
			s = this.shiftNonterm("argument-listopt", count, tok.coord, "argument-listopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "out":
			s = new itemSet_335(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ref":
			s = new itemSet_336(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "argument-list": {
				bool reject = false;
				s = new itemSet_337(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "argument-listopt": {
				bool reject = false;
				s = new itemSet_460(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_339(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "argument": {
				bool reject = false;
				s = new itemSet_340(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo43 != null) {
					memo43.add(s, count);
					return null;
				} else {
					memo43 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo44 != null) {
					memo44.add(s, count);
					return null;
				} else {
					memo44 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;
	nonterminalState memo43;
	nonterminalState memo44;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
			memo43 = null;
			memo44 = null;
		}
	}

} // itemSet_360

public class itemSet_376 : terminalState {
	public itemSet_376() {}
	public itemSet_376(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("base-access", count, tok.coord, "base-access : base . identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_376

public class itemSet_382 : nonterminalState {
	public itemSet_382() {}
	public itemSet_382(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_465(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_382

public class itemSet_383 : terminalState {
	public itemSet_383() {}
	public itemSet_383(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("member-access", count, tok.coord, "member-access : predefined-type . identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_383

public class itemSet_384 : nonterminalState {
	public itemSet_384() {}
	public itemSet_384(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_return_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_466(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_384

public class itemSet_393 : terminalState {
	public itemSet_393() {}
	public itemSet_393(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case "this":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "operator":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "{":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case "identifier":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("rank-specifier", count, tok.coord, "rank-specifier : [ dim-separatorsopt ]", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_393

public class itemSet_394 : terminalState {
	public itemSet_394() {}
	public itemSet_394(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.below.shiftNonterm("dim-separators", count, tok.coord, "dim-separators : dim-separators ,", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_394

public class itemSet_441 : terminalState {
	public itemSet_441() {}
	public itemSet_441(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("checked-expression", count, tok.coord, "checked-expression : checked ( expression )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_441

public class itemSet_442 : terminalState {
	public itemSet_442() {}
	public itemSet_442(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("element-access", count, tok.coord, "element-access : primary-expression [ expression-list ]", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_442

public class itemSet_443 : terminalState {
	public itemSet_443() {}
	public itemSet_443(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_493(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
		}
	}

} // itemSet_443

public class itemSet_444 : nonterminalState {
	public itemSet_444() {}
	public itemSet_444(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_variable_reference(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.shiftNonterm("argument", count, tok.coord, "argument : out variable-reference", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_444

public class itemSet_445 : nonterminalState {
	public itemSet_445() {}
	public itemSet_445(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("variable-reference", count, tok.coord, "variable-reference : expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_445

public class itemSet_446 : nonterminalState {
	public itemSet_446() {}
	public itemSet_446(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_variable_reference(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.shiftNonterm("argument", count, tok.coord, "argument : ref variable-reference", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_446

public class itemSet_447 : terminalState {
	public itemSet_447() {}
	public itemSet_447(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "out":
			s = new itemSet_335(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ref":
			s = new itemSet_336(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_339(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "argument": {
				bool reject = false;
				s = new itemSet_494(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo42 != null) {
					memo42.add(s, count);
					return null;
				} else {
					memo42 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;
	nonterminalState memo42;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
			memo42 = null;
		}
	}

} // itemSet_447

public class itemSet_448 : terminalState {
	public itemSet_448() {}
	public itemSet_448(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("invocation-expression", count, tok.coord, "invocation-expression : primary-expression ( argument-listopt )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_448

public class itemSet_460 : nonterminalState {
	public itemSet_460() {}
	public itemSet_460(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_argument_listopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_499(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_460

public class itemSet_464 : terminalState {
	public itemSet_464() {}
	public itemSet_464(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("base-access", count, tok.coord, "base-access : base [ expression-list ]", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_464

public class itemSet_465 : terminalState {
	public itemSet_465() {}
	public itemSet_465(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("unchecked-expression", count, tok.coord, "unchecked-expression : unchecked ( expression )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_465

public class itemSet_466 : terminalState {
	public itemSet_466() {}
	public itemSet_466(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("typeof-expression", count, tok.coord, "typeof-expression : typeof ( return-type )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_466

public class itemSet_493 : nonterminalState {
	public itemSet_493() {}
	public itemSet_493(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("expression-list", count, tok.coord, "expression-list : expression-list , expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_493

public class itemSet_494 : nonterminalState {
	public itemSet_494() {}
	public itemSet_494(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_argument(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("argument-list", count, tok.coord, "argument-list : argument-list , argument", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_494

public class itemSet_498 : terminalState {
	public itemSet_498() {}
	public itemSet_498(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
			s = new itemSet_218(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.shiftNonterm("rank-specifiersopt", count, tok.coord, "rank-specifiersopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "{":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.shiftNonterm("rank-specifiersopt", count, tok.coord, "rank-specifiersopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "rank-specifiers": {
				bool reject = false;
				s = new itemSet_592(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "rank-specifiersopt": {
				bool reject = false;
				s = new itemSet_593(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "rank-specifier": {
				bool reject = false;
				s = new itemSet_594(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_498

public class itemSet_499 : terminalState {
	public itemSet_499() {}
	public itemSet_499(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.below.shiftNonterm("object-delegate-creation-expression", count, tok.coord, "object-delegate-creation-expression : new type ( argument-listopt )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_499

public class itemSet_593 : nonterminalState {
	public itemSet_593() {}
	public itemSet_593(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_rank_specifiersopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			s = new itemSet_357(this, tok, count);
			wl.Enqueue(s);
			break;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.shiftNonterm("array-initializeropt", count, tok.coord, "array-initializeropt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "array-initializer": {
				bool reject = false;
				s = new itemSet_657(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-initializeropt": {
				bool reject = false;
				s = new itemSet_658(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_593

public class itemSet_594 : nonterminalState {
	public itemSet_594() {}
	public itemSet_594(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_rank_specifier(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "{":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("rank-specifiers", count, tok.coord, "rank-specifiers : rank-specifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_594

public class itemSet_656 : nonterminalState {
	public itemSet_656() {}
	public itemSet_656(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_rank_specifier(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "{":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("rank-specifiers", count, tok.coord, "rank-specifiers : rank-specifiers rank-specifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_656

public class itemSet_658 : nonterminalState {
	public itemSet_658() {}
	public itemSet_658(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_array_initializeropt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.below.below.below.shiftNonterm("array-creation-expression", count, tok.coord, "array-creation-expression : new type [ expression-list ] rank-specifiersopt array-initializeropt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_658

public class startState : nonterminalState {
	public startState() : base(null, "START-STATE", null, new Coordinate(null,0,0,null,0), false, 0) {
	}

	public override object _rewrite2AST() {
		return null;
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "using":
			s = new itemSet_9(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.shiftNonterm("using-directivesopt", count, tok.coord, "using-directivesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "compilation-unit": {
				bool reject = false;
				s = new itemSet_2(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "using-directivesopt": {
				bool reject = false;
				s = new itemSet_3(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "START": {
				bool reject = false;
				s = new itemSet_4(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "using-alias-directive": {
				bool reject = false;
				s = new itemSet_5(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "<s t a r t>": {
				bool reject = false;
				s = new itemSet_933(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "using-namespace-directive": {
				bool reject = false;
				s = new itemSet_6(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "using-directive": {
				bool reject = false;
				s = new itemSet_7(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "using-directives": {
				bool reject = false;
				s = new itemSet_8(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
		}
	}

} // itemSet_1

public class itemSet_3 : nonterminalState {
	public itemSet_3() {}
	public itemSet_3(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_using_directivesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
			s = new itemSet_10(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.shiftNonterm("global-attributesopt", count, tok.coord, "global-attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.shiftNonterm("global-attributesopt", count, tok.coord, "global-attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "global-attribute-section": {
				bool reject = false;
				s = new itemSet_11(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "global-attributes": {
				bool reject = false;
				s = new itemSet_12(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "global-attribute-sections": {
				bool reject = false;
				s = new itemSet_13(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "global-attributesopt": {
				bool reject = false;
				s = new itemSet_14(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
		}
	}

} // itemSet_3

public class itemSet_4 : nonterminalState {
	public itemSet_4() {}
	public itemSet_4(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_START(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<EOF>":
			if (true
				) {
			s = this.below.shiftNonterm("<s t a r t>", count, tok.coord, "<s t a r t> : START", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_4

public class itemSet_5 : nonterminalState {
	public itemSet_5() {}
	public itemSet_5(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_using_alias_directive(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
		case "using":
			if (true
				) {
			s = this.below.shiftNonterm("using-directive", count, tok.coord, "using-directive : using-alias-directive", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_5

public class itemSet_6 : nonterminalState {
	public itemSet_6() {}
	public itemSet_6(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_using_namespace_directive(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
		case "using":
			if (true
				) {
			s = this.below.shiftNonterm("using-directive", count, tok.coord, "using-directive : using-namespace-directive", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_6

public class itemSet_7 : nonterminalState {
	public itemSet_7() {}
	public itemSet_7(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_using_directive(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
		case "using":
			if (true
				) {
			s = this.below.shiftNonterm("using-directives", count, tok.coord, "using-directives : using-directive", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_7

public class itemSet_11 : nonterminalState {
	public itemSet_11() {}
	public itemSet_11(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_global_attribute_section(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.shiftNonterm("global-attribute-sections", count, tok.coord, "global-attribute-sections : global-attribute-section", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_11

public class itemSet_12 : nonterminalState {
	public itemSet_12() {}
	public itemSet_12(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_global_attributes(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.shiftNonterm("global-attributesopt", count, tok.coord, "global-attributesopt : global-attributes", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_12

public class itemSet_14 : nonterminalState {
	public itemSet_14() {}
	public itemSet_14(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_global_attributesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("attributesopt", count, tok.coord, "attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "namespace":
			s = new itemSet_32(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_22(this, tok, count);
			wl.Enqueue(s);
			break;
		case "}":
		case "<EOF>":
			if (true
				) {
			s = this.shiftNonterm("namespace-member-declarationsopt", count, tok.coord, "namespace-member-declarationsopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "attributesopt": {
				bool reject = false;
				s = new itemSet_23(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "type-declaration": {
				bool reject = false;
				s = new itemSet_24(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "delegate-declaration": {
				bool reject = false;
				s = new itemSet_25(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "struct-declaration": {
				bool reject = false;
				s = new itemSet_26(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "class-declaration": {
				bool reject = false;
				s = new itemSet_27(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "namespace-member-declarationsopt": {
				bool reject = false;
				s = new itemSet_28(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "attributes": {
				bool reject = false;
				s = new itemSet_29(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "attribute-section": {
				bool reject = false;
				s = new itemSet_30(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "namespace-member-declaration": {
				bool reject = false;
				s = new itemSet_31(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "interface-declaration": {
				bool reject = false;
				s = new itemSet_33(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "attribute-sections": {
				bool reject = false;
				s = new itemSet_34(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "namespace-declaration": {
				bool reject = false;
				s = new itemSet_35(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "namespace-member-declarations": {
				bool reject = false;
				s = new itemSet_36(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "enum-declaration": {
				bool reject = false;
				s = new itemSet_37(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
		}
	}

} // itemSet_14

public class itemSet_15 : nonterminalState {
	public itemSet_15() {}
	public itemSet_15(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_using_directive(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
		case "using":
			if (true
				) {
			s = this.below.below.shiftNonterm("using-directives", count, tok.coord, "using-directives : using-directives using-directive", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_15

public class itemSet_16 : nonterminalState {
	public itemSet_16() {}
	public itemSet_16(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_namespace_name(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
			s = new itemSet_38(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_16

public class itemSet_21 : nonterminalState {
	public itemSet_21() {}
	public itemSet_21(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_global_attribute_section(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.below.shiftNonterm("global-attribute-sections", count, tok.coord, "global-attribute-sections : global-attribute-sections global-attribute-section", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_21

public class itemSet_24 : nonterminalState {
	public itemSet_24() {}
	public itemSet_24(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-member-declaration", count, tok.coord, "namespace-member-declaration : type-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_24

public class itemSet_25 : nonterminalState {
	public itemSet_25() {}
	public itemSet_25(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_delegate_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("type-declaration", count, tok.coord, "type-declaration : delegate-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_25

public class itemSet_26 : nonterminalState {
	public itemSet_26() {}
	public itemSet_26(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_struct_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("type-declaration", count, tok.coord, "type-declaration : struct-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_26

public class itemSet_27 : nonterminalState {
	public itemSet_27() {}
	public itemSet_27(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("type-declaration", count, tok.coord, "type-declaration : class-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_27

public class itemSet_28 : nonterminalState {
	public itemSet_28() {}
	public itemSet_28(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_namespace_member_declarationsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "<EOF>":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("compilation-unit", count, tok.coord, "compilation-unit : using-directivesopt global-attributesopt namespace-member-declarationsopt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_28

public class itemSet_29 : nonterminalState {
	public itemSet_29() {}
	public itemSet_29(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attributes(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("attributesopt", count, tok.coord, "attributesopt : attributes", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_29

public class itemSet_30 : nonterminalState {
	public itemSet_30() {}
	public itemSet_30(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_section(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-sections", count, tok.coord, "attribute-sections : attribute-section", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_30

public class itemSet_31 : nonterminalState {
	public itemSet_31() {}
	public itemSet_31(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_namespace_member_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-member-declarations", count, tok.coord, "namespace-member-declarations : namespace-member-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_31

public class itemSet_32 : terminalState {
	public itemSet_32() {}
	public itemSet_32(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_66(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "qualified-identifier": {
				bool reject = false;
				s = new itemSet_65(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_32

public class itemSet_33 : nonterminalState {
	public itemSet_33() {}
	public itemSet_33(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("type-declaration", count, tok.coord, "type-declaration : interface-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_33

public class itemSet_35 : nonterminalState {
	public itemSet_35() {}
	public itemSet_35(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_namespace_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.shiftNonterm("namespace-member-declaration", count, tok.coord, "namespace-member-declaration : namespace-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_35

public class itemSet_37 : nonterminalState {
	public itemSet_37() {}
	public itemSet_37(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_enum_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("type-declaration", count, tok.coord, "type-declaration : enum-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_37

public class itemSet_38 : terminalState {
	public itemSet_38() {}
	public itemSet_38(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
		case "using":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("using-namespace-directive", count, tok.coord, "using-namespace-directive : using namespace-name ;", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_38

public class itemSet_40 : terminalState {
	public itemSet_40() {}
	public itemSet_40(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_70(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_40

public class itemSet_43 : nonterminalState {
	public itemSet_43() {}
	public itemSet_43(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_target(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			s = new itemSet_78(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_43

public class itemSet_45 : terminalState {
	public itemSet_45() {}
	public itemSet_45(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-target", count, tok.coord, "attribute-target : return", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_45

public class itemSet_46 : nonterminalState {
	public itemSet_46() {}
	public itemSet_46(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_target_specifier(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-target-specifieropt", count, tok.coord, "attribute-target-specifieropt : attribute-target-specifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_46

public class itemSet_47 : terminalState {
	public itemSet_47() {}
	public itemSet_47(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-target", count, tok.coord, "attribute-target : event", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_47

public class itemSet_49 : terminalState {
	public itemSet_49() {}
	public itemSet_49(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : extern", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_49

public class itemSet_50 : terminalState {
	public itemSet_50() {}
	public itemSet_50(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : sealed", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_50

public class itemSet_51 : terminalState {
	public itemSet_51() {}
	public itemSet_51(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : volatile", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_51

public class itemSet_52 : terminalState {
	public itemSet_52() {}
	public itemSet_52(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : abstract", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_52

public class itemSet_53 : terminalState {
	public itemSet_53() {}
	public itemSet_53(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : override", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_53

public class itemSet_54 : terminalState {
	public itemSet_54() {}
	public itemSet_54(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : unsafe", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_54

public class itemSet_55 : terminalState {
	public itemSet_55() {}
	public itemSet_55(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : new", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_55

public class itemSet_56 : terminalState {
	public itemSet_56() {}
	public itemSet_56(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : internal", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_56

public class itemSet_57 : terminalState {
	public itemSet_57() {}
	public itemSet_57(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : static", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_57

public class itemSet_58 : terminalState {
	public itemSet_58() {}
	public itemSet_58(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : virtual", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_58

public class itemSet_59 : terminalState {
	public itemSet_59() {}
	public itemSet_59(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : protected", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_59

public class itemSet_60 : nonterminalState {
	public itemSet_60() {}
	public itemSet_60(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_member_modifier(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifiers", count, tok.coord, "member-modifiers : member-modifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_60

public class itemSet_62 : terminalState {
	public itemSet_62() {}
	public itemSet_62(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : public", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_62

public class itemSet_63 : terminalState {
	public itemSet_63() {}
	public itemSet_63(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : private", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_63

public class itemSet_64 : terminalState {
	public itemSet_64() {}
	public itemSet_64(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("member-modifier", count, tok.coord, "member-modifier : readonly", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_64

public class itemSet_66 : terminalState {
	public itemSet_66() {}
	public itemSet_66(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
		case ".":
			if (true
				) {
			s = this.below.shiftNonterm("qualified-identifier", count, tok.coord, "qualified-identifier : identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_66

public class itemSet_67 : nonterminalState {
	public itemSet_67() {}
	public itemSet_67(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_section(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.shiftNonterm("attribute-sections", count, tok.coord, "attribute-sections : attribute-sections attribute-section", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_67

public class itemSet_68 : nonterminalState {
	public itemSet_68() {}
	public itemSet_68(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_namespace_member_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.below.shiftNonterm("namespace-member-declarations", count, tok.coord, "namespace-member-declarations : namespace-member-declarations namespace-member-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_68

public class itemSet_74 : nonterminalState {
	public itemSet_74() {}
	public itemSet_74(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_name(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_92(this, tok, count);
			wl.Enqueue(s);
			break;
		case "]":
		case ",":
			if (true
				) {
			s = this.shiftNonterm("attribute-argumentsopt", count, tok.coord, "attribute-argumentsopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "attribute-arguments": {
				bool reject = false;
				s = new itemSet_91(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "attribute-argumentsopt": {
				bool reject = false;
				s = new itemSet_93(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_74

public class itemSet_75 : nonterminalState {
	public itemSet_75() {}
	public itemSet_75(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-list", count, tok.coord, "attribute-list : attribute", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_75

public class itemSet_76 : nonterminalState {
	public itemSet_76() {}
	public itemSet_76(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type_name(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
		case "]":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-name", count, tok.coord, "attribute-name : type-name", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_76

public class itemSet_78 : terminalState {
	public itemSet_78() {}
	public itemSet_78(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			if (true
				) {
			s = this.below.below.shiftNonterm("attribute-target-specifier", count, tok.coord, "attribute-target-specifier : attribute-target :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_78

public class itemSet_79 : terminalState {
	public itemSet_79() {}
	public itemSet_79(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_105(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "return-type": {
				bool reject = false;
				s = new itemSet_110(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_114(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
		}
	}

} // itemSet_79

public class itemSet_80 : terminalState {
	public itemSet_80() {}
	public itemSet_80(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_120(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_80

public class itemSet_81 : terminalState {
	public itemSet_81() {}
	public itemSet_81(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_121(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_81

public class itemSet_82 : terminalState {
	public itemSet_82() {}
	public itemSet_82(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_122(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_82

public class itemSet_83 : terminalState {
	public itemSet_83() {}
	public itemSet_83(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_123(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_83

public class itemSet_84 : nonterminalState {
	public itemSet_84() {}
	public itemSet_84(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_member_modifier(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.shiftNonterm("member-modifiers", count, tok.coord, "member-modifiers : member-modifiers member-modifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_84

public class itemSet_85 : terminalState {
	public itemSet_85() {}
	public itemSet_85(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "using":
			s = new itemSet_9(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.shiftNonterm("using-directivesopt", count, tok.coord, "using-directivesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "using-directivesopt": {
				bool reject = false;
				s = new itemSet_124(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "using-alias-directive": {
				bool reject = false;
				s = new itemSet_5(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "using-namespace-directive": {
				bool reject = false;
				s = new itemSet_6(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "using-directive": {
				bool reject = false;
				s = new itemSet_7(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "using-directives": {
				bool reject = false;
				s = new itemSet_8(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
		}
	}

} // itemSet_85

public class itemSet_86 : nonterminalState {
	public itemSet_86() {}
	public itemSet_86(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_namespace_body(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
			s = new itemSet_125(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm(";opt", count, tok.coord, ";opt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case ";opt": {
				bool reject = false;
				s = new itemSet_126(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_86

public class itemSet_87 : terminalState {
	public itemSet_87() {}
	public itemSet_87(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_127(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_87

public class itemSet_88 : terminalState {
	public itemSet_88() {}
	public itemSet_88(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
		case "using":
			if (true
				) {
			s = this.below.below.below.below.below.shiftNonterm("using-alias-directive", count, tok.coord, "using-alias-directive : using identifier = namespace-or-type-name ;", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_88

public class itemSet_89 : terminalState {
	public itemSet_89() {}
	public itemSet_89(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.below.below.below.below.shiftNonterm("global-attribute-section", count, tok.coord, "global-attribute-section : [ global-attribute-target : attribute-list ]", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_89

public class itemSet_91 : nonterminalState {
	public itemSet_91() {}
	public itemSet_91(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_arguments(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-argumentsopt", count, tok.coord, "attribute-argumentsopt : attribute-arguments", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_91

public class itemSet_93 : nonterminalState {
	public itemSet_93() {}
	public itemSet_93(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_argumentsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.below.shiftNonterm("attribute", count, tok.coord, "attribute : attribute-name attribute-argumentsopt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_93

public class itemSet_94 : terminalState {
	public itemSet_94() {}
	public itemSet_94(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("attribute-section", count, tok.coord, "attribute-section : [ attribute-target-specifieropt attribute-list ]", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_94

public class itemSet_106 : nonterminalState {
	public itemSet_106() {}
	public itemSet_106(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unmanaged_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "*":
			s = new itemSet_216(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_106

public class itemSet_110 : nonterminalState {
	public itemSet_110() {}
	public itemSet_110(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_return_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_217(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_110

public class itemSet_117 : nonterminalState {
	public itemSet_117() {}
	public itemSet_117(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_pointer_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("type", count, tok.coord, "type : pointer-type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_117

public class itemSet_120 : terminalState {
	public itemSet_120() {}
	public itemSet_120(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			s = new itemSet_221(this, tok, count);
			wl.Enqueue(s);
			break;
		case "{":
			if (true
				) {
			s = this.shiftNonterm("enum-baseopt", count, tok.coord, "enum-baseopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "enum-base": {
				bool reject = false;
				s = new itemSet_220(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "enum-baseopt": {
				bool reject = false;
				s = new itemSet_222(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_120

public class itemSet_121 : terminalState {
	public itemSet_121() {}
	public itemSet_121(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			if (true
				) {
			s = this.shiftNonterm("interface-baseopt", count, tok.coord, "interface-baseopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ":":
			s = new itemSet_224(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "interface-base": {
				bool reject = false;
				s = new itemSet_223(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "interface-baseopt": {
				bool reject = false;
				s = new itemSet_225(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_121

public class itemSet_122 : terminalState {
	public itemSet_122() {}
	public itemSet_122(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			s = new itemSet_227(this, tok, count);
			wl.Enqueue(s);
			break;
		case "{":
			if (true
				) {
			s = this.shiftNonterm("struct-interfacesopt", count, tok.coord, "struct-interfacesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "struct-interfacesopt": {
				bool reject = false;
				s = new itemSet_226(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "struct-interfaces": {
				bool reject = false;
				s = new itemSet_228(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_122

public class itemSet_123 : terminalState {
	public itemSet_123() {}
	public itemSet_123(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			if (true
				) {
			s = this.shiftNonterm("class-baseopt", count, tok.coord, "class-baseopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case ":":
			s = new itemSet_230(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "class-base": {
				bool reject = false;
				s = new itemSet_229(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "class-baseopt": {
				bool reject = false;
				s = new itemSet_231(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_123

public class itemSet_124 : nonterminalState {
	public itemSet_124() {}
	public itemSet_124(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_using_directivesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("attributesopt", count, tok.coord, "attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "namespace":
			s = new itemSet_32(this, tok, count);
			wl.Enqueue(s);
			break;
		case "[":
			s = new itemSet_22(this, tok, count);
			wl.Enqueue(s);
			break;
		case "}":
		case "<EOF>":
			if (true
				) {
			s = this.shiftNonterm("namespace-member-declarationsopt", count, tok.coord, "namespace-member-declarationsopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "attributesopt": {
				bool reject = false;
				s = new itemSet_23(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "type-declaration": {
				bool reject = false;
				s = new itemSet_24(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "delegate-declaration": {
				bool reject = false;
				s = new itemSet_25(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "struct-declaration": {
				bool reject = false;
				s = new itemSet_26(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "class-declaration": {
				bool reject = false;
				s = new itemSet_27(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "namespace-member-declarationsopt": {
				bool reject = false;
				s = new itemSet_232(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "attributes": {
				bool reject = false;
				s = new itemSet_29(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "attribute-section": {
				bool reject = false;
				s = new itemSet_30(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "namespace-member-declaration": {
				bool reject = false;
				s = new itemSet_31(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "interface-declaration": {
				bool reject = false;
				s = new itemSet_33(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "attribute-sections": {
				bool reject = false;
				s = new itemSet_34(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "namespace-declaration": {
				bool reject = false;
				s = new itemSet_35(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "namespace-member-declarations": {
				bool reject = false;
				s = new itemSet_36(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "enum-declaration": {
				bool reject = false;
				s = new itemSet_37(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
		}
	}

} // itemSet_124

public class itemSet_125 : terminalState {
	public itemSet_125() {}
	public itemSet_125(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm(";opt", count, tok.coord, ";opt : ;", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_125

public class itemSet_126 : nonterminalState {
	public itemSet_126() {}
	public itemSet_126(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_Aopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("namespace-declaration", count, tok.coord, "namespace-declaration : namespace qualified-identifier namespace-body ;opt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_126

public class itemSet_127 : terminalState {
	public itemSet_127() {}
	public itemSet_127(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
		case ".":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("qualified-identifier", count, tok.coord, "qualified-identifier : qualified-identifier . identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_127

public class itemSet_128 : terminalState {
	public itemSet_128() {}
	public itemSet_128(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.below.below.below.below.below.shiftNonterm("global-attribute-section", count, tok.coord, "global-attribute-section : [ global-attribute-target : attribute-list , ]", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_128

public class itemSet_129 : nonterminalState {
	public itemSet_129() {}
	public itemSet_129(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("attribute-list", count, tok.coord, "attribute-list : attribute-list , attribute", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_129

public class itemSet_134 : terminalState {
	public itemSet_134() {}
	public itemSet_134(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_233(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_134

public class itemSet_136 : nonterminalState {
	public itemSet_136() {}
	public itemSet_136(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_pre_increment_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : pre-increment-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_136

public class itemSet_142 : terminalState {
	public itemSet_142() {}
	public itemSet_142(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_242(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_142

public class itemSet_145 : nonterminalState {
	public itemSet_145() {}
	public itemSet_145(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_named_argument(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("named-argument-list", count, tok.coord, "named-argument-list : named-argument", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_145

public class itemSet_146 : terminalState {
	public itemSet_146() {}
	public itemSet_146(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_245(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_146

public class itemSet_155 : terminalState {
	public itemSet_155() {}
	public itemSet_155(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_276(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_155

public class itemSet_164 : terminalState {
	public itemSet_164() {}
	public itemSet_164(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_281(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_164

public class itemSet_171 : nonterminalState {
	public itemSet_171() {}
	public itemSet_171(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_positional_argument(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("positional-argument-list", count, tok.coord, "positional-argument-list : positional-argument", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_171

public class itemSet_173 : nonterminalState {
	public itemSet_173() {}
	public itemSet_173(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_conditional_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("attribute-argument-expression", count, tok.coord, "attribute-argument-expression : conditional-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_173

public class itemSet_175 : terminalState {
	public itemSet_175() {}
	public itemSet_175(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_284(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_175

public class itemSet_177 : nonterminalState {
	public itemSet_177() {}
	public itemSet_177(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_pointer_member_access(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("primary-expression", count, tok.coord, "primary-expression : pointer-member-access", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_177

public class itemSet_183 : terminalState {
	public itemSet_183() {}
	public itemSet_183(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_290(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_183

public class itemSet_188 : nonterminalState {
	public itemSet_188() {}
	public itemSet_188(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "%":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.shiftNonterm("multiplicative-expression", count, tok.coord, "multiplicative-expression : unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_188

public class itemSet_189 : nonterminalState {
	public itemSet_189() {}
	public itemSet_189(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_cast_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : cast-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_189

public class itemSet_192 : nonterminalState {
	public itemSet_192() {}
	public itemSet_192(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_pre_decrement_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : pre-decrement-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_192

public class itemSet_193 : nonterminalState {
	public itemSet_193() {}
	public itemSet_193(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_addressof_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : addressof-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_193

public class itemSet_196 : nonterminalState {
	public itemSet_196() {}
	public itemSet_196(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_positional_argument_listopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_296(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_196

public class itemSet_199 : nonterminalState {
	public itemSet_199() {}
	public itemSet_199(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_argument_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("positional-argument", count, tok.coord, "positional-argument : attribute-argument-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_199

public class itemSet_211 : terminalState {
	public itemSet_211() {}
	public itemSet_211(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_304(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_211

public class itemSet_214 : terminalState {
	public itemSet_214() {}
	public itemSet_214(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.below.below.below.shiftNonterm("attribute-section", count, tok.coord, "attribute-section : [ attribute-target-specifieropt attribute-list , ]", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_214

public class itemSet_215 : terminalState {
	public itemSet_215() {}
	public itemSet_215(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.shiftNonterm("pointer-type", count, tok.coord, "pointer-type : void *", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_215

public class itemSet_216 : terminalState {
	public itemSet_216() {}
	public itemSet_216(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "==":
		case "this":
		case "(":
		case ">=":
		case "]":
		case "}":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "?":
		case "!=":
		case "operator":
		case ",":
		case "<":
		case "|":
		case "identifier":
		case ")":
		case "&&":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.shiftNonterm("pointer-type", count, tok.coord, "pointer-type : unmanaged-type *", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_216

public class itemSet_217 : terminalState {
	public itemSet_217() {}
	public itemSet_217(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "(":
			s = new itemSet_305(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_217

public class itemSet_220 : nonterminalState {
	public itemSet_220() {}
	public itemSet_220(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_enum_base(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			if (true
				) {
			s = this.below.shiftNonterm("enum-baseopt", count, tok.coord, "enum-baseopt : enum-base", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_220

public class itemSet_221 : terminalState {
	public itemSet_221() {}
	public itemSet_221(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "integral-type": {
				bool reject = false;
				s = new itemSet_309(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_221

public class itemSet_222 : nonterminalState {
	public itemSet_222() {}
	public itemSet_222(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_enum_baseopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			s = new itemSet_310(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "enum-body": {
				bool reject = false;
				s = new itemSet_311(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_222

public class itemSet_223 : nonterminalState {
	public itemSet_223() {}
	public itemSet_223(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_base(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			if (true
				) {
			s = this.below.shiftNonterm("interface-baseopt", count, tok.coord, "interface-baseopt : interface-base", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_223

public class itemSet_224 : terminalState {
	public itemSet_224() {}
	public itemSet_224(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "interface-type-list": {
				bool reject = false;
				s = new itemSet_312(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_313(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_224

public class itemSet_225 : nonterminalState {
	public itemSet_225() {}
	public itemSet_225(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_baseopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			s = new itemSet_314(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "interface-body": {
				bool reject = false;
				s = new itemSet_315(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_225

public class itemSet_226 : nonterminalState {
	public itemSet_226() {}
	public itemSet_226(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_struct_interfacesopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			s = new itemSet_316(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "struct-body": {
				bool reject = false;
				s = new itemSet_317(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_226

public class itemSet_227 : terminalState {
	public itemSet_227() {}
	public itemSet_227(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "interface-type-list": {
				bool reject = false;
				s = new itemSet_318(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_313(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_227

public class itemSet_228 : nonterminalState {
	public itemSet_228() {}
	public itemSet_228(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_struct_interfaces(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			if (true
				) {
			s = this.below.shiftNonterm("struct-interfacesopt", count, tok.coord, "struct-interfacesopt : struct-interfaces", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_228

public class itemSet_229 : nonterminalState {
	public itemSet_229() {}
	public itemSet_229(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_base(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			if (true
				) {
			s = this.below.shiftNonterm("class-baseopt", count, tok.coord, "class-baseopt : class-base", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_229

public class itemSet_230 : terminalState {
	public itemSet_230() {}
	public itemSet_230(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "class-type-list": {
				bool reject = false;
				s = new itemSet_319(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_320(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
		}
	}

} // itemSet_230

public class itemSet_231 : nonterminalState {
	public itemSet_231() {}
	public itemSet_231(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_baseopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			s = new itemSet_321(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "class-body": {
				bool reject = false;
				s = new itemSet_322(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_231

public class itemSet_232 : nonterminalState {
	public itemSet_232() {}
	public itemSet_232(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_namespace_member_declarationsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
			s = new itemSet_323(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_232

public class itemSet_233 : nonterminalState {
	public itemSet_233() {}
	public itemSet_233(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : - unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_233

public class itemSet_236 : terminalState {
	public itemSet_236() {}
	public itemSet_236(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_325(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
		}
	}

} // itemSet_236

public class itemSet_237 : terminalState {
	public itemSet_237() {}
	public itemSet_237(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_253(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_326(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
		}
	}

} // itemSet_237

public class itemSet_238 : terminalState {
	public itemSet_238() {}
	public itemSet_238(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_253(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_106(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_327(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
		}
	}

} // itemSet_238

public class itemSet_239 : terminalState {
	public itemSet_239() {}
	public itemSet_239(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_328(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
		}
	}

} // itemSet_239

public class itemSet_240 : terminalState {
	public itemSet_240() {}
	public itemSet_240(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_329(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
		}
	}

} // itemSet_240

public class itemSet_241 : terminalState {
	public itemSet_241() {}
	public itemSet_241(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_330(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
		}
	}

} // itemSet_241

public class itemSet_242 : nonterminalState {
	public itemSet_242() {}
	public itemSet_242(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : ! unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_242

public class itemSet_243 : terminalState {
	public itemSet_243() {}
	public itemSet_243(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_331(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
		}
	}

} // itemSet_243

public class itemSet_244 : terminalState {
	public itemSet_244() {}
	public itemSet_244(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_332(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
		}
	}

} // itemSet_244

public class itemSet_245 : nonterminalState {
	public itemSet_245() {}
	public itemSet_245(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("pre-decrement-expression", count, tok.coord, "pre-decrement-expression : -- unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_245

public class itemSet_250 : terminalState {
	public itemSet_250() {}
	public itemSet_250(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_341(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_250

public class itemSet_253 : terminalState {
	public itemSet_253() {}
	public itemSet_253(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "*":
			s = new itemSet_215(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_253

public class itemSet_264 : nonterminalState {
	public itemSet_264() {}
	public itemSet_264(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_conditional_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "]":
		case "}":
		case ":":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("expression", count, tok.coord, "expression : conditional-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_264

public class itemSet_272 : nonterminalState {
	public itemSet_272() {}
	public itemSet_272(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_assignment(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "]":
		case "}":
		case ":":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("expression", count, tok.coord, "expression : assignment", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_272

public class itemSet_276 : nonterminalState {
	public itemSet_276() {}
	public itemSet_276(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("pre-increment-expression", count, tok.coord, "pre-increment-expression : ++ unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_276

public class itemSet_277 : terminalState {
	public itemSet_277() {}
	public itemSet_277(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_361(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "named-argument": {
				bool reject = false;
				s = new itemSet_362(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_277

public class itemSet_278 : terminalState {
	public itemSet_278() {}
	public itemSet_278(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("attribute-arguments", count, tok.coord, "attribute-arguments : ( named-argument-list )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_278

public class itemSet_279 : terminalState {
	public itemSet_279() {}
	public itemSet_279(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_363(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
		}
	}

} // itemSet_279

public class itemSet_280 : terminalState {
	public itemSet_280() {}
	public itemSet_280(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_173(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "attribute-argument-expression": {
				bool reject = false;
				s = new itemSet_364(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
		}
	}

} // itemSet_280

public class itemSet_281 : terminalState {
	public itemSet_281() {}
	public itemSet_281(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_253(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_365(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_366(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
		}
	}

} // itemSet_281

public class itemSet_282 : terminalState {
	public itemSet_282() {}
	public itemSet_282(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_367(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
		}
	}

} // itemSet_282

public class itemSet_283 : terminalState {
	public itemSet_283() {}
	public itemSet_283(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_368(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
		}
	}

} // itemSet_283

public class itemSet_284 : nonterminalState {
	public itemSet_284() {}
	public itemSet_284(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : * unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_284

public class itemSet_285 : terminalState {
	public itemSet_285() {}
	public itemSet_285(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_369(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
		}
	}

} // itemSet_285

public class itemSet_286 : terminalState {
	public itemSet_286() {}
	public itemSet_286(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_370(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
		}
	}

} // itemSet_286

public class itemSet_287 : terminalState {
	public itemSet_287() {}
	public itemSet_287(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_371(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
		}
	}

} // itemSet_287

public class itemSet_288 : terminalState {
	public itemSet_288() {}
	public itemSet_288(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_372(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
		}
	}

} // itemSet_288

public class itemSet_290 : nonterminalState {
	public itemSet_290() {}
	public itemSet_290(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("unary-expression", count, tok.coord, "unary-expression : ~ unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_290

public class itemSet_293 : terminalState {
	public itemSet_293() {}
	public itemSet_293(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_377(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
		}
	}

} // itemSet_293

public class itemSet_294 : terminalState {
	public itemSet_294() {}
	public itemSet_294(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_378(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
		}
	}

} // itemSet_294

public class itemSet_296 : terminalState {
	public itemSet_296() {}
	public itemSet_296(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("attribute-arguments", count, tok.coord, "attribute-arguments : ( positional-argument-listopt )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_296

public class itemSet_297 : terminalState {
	public itemSet_297() {}
	public itemSet_297(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_379(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_297

public class itemSet_298 : terminalState {
	public itemSet_298() {}
	public itemSet_298(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_380(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_298

public class itemSet_299 : terminalState {
	public itemSet_299() {}
	public itemSet_299(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_381(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_299

public class itemSet_303 : terminalState {
	public itemSet_303() {}
	public itemSet_303(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_188(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_385(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
		}
	}

} // itemSet_303

public class itemSet_304 : nonterminalState {
	public itemSet_304() {}
	public itemSet_304(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.shiftNonterm("addressof-expression", count, tok.coord, "addressof-expression : & unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_304

public class itemSet_305 : terminalState {
	public itemSet_305() {}
	public itemSet_305(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_391(this, tok, count);
			wl.Enqueue(s);
			if (true
				) {
			s = this.shiftNonterm("attributesopt", count, tok.coord, "attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("attributesopt", count, tok.coord, "attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_22(this, tok, count);
			wl.Enqueue(s);
			break;
		case ")":
			if (true
				) {
			s = this.shiftNonterm("formal-parameter-listopt", count, tok.coord, "formal-parameter-listopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "attributesopt": {
				bool reject = false;
				s = new itemSet_386(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "formal-parameter-listopt": {
				bool reject = false;
				s = new itemSet_387(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "parameter-array": {
				bool reject = false;
				s = new itemSet_388(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "fixed-parameter": {
				bool reject = false;
				s = new itemSet_389(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "attributes": {
				bool reject = false;
				s = new itemSet_29(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "fixed-parameters": {
				bool reject = false;
				s = new itemSet_390(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "formal-parameter-list": {
				bool reject = false;
				s = new itemSet_392(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "attribute-section": {
				bool reject = false;
				s = new itemSet_30(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "attribute-sections": {
				bool reject = false;
				s = new itemSet_34(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
		}
	}

} // itemSet_305

public class itemSet_309 : nonterminalState {
	public itemSet_309() {}
	public itemSet_309(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_integral_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
			if (true
				) {
			s = this.below.below.shiftNonterm("enum-base", count, tok.coord, "enum-base : : integral-type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_309

public class itemSet_311 : nonterminalState {
	public itemSet_311() {}
	public itemSet_311(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_enum_body(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
			s = new itemSet_125(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm(";opt", count, tok.coord, ";opt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case ";opt": {
				bool reject = false;
				s = new itemSet_399(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_311

public class itemSet_313 : nonterminalState {
	public itemSet_313() {}
	public itemSet_313(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type_name(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("interface-type-list", count, tok.coord, "interface-type-list : type-name", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_313

public class itemSet_314 : terminalState {
	public itemSet_314() {}
	public itemSet_314(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("attributesopt", count, tok.coord, "attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_22(this, tok, count);
			wl.Enqueue(s);
			break;
		case "}":
			if (true
				) {
			s = this.shiftNonterm("interface-member-declarationsopt", count, tok.coord, "interface-member-declarationsopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "interface-property-declaration": {
				bool reject = false;
				s = new itemSet_401(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "attributesopt": {
				bool reject = false;
				s = new itemSet_402(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "interface-member-declarationsopt": {
				bool reject = false;
				s = new itemSet_403(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "interface-event-declaration": {
				bool reject = false;
				s = new itemSet_404(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "attributes": {
				bool reject = false;
				s = new itemSet_29(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "interface-member-declaration": {
				bool reject = false;
				s = new itemSet_405(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "interface-method-declaration": {
				bool reject = false;
				s = new itemSet_406(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "attribute-section": {
				bool reject = false;
				s = new itemSet_30(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "interface-member-declarations": {
				bool reject = false;
				s = new itemSet_407(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "interface-indexer-declaration": {
				bool reject = false;
				s = new itemSet_408(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "attribute-sections": {
				bool reject = false;
				s = new itemSet_34(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
		}
	}

} // itemSet_314

public class itemSet_315 : nonterminalState {
	public itemSet_315() {}
	public itemSet_315(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_body(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
			s = new itemSet_125(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm(";opt", count, tok.coord, ";opt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case ";opt": {
				bool reject = false;
				s = new itemSet_409(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_315

public class itemSet_316 : terminalState {
	public itemSet_316() {}
	public itemSet_316(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("attributesopt", count, tok.coord, "attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "}":
			if (true
				) {
			s = this.shiftNonterm("struct-member-declarationsopt", count, tok.coord, "struct-member-declarationsopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_22(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "attributesopt": {
				bool reject = false;
				s = new itemSet_410(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "type-declaration": {
				bool reject = false;
				s = new itemSet_411(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "delegate-declaration": {
				bool reject = false;
				s = new itemSet_25(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "event-declaration": {
				bool reject = false;
				s = new itemSet_412(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "indexer-declaration": {
				bool reject = false;
				s = new itemSet_413(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "struct-declaration": {
				bool reject = false;
				s = new itemSet_26(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "class-declaration": {
				bool reject = false;
				s = new itemSet_27(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "method-header": {
				bool reject = false;
				s = new itemSet_414(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "operator-declaration": {
				bool reject = false;
				s = new itemSet_415(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "struct-member-declarationsopt": {
				bool reject = false;
				s = new itemSet_416(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "constant-declaration": {
				bool reject = false;
				s = new itemSet_417(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "constructor-declaration": {
				bool reject = false;
				s = new itemSet_418(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "method-declaration": {
				bool reject = false;
				s = new itemSet_419(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "attributes": {
				bool reject = false;
				s = new itemSet_29(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "attribute-section": {
				bool reject = false;
				s = new itemSet_30(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "property-declaration": {
				bool reject = false;
				s = new itemSet_420(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "field-declaration": {
				bool reject = false;
				s = new itemSet_421(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "struct-member-declaration": {
				bool reject = false;
				s = new itemSet_422(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "interface-declaration": {
				bool reject = false;
				s = new itemSet_33(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "attribute-sections": {
				bool reject = false;
				s = new itemSet_34(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "enum-declaration": {
				bool reject = false;
				s = new itemSet_37(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "struct-member-declarations": {
				bool reject = false;
				s = new itemSet_423(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
		}
	}

} // itemSet_316

public class itemSet_317 : nonterminalState {
	public itemSet_317() {}
	public itemSet_317(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_struct_body(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
			s = new itemSet_125(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm(";opt", count, tok.coord, ";opt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case ";opt": {
				bool reject = false;
				s = new itemSet_424(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_317

public class itemSet_320 : nonterminalState {
	public itemSet_320() {}
	public itemSet_320(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_type(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "{":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("class-type-list", count, tok.coord, "class-type-list : class-type", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_320

public class itemSet_321 : terminalState {
	public itemSet_321() {}
	public itemSet_321(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "out":
		case "struct":
		case "class":
		case "event":
		case "ref":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "params":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm("attributesopt", count, tok.coord, "attributesopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		case "[":
			s = new itemSet_22(this, tok, count);
			wl.Enqueue(s);
			break;
		case "}":
			if (true
				) {
			s = this.shiftNonterm("class-member-declarationsopt", count, tok.coord, "class-member-declarationsopt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "attributesopt": {
				bool reject = false;
				s = new itemSet_426(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "type-declaration": {
				bool reject = false;
				s = new itemSet_427(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "delegate-declaration": {
				bool reject = false;
				s = new itemSet_25(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "event-declaration": {
				bool reject = false;
				s = new itemSet_428(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "indexer-declaration": {
				bool reject = false;
				s = new itemSet_429(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "struct-declaration": {
				bool reject = false;
				s = new itemSet_26(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "class-declaration": {
				bool reject = false;
				s = new itemSet_27(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "class-member-declaration": {
				bool reject = false;
				s = new itemSet_430(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "method-header": {
				bool reject = false;
				s = new itemSet_414(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "operator-declaration": {
				bool reject = false;
				s = new itemSet_431(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "class-member-declarations": {
				bool reject = false;
				s = new itemSet_432(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "constant-declaration": {
				bool reject = false;
				s = new itemSet_433(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "constructor-declaration": {
				bool reject = false;
				s = new itemSet_434(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "method-declaration": {
				bool reject = false;
				s = new itemSet_435(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "class-member-declarationsopt": {
				bool reject = false;
				s = new itemSet_436(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "attributes": {
				bool reject = false;
				s = new itemSet_29(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "destructor-declaration": {
				bool reject = false;
				s = new itemSet_437(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "attribute-section": {
				bool reject = false;
				s = new itemSet_30(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "property-declaration": {
				bool reject = false;
				s = new itemSet_438(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "field-declaration": {
				bool reject = false;
				s = new itemSet_439(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "interface-declaration": {
				bool reject = false;
				s = new itemSet_33(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "attribute-sections": {
				bool reject = false;
				s = new itemSet_34(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "enum-declaration": {
				bool reject = false;
				s = new itemSet_37(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
		}
	}

} // itemSet_321

public class itemSet_322 : nonterminalState {
	public itemSet_322() {}
	public itemSet_322(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_body(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
			s = new itemSet_125(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.shiftNonterm(";opt", count, tok.coord, ";opt :", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case ";opt": {
				bool reject = false;
				s = new itemSet_440(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
		}
	}

} // itemSet_322

public class itemSet_323 : terminalState {
	public itemSet_323() {}
	public itemSet_323(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "[":
		case "extern":
		case "sealed":
		case "volatile":
		case "abstract":
		case "override":
		case "unsafe":
		case "new":
		case "internal":
		case "}":
		case "static":
		case "virtual":
		case "protected":
		case "delegate":
		case "enum":
		case "public":
		case "<EOF>":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "struct":
		case "class":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("namespace-body", count, tok.coord, "namespace-body : { using-directivesopt namespace-member-declarationsopt }", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_323

public class itemSet_341 : terminalState {
	public itemSet_341() {}
	public itemSet_341(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("pointer-member-access", count, tok.coord, "pointer-member-access : primary-expression -> identifier", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_341

public class itemSet_343 : terminalState {
	public itemSet_343() {}
	public itemSet_343(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_449(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
		}
	}

} // itemSet_343

public class itemSet_344 : terminalState {
	public itemSet_344() {}
	public itemSet_344(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : %=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_344

public class itemSet_345 : terminalState {
	public itemSet_345() {}
	public itemSet_345(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : -=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_345

public class itemSet_346 : terminalState {
	public itemSet_346() {}
	public itemSet_346(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : >>=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_346

public class itemSet_347 : nonterminalState {
	public itemSet_347() {}
	public itemSet_347(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_assignment_operator(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_450(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
		}
	}

} // itemSet_347

public class itemSet_348 : terminalState {
	public itemSet_348() {}
	public itemSet_348(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : &=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_348

public class itemSet_349 : terminalState {
	public itemSet_349() {}
	public itemSet_349(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : ^=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_349

public class itemSet_350 : terminalState {
	public itemSet_350() {}
	public itemSet_350(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_451(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
		}
	}

} // itemSet_350

public class itemSet_351 : terminalState {
	public itemSet_351() {}
	public itemSet_351(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : /=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_351

public class itemSet_352 : terminalState {
	public itemSet_352() {}
	public itemSet_352(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : <<=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_352

public class itemSet_353 : terminalState {
	public itemSet_353() {}
	public itemSet_353(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : *=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_353

public class itemSet_354 : terminalState {
	public itemSet_354() {}
	public itemSet_354(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : +=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_354

public class itemSet_355 : terminalState {
	public itemSet_355() {}
	public itemSet_355(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case "--":
		case "byte":
		case "this":
		case "true":
		case "uint":
		case "sbyte":
		case "(":
		case "new":
		case "double":
		case "real-literal":
		case "object":
		case "-":
		case "int":
		case "checked":
		case "char":
		case "*":
		case "string-literal":
		case "null":
		case "unchecked":
		case "ushort":
		case "++":
		case "bool":
		case "long":
		case "false":
		case "typeof":
		case "identifier":
		case "string":
		case "short":
		case "!":
		case "decimal":
		case "sizeof":
		case "ulong":
		case "&":
		case "~":
		case "base":
		case "integer-literal":
		case "float":
		case "character-literal":
			if (true
				) {
			s = this.below.shiftNonterm("assignment-operator", count, tok.coord, "assignment-operator : |=", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_355

public class itemSet_361 : terminalState {
	public itemSet_361() {}
	public itemSet_361(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "=":
			s = new itemSet_280(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_361

public class itemSet_362 : nonterminalState {
	public itemSet_362() {}
	public itemSet_362(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_named_argument(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("named-argument-list", count, tok.coord, "named-argument-list : named-argument-list , named-argument", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_362

public class itemSet_364 : nonterminalState {
	public itemSet_364() {}
	public itemSet_364(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_attribute_argument_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("named-argument", count, tok.coord, "named-argument : identifier = attribute-argument-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_364

public class itemSet_370 : nonterminalState {
	public itemSet_370() {}
	public itemSet_370(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ":":
			s = new itemSet_462(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_370

public class itemSet_374 : nonterminalState {
	public itemSet_374() {}
	public itemSet_374(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_positional_argument(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("positional-argument-list", count, tok.coord, "positional-argument-list : positional-argument-list , positional-argument", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_374

public class itemSet_379 : nonterminalState {
	public itemSet_379() {}
	public itemSet_379(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "%":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("multiplicative-expression", count, tok.coord, "multiplicative-expression : multiplicative-expression % unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_379

public class itemSet_380 : nonterminalState {
	public itemSet_380() {}
	public itemSet_380(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "%":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("multiplicative-expression", count, tok.coord, "multiplicative-expression : multiplicative-expression * unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_380

public class itemSet_381 : nonterminalState {
	public itemSet_381() {}
	public itemSet_381(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "==":
		case ">=":
		case "%":
		case "-":
		case "]":
		case "}":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case ",":
		case "<":
		case "|":
		case ")":
		case "&&":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("multiplicative-expression", count, tok.coord, "multiplicative-expression : multiplicative-expression / unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_381

public class itemSet_387 : nonterminalState {
	public itemSet_387() {}
	public itemSet_387(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_formal_parameter_listopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			s = new itemSet_472(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_387

public class itemSet_388 : nonterminalState {
	public itemSet_388() {}
	public itemSet_388(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_parameter_array(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("formal-parameter-list", count, tok.coord, "formal-parameter-list : parameter-array", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_388

public class itemSet_389 : nonterminalState {
	public itemSet_389() {}
	public itemSet_389(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_fixed_parameter(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("fixed-parameters", count, tok.coord, "fixed-parameters : fixed-parameter", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_389

public class itemSet_391 : terminalState {
	public itemSet_391() {}
	public itemSet_391(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ")":
			if (true
				&& ((terminalState)this).terminal.str =="__arglist"
				) {
			s = this.below.shiftNonterm("parameter-array", count, tok.coord, "parameter-array : identifier===__arglist", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_391

public class itemSet_392 : nonterminalState {
	public itemSet_392() {}
	public itemSet_392(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_formal_parameter_list(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("formal-parameter-listopt", count, tok.coord, "formal-parameter-listopt : formal-parameter-list", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_392

public class itemSet_397 : nonterminalState {
	public itemSet_397() {}
	public itemSet_397(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_enum_member_declarationsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
			s = new itemSet_476(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_397

public class itemSet_398 : nonterminalState {
	public itemSet_398() {}
	public itemSet_398(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_enum_member_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("enum-member-declarations", count, tok.coord, "enum-member-declarations : enum-member-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_398

public class itemSet_399 : nonterminalState {
	public itemSet_399() {}
	public itemSet_399(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_Aopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.below.below.below.below.below.shiftNonterm("enum-declaration", count, tok.coord, "enum-declaration : attributesopt member-modifiersopt enum identifier enum-baseopt enum-body ;opt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_399

public class itemSet_400 : terminalState {
	public itemSet_400() {}
	public itemSet_400(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_477(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_400

public class itemSet_401 : nonterminalState {
	public itemSet_401() {}
	public itemSet_401(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_property_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "byte":
		case "uint":
		case "sbyte":
		case "new":
		case "double":
		case "object":
		case "}":
		case "int":
		case "char":
		case "void":
		case "ushort":
		case "bool":
		case "long":
		case "identifier":
		case "string":
		case "short":
		case "decimal":
		case "ulong":
		case "event":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("interface-member-declaration", count, tok.coord, "interface-member-declaration : interface-property-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_401

public class itemSet_403 : nonterminalState {
	public itemSet_403() {}
	public itemSet_403(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_member_declarationsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
			s = new itemSet_480(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_403

public class itemSet_404 : nonterminalState {
	public itemSet_404() {}
	public itemSet_404(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_event_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "byte":
		case "uint":
		case "sbyte":
		case "new":
		case "double":
		case "object":
		case "}":
		case "int":
		case "char":
		case "void":
		case "ushort":
		case "bool":
		case "long":
		case "identifier":
		case "string":
		case "short":
		case "decimal":
		case "ulong":
		case "event":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("interface-member-declaration", count, tok.coord, "interface-member-declaration : interface-event-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_404

public class itemSet_405 : nonterminalState {
	public itemSet_405() {}
	public itemSet_405(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_member_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "byte":
		case "uint":
		case "sbyte":
		case "new":
		case "double":
		case "object":
		case "}":
		case "int":
		case "char":
		case "void":
		case "ushort":
		case "bool":
		case "long":
		case "identifier":
		case "string":
		case "short":
		case "decimal":
		case "ulong":
		case "event":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("interface-member-declarations", count, tok.coord, "interface-member-declarations : interface-member-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_405

public class itemSet_406 : nonterminalState {
	public itemSet_406() {}
	public itemSet_406(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_method_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "byte":
		case "uint":
		case "sbyte":
		case "new":
		case "double":
		case "object":
		case "}":
		case "int":
		case "char":
		case "void":
		case "ushort":
		case "bool":
		case "long":
		case "identifier":
		case "string":
		case "short":
		case "decimal":
		case "ulong":
		case "event":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("interface-member-declaration", count, tok.coord, "interface-member-declaration : interface-method-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_406

public class itemSet_408 : nonterminalState {
	public itemSet_408() {}
	public itemSet_408(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_interface_indexer_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "[":
		case "byte":
		case "uint":
		case "sbyte":
		case "new":
		case "double":
		case "object":
		case "}":
		case "int":
		case "char":
		case "void":
		case "ushort":
		case "bool":
		case "long":
		case "identifier":
		case "string":
		case "short":
		case "decimal":
		case "ulong":
		case "event":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("interface-member-declaration", count, tok.coord, "interface-member-declaration : interface-indexer-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_408

public class itemSet_409 : nonterminalState {
	public itemSet_409() {}
	public itemSet_409(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_Aopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.below.below.below.below.below.shiftNonterm("interface-declaration", count, tok.coord, "interface-declaration : attributesopt member-modifiersopt interface identifier interface-baseopt interface-body ;opt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_409

public class itemSet_411 : nonterminalState {
	public itemSet_411() {}
	public itemSet_411(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : type-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_411

public class itemSet_412 : nonterminalState {
	public itemSet_412() {}
	public itemSet_412(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_event_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : event-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_412

public class itemSet_413 : nonterminalState {
	public itemSet_413() {}
	public itemSet_413(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_indexer_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : indexer-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_413

public class itemSet_414 : nonterminalState {
	public itemSet_414() {}
	public itemSet_414(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_method_header(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
			s = new itemSet_483(this, tok, count);
			wl.Enqueue(s);
			break;
		case "{":
			s = new itemSet_484(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "block": {
				bool reject = false;
				s = new itemSet_485(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "method-body": {
				bool reject = false;
				s = new itemSet_486(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
		}
	}

} // itemSet_414

public class itemSet_415 : nonterminalState {
	public itemSet_415() {}
	public itemSet_415(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_operator_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : operator-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_415

public class itemSet_416 : nonterminalState {
	public itemSet_416() {}
	public itemSet_416(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_struct_member_declarationsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
			s = new itemSet_487(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_416

public class itemSet_417 : nonterminalState {
	public itemSet_417() {}
	public itemSet_417(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_constant_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : constant-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_417

public class itemSet_418 : nonterminalState {
	public itemSet_418() {}
	public itemSet_418(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_constructor_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : constructor-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_418

public class itemSet_419 : nonterminalState {
	public itemSet_419() {}
	public itemSet_419(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_method_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : method-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_419

public class itemSet_420 : nonterminalState {
	public itemSet_420() {}
	public itemSet_420(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_property_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : property-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_420

public class itemSet_421 : nonterminalState {
	public itemSet_421() {}
	public itemSet_421(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_field_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declaration", count, tok.coord, "struct-member-declaration : field-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_421

public class itemSet_422 : nonterminalState {
	public itemSet_422() {}
	public itemSet_422(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_struct_member_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("struct-member-declarations", count, tok.coord, "struct-member-declarations : struct-member-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_422

public class itemSet_424 : nonterminalState {
	public itemSet_424() {}
	public itemSet_424(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_Aopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.below.below.below.below.below.shiftNonterm("struct-declaration", count, tok.coord, "struct-declaration : attributesopt member-modifiersopt struct identifier struct-interfacesopt struct-body ;opt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_424

public class itemSet_425 : terminalState {
	public itemSet_425() {}
	public itemSet_425(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_489(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
		}
	}

} // itemSet_425

public class itemSet_427 : nonterminalState {
	public itemSet_427() {}
	public itemSet_427(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_type_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : type-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_427

public class itemSet_428 : nonterminalState {
	public itemSet_428() {}
	public itemSet_428(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_event_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : event-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_428

public class itemSet_429 : nonterminalState {
	public itemSet_429() {}
	public itemSet_429(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_indexer_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : indexer-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_429

public class itemSet_430 : nonterminalState {
	public itemSet_430() {}
	public itemSet_430(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_member_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declarations", count, tok.coord, "class-member-declarations : class-member-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_430

public class itemSet_431 : nonterminalState {
	public itemSet_431() {}
	public itemSet_431(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_operator_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : operator-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_431

public class itemSet_433 : nonterminalState {
	public itemSet_433() {}
	public itemSet_433(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_constant_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : constant-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_433

public class itemSet_434 : nonterminalState {
	public itemSet_434() {}
	public itemSet_434(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_constructor_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : constructor-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_434

public class itemSet_435 : nonterminalState {
	public itemSet_435() {}
	public itemSet_435(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_method_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : method-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_435

public class itemSet_436 : nonterminalState {
	public itemSet_436() {}
	public itemSet_436(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_class_member_declarationsopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
			s = new itemSet_492(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_436

public class itemSet_437 : nonterminalState {
	public itemSet_437() {}
	public itemSet_437(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_destructor_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : destructor-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_437

public class itemSet_438 : nonterminalState {
	public itemSet_438() {}
	public itemSet_438(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_property_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : property-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_438

public class itemSet_439 : nonterminalState {
	public itemSet_439() {}
	public itemSet_439(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_field_declaration(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "explicit":
		case "private":
		case "interface":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.shiftNonterm("class-member-declaration", count, tok.coord, "class-member-declaration : field-declaration", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_439

public class itemSet_440 : nonterminalState {
	public itemSet_440() {}
	public itemSet_440(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_Aopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "uint":
		case "volatile":
		case "abstract":
		case "override":
		case "internal":
		case "object":
		case "}":
		case "char":
		case "void":
		case "protected":
		case "ushort":
		case "delegate":
		case "long":
		case "short":
		case "<EOF>":
		case "explicit":
		case "private":
		case "interface":
		case "namespace":
		case "readonly":
		case "~":
		case "struct":
		case "class":
		case "event":
		case "[":
		case "byte":
		case "extern":
		case "sealed":
		case "const":
		case "unsafe":
		case "sbyte":
		case "new":
		case "double":
		case "int":
		case "static":
		case "virtual":
		case "implicit":
		case "bool":
		case "enum":
		case "identifier":
		case "string":
		case "public":
		case "decimal":
		case "ulong":
		case "float":
			if (true
				) {
			s = this.below.below.below.below.below.below.below.shiftNonterm("class-declaration", count, tok.coord, "class-declaration : attributesopt member-modifiersopt class identifier class-baseopt class-body ;opt", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_440

public class itemSet_449 : nonterminalState {
	public itemSet_449() {}
	public itemSet_449(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_unary_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
		case ";":
		case "%=":
		case "-=":
		case "==":
		case ">>=":
		case "&=":
		case ">=":
		case "^=":
		case "%":
		case "-":
		case "=":
		case "]":
		case "}":
		case "/=":
		case "<<":
		case "as":
		case "is":
		case "||":
		case "*":
		case ":":
		case "/":
		case "?":
		case "!=":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case ")":
		case "&&":
		case "+=":
		case ">>":
		case "&":
		case ">":
		case "^":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("cast-expression", count, tok.coord, "cast-expression : ( type ) unary-expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_449

public class itemSet_450 : nonterminalState {
	public itemSet_450() {}
	public itemSet_450(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "]":
		case "}":
		case ":":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("assignment", count, tok.coord, "assignment : unary-expression assignment-operator expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_450

public class itemSet_451 : nonterminalState {
	public itemSet_451() {}
	public itemSet_451(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "]":
		case "}":
		case ":":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.below.below.shiftNonterm("assignment", count, tok.coord, "assignment : unary-expression = expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_451

public class itemSet_452 : nonterminalState {
	public itemSet_452() {}
	public itemSet_452(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_stackalloc_initializer(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "}":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("variable-initializer", count, tok.coord, "variable-initializer : stackalloc-initializer", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_452

public class itemSet_453 : nonterminalState {
	public itemSet_453() {}
	public itemSet_453(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_variable_initializer(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
		case ",":
			if (true
				) {
			s = this.below.shiftNonterm("variable-initializer-list", count, tok.coord, "variable-initializer-list : variable-initializer", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_453

public class itemSet_454 : nonterminalState {
	public itemSet_454() {}
	public itemSet_454(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_array_initializer(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "}":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("variable-initializer", count, tok.coord, "variable-initializer : array-initializer", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_454

public class itemSet_456 : nonterminalState {
	public itemSet_456() {}
	public itemSet_456(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_variable_initializer_listopt(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "}":
			s = new itemSet_496(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

} // itemSet_456

public class itemSet_457 : terminalState {
	public itemSet_457() {}
	public itemSet_457(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "byte":
			s = new itemSet_96(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_97(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_71(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_100(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_101(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_102(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_103(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_104(this, tok, count);
			wl.Enqueue(s);
			break;
		case "void":
			s = new itemSet_253(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_107(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_108(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_109(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_111(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_113(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_115(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_116(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_118(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "namespace-or-type-name": {
				bool reject = false;
				s = new itemSet_72(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "array-type": {
				bool reject = false;
				s = new itemSet_98(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "integral-type": {
				bool reject = false;
				s = new itemSet_99(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "unmanaged-type": {
				bool reject = false;
				s = new itemSet_497(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "type-name": {
				bool reject = false;
				s = new itemSet_112(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "type": {
				bool reject = false;
				s = new itemSet_366(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "pointer-type": {
				bool reject = false;
				s = new itemSet_117(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "class-type": {
				bool reject = false;
				s = new itemSet_119(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
		}
	}

} // itemSet_457

public class itemSet_458 : nonterminalState {
	public itemSet_458() {}
	public itemSet_458(state below, Coordinate end, string rule, state rightmost, bool rejected, int serial)
		: base(below, rule, rightmost, end, rejected, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_expression(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case ";":
		case "}":
		case ",":
		case ")":
			if (true
				) {
			s = this.below.shiftNonterm("variable-initializer", count, tok.coord, "variable-initializer : expression", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_458

public class itemSet_461 : terminalState {
	public itemSet_461() {}
	public itemSet_461(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "%=":
		case ">=":
		case "^=":
		case "-":
		case "=":
		case "]":
		case "}":
		case "is":
		case "*":
		case ":":
		case "&&":
		case "+=":
		case ">>":
		case ".":
		case ">":
		case "^":
		case "+":
		case ";":
		case "[":
		case "--":
		case "-=":
		case "==":
		case ">>=":
		case "(":
		case "&=":
		case "%":
		case "/=":
		case "<<":
		case "as":
		case "||":
		case "/":
		case "?":
		case "!=":
		case "++":
		case "<<=":
		case ",":
		case "<":
		case "|":
		case "*=":
		case "->":
		case ")":
		case "&":
		case "<=":
		case "|=":
			if (true
				) {
			s = this.below.below.below.below.shiftNonterm("sizeof-expression", count, tok.coord, "sizeof-expression : sizeof ( unmanaged-type )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_461

public class itemSet_462 : terminalState {
	public itemSet_462() {}
	public itemSet_462(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "+":
			s = new itemSet_190(this, tok, count);
			wl.Enqueue(s);
			break;
		case "--":
			s = new itemSet_146(this, tok, count);
			wl.Enqueue(s);
			break;
		case "byte":
			s = new itemSet_148(this, tok, count);
			wl.Enqueue(s);
			break;
		case "this":
			s = new itemSet_130(this, tok, count);
			wl.Enqueue(s);
			break;
		case "true":
			s = new itemSet_149(this, tok, count);
			wl.Enqueue(s);
			break;
		case "uint":
			s = new itemSet_170(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sbyte":
			s = new itemSet_194(this, tok, count);
			wl.Enqueue(s);
			break;
		case "(":
			s = new itemSet_150(this, tok, count);
			wl.Enqueue(s);
			break;
		case "new":
			s = new itemSet_151(this, tok, count);
			wl.Enqueue(s);
			break;
		case "double":
			s = new itemSet_152(this, tok, count);
			wl.Enqueue(s);
			break;
		case "real-literal":
			s = new itemSet_153(this, tok, count);
			wl.Enqueue(s);
			break;
		case "object":
			s = new itemSet_133(this, tok, count);
			wl.Enqueue(s);
			break;
		case "-":
			s = new itemSet_134(this, tok, count);
			wl.Enqueue(s);
			break;
		case "int":
			s = new itemSet_154(this, tok, count);
			wl.Enqueue(s);
			break;
		case "checked":
			s = new itemSet_135(this, tok, count);
			wl.Enqueue(s);
			break;
		case "char":
			s = new itemSet_172(this, tok, count);
			wl.Enqueue(s);
			break;
		case "*":
			s = new itemSet_175(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string-literal":
			s = new itemSet_137(this, tok, count);
			wl.Enqueue(s);
			break;
		case "null":
			s = new itemSet_200(this, tok, count);
			wl.Enqueue(s);
			break;
		case "unchecked":
			s = new itemSet_201(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ushort":
			s = new itemSet_176(this, tok, count);
			wl.Enqueue(s);
			break;
		case "++":
			s = new itemSet_155(this, tok, count);
			wl.Enqueue(s);
			break;
		case "bool":
			s = new itemSet_156(this, tok, count);
			wl.Enqueue(s);
			break;
		case "long":
			s = new itemSet_140(this, tok, count);
			wl.Enqueue(s);
			break;
		case "false":
			s = new itemSet_141(this, tok, count);
			wl.Enqueue(s);
			break;
		case "typeof":
			s = new itemSet_206(this, tok, count);
			wl.Enqueue(s);
			break;
		case "identifier":
			s = new itemSet_234(this, tok, count);
			wl.Enqueue(s);
			break;
		case "string":
			s = new itemSet_162(this, tok, count);
			wl.Enqueue(s);
			break;
		case "short":
			s = new itemSet_180(this, tok, count);
			wl.Enqueue(s);
			break;
		case "!":
			s = new itemSet_142(this, tok, count);
			wl.Enqueue(s);
			break;
		case "decimal":
			s = new itemSet_163(this, tok, count);
			wl.Enqueue(s);
			break;
		case "sizeof":
			s = new itemSet_164(this, tok, count);
			wl.Enqueue(s);
			break;
		case "ulong":
			s = new itemSet_210(this, tok, count);
			wl.Enqueue(s);
			break;
		case "&":
			s = new itemSet_211(this, tok, count);
			wl.Enqueue(s);
			break;
		case "~":
			s = new itemSet_183(this, tok, count);
			wl.Enqueue(s);
			break;
		case "base":
			s = new itemSet_184(this, tok, count);
			wl.Enqueue(s);
			break;
		case "integer-literal":
			s = new itemSet_186(this, tok, count);
			wl.Enqueue(s);
			break;
		case "float":
			s = new itemSet_212(this, tok, count);
			wl.Enqueue(s);
			break;
		case "character-literal":
			s = new itemSet_213(this, tok, count);
			wl.Enqueue(s);
			break;
		} // switch
	} // transitions

	public override state shiftNonterm(string nonterm, int count, Coordinate end, string rule, state rightmost) {
		nonterminalState s;
		update(count);
		switch(nonterm) {
		default: throw new System.Exception("\""+nonterm+"\":"+rule);
		case "new-expression": {
				bool reject = false;
				s = new itemSet_131(this, end, rule, rightmost, reject, count);
				if (memo1 != null) {
					memo1.add(s, count);
					return null;
				} else {
					memo1 = s;
					return s;
				}
			}
		case "null-literal": {
				bool reject = false;
				s = new itemSet_132(this, end, rule, rightmost, reject, count);
				if (memo2 != null) {
					memo2.add(s, count);
					return null;
				} else {
					memo2 = s;
					return s;
				}
			}
		case "conditional-expression": {
				bool reject = false;
				s = new itemSet_264(this, end, rule, rightmost, reject, count);
				if (memo3 != null) {
					memo3.add(s, count);
					return null;
				} else {
					memo3 = s;
					return s;
				}
			}
		case "simple-name": {
				bool reject = false;
				s = new itemSet_174(this, end, rule, rightmost, reject, count);
				if (memo4 != null) {
					memo4.add(s, count);
					return null;
				} else {
					memo4 = s;
					return s;
				}
			}
		case "pre-increment-expression": {
				bool reject = false;
				s = new itemSet_136(this, end, rule, rightmost, reject, count);
				if (memo5 != null) {
					memo5.add(s, count);
					return null;
				} else {
					memo5 = s;
					return s;
				}
			}
		case "parenthesized-expression": {
				bool reject = false;
				s = new itemSet_138(this, end, rule, rightmost, reject, count);
				if (memo6 != null) {
					memo6.add(s, count);
					return null;
				} else {
					memo6 = s;
					return s;
				}
			}
		case "relational-expression": {
				bool reject = false;
				s = new itemSet_139(this, end, rule, rightmost, reject, count);
				if (memo7 != null) {
					memo7.add(s, count);
					return null;
				} else {
					memo7 = s;
					return s;
				}
			}
		case "pointer-member-access": {
				bool reject = false;
				s = new itemSet_177(this, end, rule, rightmost, reject, count);
				if (memo8 != null) {
					memo8.add(s, count);
					return null;
				} else {
					memo8 = s;
					return s;
				}
			}
		case "conditional-or-expression": {
				bool reject = false;
				s = new itemSet_178(this, end, rule, rightmost, reject, count);
				if (memo9 != null) {
					memo9.add(s, count);
					return null;
				} else {
					memo9 = s;
					return s;
				}
			}
		case "and-expression": {
				bool reject = false;
				s = new itemSet_179(this, end, rule, rightmost, reject, count);
				if (memo10 != null) {
					memo10.add(s, count);
					return null;
				} else {
					memo10 = s;
					return s;
				}
			}
		case "shift-expression": {
				bool reject = false;
				s = new itemSet_143(this, end, rule, rightmost, reject, count);
				if (memo11 != null) {
					memo11.add(s, count);
					return null;
				} else {
					memo11 = s;
					return s;
				}
			}
		case "conditional-and-expression": {
				bool reject = false;
				s = new itemSet_181(this, end, rule, rightmost, reject, count);
				if (memo12 != null) {
					memo12.add(s, count);
					return null;
				} else {
					memo12 = s;
					return s;
				}
			}
		case "base-access": {
				bool reject = false;
				s = new itemSet_144(this, end, rule, rightmost, reject, count);
				if (memo13 != null) {
					memo13.add(s, count);
					return null;
				} else {
					memo13 = s;
					return s;
				}
			}
		case "equality-expression": {
				bool reject = false;
				s = new itemSet_185(this, end, rule, rightmost, reject, count);
				if (memo14 != null) {
					memo14.add(s, count);
					return null;
				} else {
					memo14 = s;
					return s;
				}
			}
		case "this-access": {
				bool reject = false;
				s = new itemSet_187(this, end, rule, rightmost, reject, count);
				if (memo15 != null) {
					memo15.add(s, count);
					return null;
				} else {
					memo15 = s;
					return s;
				}
			}
		case "unary-expression": {
				bool reject = false;
				s = new itemSet_268(this, end, rule, rightmost, reject, count);
				if (memo16 != null) {
					memo16.add(s, count);
					return null;
				} else {
					memo16 = s;
					return s;
				}
			}
		case "cast-expression": {
				bool reject = false;
				s = new itemSet_189(this, end, rule, rightmost, reject, count);
				if (memo17 != null) {
					memo17.add(s, count);
					return null;
				} else {
					memo17 = s;
					return s;
				}
			}
		case "primary-expression": {
				bool reject = false;
				s = new itemSet_147(this, end, rule, rightmost, reject, count);
				if (memo18 != null) {
					memo18.add(s, count);
					return null;
				} else {
					memo18 = s;
					return s;
				}
			}
		case "object-delegate-creation-expression": {
				bool reject = false;
				s = new itemSet_191(this, end, rule, rightmost, reject, count);
				if (memo19 != null) {
					memo19.add(s, count);
					return null;
				} else {
					memo19 = s;
					return s;
				}
			}
		case "pre-decrement-expression": {
				bool reject = false;
				s = new itemSet_192(this, end, rule, rightmost, reject, count);
				if (memo20 != null) {
					memo20.add(s, count);
					return null;
				} else {
					memo20 = s;
					return s;
				}
			}
		case "addressof-expression": {
				bool reject = false;
				s = new itemSet_193(this, end, rule, rightmost, reject, count);
				if (memo21 != null) {
					memo21.add(s, count);
					return null;
				} else {
					memo21 = s;
					return s;
				}
			}
		case "boolean-literal": {
				bool reject = false;
				s = new itemSet_195(this, end, rule, rightmost, reject, count);
				if (memo22 != null) {
					memo22.add(s, count);
					return null;
				} else {
					memo22 = s;
					return s;
				}
			}
		case "multiplicative-expression": {
				bool reject = false;
				s = new itemSet_197(this, end, rule, rightmost, reject, count);
				if (memo23 != null) {
					memo23.add(s, count);
					return null;
				} else {
					memo23 = s;
					return s;
				}
			}
		case "primary-expression-no-array-creation": {
				bool reject = false;
				s = new itemSet_198(this, end, rule, rightmost, reject, count);
				if (memo24 != null) {
					memo24.add(s, count);
					return null;
				} else {
					memo24 = s;
					return s;
				}
			}
		case "expression": {
				bool reject = false;
				s = new itemSet_500(this, end, rule, rightmost, reject, count);
				if (memo25 != null) {
					memo25.add(s, count);
					return null;
				} else {
					memo25 = s;
					return s;
				}
			}
		case "post-decrement-expression": {
				bool reject = false;
				s = new itemSet_202(this, end, rule, rightmost, reject, count);
				if (memo26 != null) {
					memo26.add(s, count);
					return null;
				} else {
					memo26 = s;
					return s;
				}
			}
		case "invocation-expression": {
				bool reject = false;
				s = new itemSet_203(this, end, rule, rightmost, reject, count);
				if (memo27 != null) {
					memo27.add(s, count);
					return null;
				} else {
					memo27 = s;
					return s;
				}
			}
		case "array-creation-expression": {
				bool reject = false;
				s = new itemSet_204(this, end, rule, rightmost, reject, count);
				if (memo28 != null) {
					memo28.add(s, count);
					return null;
				} else {
					memo28 = s;
					return s;
				}
			}
		case "exclusive-or-expression": {
				bool reject = false;
				s = new itemSet_158(this, end, rule, rightmost, reject, count);
				if (memo29 != null) {
					memo29.add(s, count);
					return null;
				} else {
					memo29 = s;
					return s;
				}
			}
		case "literal": {
				bool reject = false;
				s = new itemSet_159(this, end, rule, rightmost, reject, count);
				if (memo30 != null) {
					memo30.add(s, count);
					return null;
				} else {
					memo30 = s;
					return s;
				}
			}
		case "predefined-type": {
				bool reject = false;
				s = new itemSet_205(this, end, rule, rightmost, reject, count);
				if (memo31 != null) {
					memo31.add(s, count);
					return null;
				} else {
					memo31 = s;
					return s;
				}
			}
		case "member-access": {
				bool reject = false;
				s = new itemSet_160(this, end, rule, rightmost, reject, count);
				if (memo32 != null) {
					memo32.add(s, count);
					return null;
				} else {
					memo32 = s;
					return s;
				}
			}
		case "post-increment-expression": {
				bool reject = false;
				s = new itemSet_207(this, end, rule, rightmost, reject, count);
				if (memo33 != null) {
					memo33.add(s, count);
					return null;
				} else {
					memo33 = s;
					return s;
				}
			}
		case "element-access": {
				bool reject = false;
				s = new itemSet_208(this, end, rule, rightmost, reject, count);
				if (memo34 != null) {
					memo34.add(s, count);
					return null;
				} else {
					memo34 = s;
					return s;
				}
			}
		case "inclusive-or-expression": {
				bool reject = false;
				s = new itemSet_209(this, end, rule, rightmost, reject, count);
				if (memo35 != null) {
					memo35.add(s, count);
					return null;
				} else {
					memo35 = s;
					return s;
				}
			}
		case "typeof-expression": {
				bool reject = false;
				s = new itemSet_165(this, end, rule, rightmost, reject, count);
				if (memo36 != null) {
					memo36.add(s, count);
					return null;
				} else {
					memo36 = s;
					return s;
				}
			}
		case "checked-expression": {
				bool reject = false;
				s = new itemSet_166(this, end, rule, rightmost, reject, count);
				if (memo37 != null) {
					memo37.add(s, count);
					return null;
				} else {
					memo37 = s;
					return s;
				}
			}
		case "assignment": {
				bool reject = false;
				s = new itemSet_272(this, end, rule, rightmost, reject, count);
				if (memo38 != null) {
					memo38.add(s, count);
					return null;
				} else {
					memo38 = s;
					return s;
				}
			}
		case "unchecked-expression": {
				bool reject = false;
				s = new itemSet_167(this, end, rule, rightmost, reject, count);
				if (memo39 != null) {
					memo39.add(s, count);
					return null;
				} else {
					memo39 = s;
					return s;
				}
			}
		case "additive-expression": {
				bool reject = false;
				s = new itemSet_168(this, end, rule, rightmost, reject, count);
				if (memo40 != null) {
					memo40.add(s, count);
					return null;
				} else {
					memo40 = s;
					return s;
				}
			}
		case "sizeof-expression": {
				bool reject = false;
				s = new itemSet_169(this, end, rule, rightmost, reject, count);
				if (memo41 != null) {
					memo41.add(s, count);
					return null;
				} else {
					memo41 = s;
					return s;
				}
			}
		} // switch
	} // shiftNonterm

	nonterminalState memo1;
	nonterminalState memo2;
	nonterminalState memo3;
	nonterminalState memo4;
	nonterminalState memo5;
	nonterminalState memo6;
	nonterminalState memo7;
	nonterminalState memo8;
	nonterminalState memo9;
	nonterminalState memo10;
	nonterminalState memo11;
	nonterminalState memo12;
	nonterminalState memo13;
	nonterminalState memo14;
	nonterminalState memo15;
	nonterminalState memo16;
	nonterminalState memo17;
	nonterminalState memo18;
	nonterminalState memo19;
	nonterminalState memo20;
	nonterminalState memo21;
	nonterminalState memo22;
	nonterminalState memo23;
	nonterminalState memo24;
	nonterminalState memo25;
	nonterminalState memo26;
	nonterminalState memo27;
	nonterminalState memo28;
	nonterminalState memo29;
	nonterminalState memo30;
	nonterminalState memo31;
	nonterminalState memo32;
	nonterminalState memo33;
	nonterminalState memo34;
	nonterminalState memo35;
	nonterminalState memo36;
	nonterminalState memo37;
	nonterminalState memo38;
	nonterminalState memo39;
	nonterminalState memo40;
	nonterminalState memo41;

	private int count = -1;
	private void update(int count) {
		if (this.count != count) {
			this.count = count;
			memo1 = null;
			memo2 = null;
			memo3 = null;
			memo4 = null;
			memo5 = null;
			memo6 = null;
			memo7 = null;
			memo8 = null;
			memo9 = null;
			memo10 = null;
			memo11 = null;
			memo12 = null;
			memo13 = null;
			memo14 = null;
			memo15 = null;
			memo16 = null;
			memo17 = null;
			memo18 = null;
			memo19 = null;
			memo20 = null;
			memo21 = null;
			memo22 = null;
			memo23 = null;
			memo24 = null;
			memo25 = null;
			memo26 = null;
			memo27 = null;
			memo28 = null;
			memo29 = null;
			memo30 = null;
			memo31 = null;
			memo32 = null;
			memo33 = null;
			memo34 = null;
			memo35 = null;
			memo36 = null;
			memo37 = null;
			memo38 = null;
			memo39 = null;
			memo40 = null;
			memo41 = null;
		}
	}

} // itemSet_462

public class itemSet_463 : terminalState {
	public itemSet_463() {}
	public itemSet_463(state below, InputElement terminal, int serial)
		: base(below, terminal, serial) {
	}

	public override object _rewrite2AST() {
		return parse2AST.rewrite_terminal(this);
	}

	public override void transitions(System.Collections.Queue wl, InputElement tok, int count) {
		state s;
		switch (tok.tag) {
		default: return;
		case "]":
		case ",":
			if (true
				) {
			s = this.below.below.below.below.below.shiftNonterm("attribute-arguments", count, tok.coord, "attribute-arguments : ( positional-argument-list , named-argument-list )", this);
				if (s != null) {
					s.transitions(wl, tok, count);
				}
			}
			break;
		} // switch
	} // transitions

} // itemSet_463

